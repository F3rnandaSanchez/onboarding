
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  fatherLastName: 'fatherLastName',
  motherLastName: 'motherLastName',
  email: 'email',
  gender: 'gender',
  phoneNumberCountry: 'phoneNumberCountry',
  phoneNumber: 'phoneNumber',
  curp: 'curp',
  maritalStatus: 'maritalStatus',
  birthDate: 'birthDate',
  birthDateV2: 'birthDateV2',
  city: 'city',
  photo_url: 'photo_url',
  registryType: 'registryType',
  referalCode: 'referalCode',
  useType: 'useType',
  created_time: 'created_time',
  isVerified: 'isVerified',
  created_timeV2: 'created_timeV2',
  last_edit_time: 'last_edit_time',
  last_edit_timeV2: 'last_edit_timeV2',
  acceptedTermsDate: 'acceptedTermsDate',
  lifeState: 'lifeState'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  contactId: 'contactId',
  title: 'title',
  description: 'description',
  urlMultimedia: 'urlMultimedia',
  multimediaType: 'multimediaType',
  multimediaMeta: 'multimediaMeta',
  thumbnailUrl: 'thumbnailUrl',
  lifeState: 'lifeState',
  status: 'status',
  isSend: 'isSend',
  mediaType: 'mediaType',
  createDate: 'createDate',
  createDateV2: 'createDateV2',
  editDate: 'editDate',
  editDateV2: 'editDateV2',
  programDate: 'programDate',
  programDateV2: 'programDateV2',
  urlNft: 'urlNft',
  isNfts: 'isNfts',
  idNft: 'idNft',
  statsId: 'statsId',
  folder: 'folder',
  chain: 'chain',
  estandar: 'estandar',
  whatsapp: 'whatsapp',
  email: 'email',
  maxhastriest: 'maxhastriest',
  maxconfirmtries: 'maxconfirmtries',
  uuid: 'uuid'
};

exports.Prisma.MessageStatusScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  contactId: 'contactId',
  messageId: 'messageId',
  status: 'status',
  programDate: 'programDate',
  programDateV2: 'programDateV2',
  data: 'data',
  urlId: 'urlId',
  messageError: 'messageError'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  fecha: 'fecha',
  fechaV2: 'fechaV2',
  proceso: 'proceso',
  comentario: 'comentario'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  photoUrl: 'photoUrl',
  name: 'name',
  fatherLastName: 'fatherLastName',
  motherLastName: 'motherLastName',
  relation: 'relation',
  email: 'email',
  typeContact: 'typeContact',
  phoneNumber: 'phoneNumber',
  phoneNumberCountry: 'phoneNumberCountry',
  birthDate: 'birthDate',
  birthDateV2: 'birthDateV2',
  notes: 'notes',
  trusted: 'trusted',
  hidden: 'hidden'
};

exports.Prisma.WishesMessagesScalarFieldEnum = {
  id: 'id',
  authorAcc: 'authorAcc',
  createDate: 'createDate',
  status: 'status',
  url: 'url',
  identifier: 'identifier',
  encelopeId: 'encelopeId'
};

exports.Prisma.DeletionsScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId'
};

exports.Prisma.DoubleFactorScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  attemptDate: 'attemptDate',
  code: 'code',
  status: 'status'
};

exports.Prisma.SuscriptionsCatalogueScalarFieldEnum = {
  id: 'id',
  planName: 'planName',
  planprice: 'planprice',
  allowedNfts: 'allowedNfts',
  storage: 'storage',
  patrimonial: 'patrimonial',
  funeralWill: 'funeralWill',
  remains: 'remains',
  organs: 'organs',
  health: 'health',
  dependants: 'dependants',
  pets: 'pets',
  accounts: 'accounts',
  vault: 'vault',
  familyHub: 'familyHub',
  support: 'support',
  document: 'document',
  whoToInform: 'whoToInform',
  daysOfGrace: 'daysOfGrace',
  daysToExpire: 'daysToExpire',
  status: 'status'
};

exports.Prisma.UsersSuscriptionsScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  suscriptionType: 'suscriptionType',
  suscriptionDate: 'suscriptionDate',
  paymentDate: 'paymentDate',
  expireDate: 'expireDate',
  currency: 'currency',
  status: 'status',
  paymentGateway: 'paymentGateway',
  paymentAmount: 'paymentAmount'
};

exports.Prisma.AddOnsCatalogueScalarFieldEnum = {
  id: 'id',
  addOnName: 'addOnName',
  addOnprice: 'addOnprice',
  allowedNfts: 'allowedNfts',
  storage: 'storage',
  patrimonial: 'patrimonial',
  funeralWill: 'funeralWill',
  remains: 'remains',
  organs: 'organs',
  health: 'health',
  dependants: 'dependants',
  pets: 'pets',
  accounts: 'accounts',
  vault: 'vault',
  familyHub: 'familyHub',
  support: 'support',
  document: 'document',
  whoToInform: 'whoToInform',
  daysOfGrace: 'daysOfGrace',
  daysToExpire: 'daysToExpire',
  status: 'status'
};

exports.Prisma.UsersAddOnsScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  addOnType: 'addOnType',
  addOnDate: 'addOnDate',
  paymentDate: 'paymentDate',
  expireDate: 'expireDate',
  currency: 'currency',
  status: 'status',
  paymentGateway: 'paymentGateway',
  paymentAmount: 'paymentAmount'
};

exports.Prisma.ReferalsScalarFieldEnum = {
  id: 'id',
  code: 'code',
  suscription: 'suscription',
  status: 'status'
};

exports.Prisma.PushNotificationsScalarFieldEnum = {
  id: 'id',
  status: 'status',
  title: 'title',
  description: 'description',
  link: 'link'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Message: 'Message',
  MessageStatus: 'MessageStatus',
  Log: 'Log',
  Contact: 'Contact',
  WishesMessages: 'WishesMessages',
  Deletions: 'Deletions',
  doubleFactor: 'doubleFactor',
  suscriptionsCatalogue: 'suscriptionsCatalogue',
  usersSuscriptions: 'usersSuscriptions',
  addOnsCatalogue: 'addOnsCatalogue',
  usersAddOns: 'usersAddOns',
  referals: 'referals',
  pushNotifications: 'pushNotifications'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
