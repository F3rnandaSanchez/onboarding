
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    Message: MessagePayload<ExtArgs>[]
    Contact: ContactPayload<ExtArgs>[]
    MessageStatus: MessageStatusPayload<ExtArgs>[]
    usersSuscriptions: usersSuscriptionsPayload<ExtArgs>[]
    usersAddOns: usersAddOnsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2: Date
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified: boolean
    created_timeV2: Date
    last_edit_time: string
    last_edit_timeV2: Date
    acceptedTermsDate: Date
    lifeState: boolean
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type MessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Message"
  objects: {
    author: UserPayload<ExtArgs>
    contact: ContactPayload<ExtArgs>
    MessageStatus: MessageStatusPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    authorId: number
    contactId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2: Date
    editDate: string
    editDateV2: Date
    programDate: string
    programDateV2: Date
    urlNft: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder: string
    chain: string
    estandar: string
    whatsapp: boolean
    email: boolean
    maxhastriest: number
    maxconfirmtries: number
    uuid: string
  }, ExtArgs["result"]["message"]>
  composites: {}
}

/**
 * Model Message
 * 
 */
export type Message = runtime.Types.DefaultSelection<MessagePayload>
export type MessageStatusPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "MessageStatus"
  objects: {
    author: UserPayload<ExtArgs>
    contact: ContactPayload<ExtArgs>
    message: MessagePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    authorId: number
    contactId: number
    messageId: number
    status: string
    programDate: string
    programDateV2: Date
    data: Prisma.JsonValue
    urlId: number
    messageError: string
  }, ExtArgs["result"]["messageStatus"]>
  composites: {}
}

/**
 * Model MessageStatus
 * 
 */
export type MessageStatus = runtime.Types.DefaultSelection<MessageStatusPayload>
export type LogPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Log"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    fecha: string
    fechaV2: Date
    proceso: string
    comentario: string
  }, ExtArgs["result"]["log"]>
  composites: {}
}

/**
 * Model Log
 * 
 */
export type Log = runtime.Types.DefaultSelection<LogPayload>
export type ContactPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Contact"
  objects: {
    author: UserPayload<ExtArgs>
    Message: MessagePayload<ExtArgs>[]
    MessageStatus: MessageStatusPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    authorId: number
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2: Date
    notes: string
    trusted: boolean
    hidden: boolean
  }, ExtArgs["result"]["contact"]>
  composites: {}
}

/**
 * Model Contact
 * 
 */
export type Contact = runtime.Types.DefaultSelection<ContactPayload>
export type WishesMessagesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "WishesMessages"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    authorAcc: string
    createDate: Date
    status: string
    url: string
    identifier: string
    encelopeId: string
  }, ExtArgs["result"]["wishesMessages"]>
  composites: {}
}

/**
 * Model WishesMessages
 * 
 */
export type WishesMessages = runtime.Types.DefaultSelection<WishesMessagesPayload>
export type DeletionsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Deletions"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    authorId: number
  }, ExtArgs["result"]["deletions"]>
  composites: {}
}

/**
 * Model Deletions
 * 
 */
export type Deletions = runtime.Types.DefaultSelection<DeletionsPayload>
export type doubleFactorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "doubleFactor"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    authorId: string
    attemptDate: Date
    code: string
    status: string
  }, ExtArgs["result"]["doubleFactor"]>
  composites: {}
}

/**
 * Model doubleFactor
 * 
 */
export type doubleFactor = runtime.Types.DefaultSelection<doubleFactorPayload>
export type suscriptionsCataloguePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "suscriptionsCatalogue"
  objects: {
    usersSuscriptions: usersSuscriptionsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    planName: string
    planprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document: number
    whoToInform: number
    daysOfGrace: number
    daysToExpire: number
    status: string
  }, ExtArgs["result"]["suscriptionsCatalogue"]>
  composites: {}
}

/**
 * Model suscriptionsCatalogue
 * 
 */
export type suscriptionsCatalogue = runtime.Types.DefaultSelection<suscriptionsCataloguePayload>
export type usersSuscriptionsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "usersSuscriptions"
  objects: {
    author: UserPayload<ExtArgs>
    suscription: suscriptionsCataloguePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    authorId: number
    suscriptionType: number
    suscriptionDate: Date
    paymentDate: Date
    expireDate: Date
    currency: string
    status: string
    paymentGateway: string
    paymentAmount: number
  }, ExtArgs["result"]["usersSuscriptions"]>
  composites: {}
}

/**
 * Model usersSuscriptions
 * 
 */
export type usersSuscriptions = runtime.Types.DefaultSelection<usersSuscriptionsPayload>
export type addOnsCataloguePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "addOnsCatalogue"
  objects: {
    usersAddOns: usersAddOnsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    addOnName: string
    addOnprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document: number
    whoToInform: number
    daysOfGrace: number
    daysToExpire: number
    status: string
  }, ExtArgs["result"]["addOnsCatalogue"]>
  composites: {}
}

/**
 * Model addOnsCatalogue
 * 
 */
export type addOnsCatalogue = runtime.Types.DefaultSelection<addOnsCataloguePayload>
export type usersAddOnsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "usersAddOns"
  objects: {
    author: UserPayload<ExtArgs>
    suscription: addOnsCataloguePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    authorId: number
    addOnType: number
    addOnDate: Date
    paymentDate: Date
    expireDate: Date
    currency: string
    status: string
    paymentGateway: string
    paymentAmount: number
  }, ExtArgs["result"]["usersAddOns"]>
  composites: {}
}

/**
 * Model usersAddOns
 * 
 */
export type usersAddOns = runtime.Types.DefaultSelection<usersAddOnsPayload>
export type referalsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "referals"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    code: string
    suscription: number
    status: string
  }, ExtArgs["result"]["referals"]>
  composites: {}
}

/**
 * Model referals
 * 
 */
export type referals = runtime.Types.DefaultSelection<referalsPayload>
export type pushNotificationsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "pushNotifications"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    status: string
    title: string
    description: string
    link: string
  }, ExtArgs["result"]["pushNotifications"]>
  composites: {}
}

/**
 * Model pushNotifications
 * 
 */
export type pushNotifications = runtime.Types.DefaultSelection<pushNotificationsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.messageStatus`: Exposes CRUD operations for the **MessageStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageStatuses
    * const messageStatuses = await prisma.messageStatus.findMany()
    * ```
    */
  get messageStatus(): Prisma.MessageStatusDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.wishesMessages`: Exposes CRUD operations for the **WishesMessages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WishesMessages
    * const wishesMessages = await prisma.wishesMessages.findMany()
    * ```
    */
  get wishesMessages(): Prisma.WishesMessagesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.deletions`: Exposes CRUD operations for the **Deletions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deletions
    * const deletions = await prisma.deletions.findMany()
    * ```
    */
  get deletions(): Prisma.DeletionsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.doubleFactor`: Exposes CRUD operations for the **doubleFactor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoubleFactors
    * const doubleFactors = await prisma.doubleFactor.findMany()
    * ```
    */
  get doubleFactor(): Prisma.doubleFactorDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.suscriptionsCatalogue`: Exposes CRUD operations for the **suscriptionsCatalogue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuscriptionsCatalogues
    * const suscriptionsCatalogues = await prisma.suscriptionsCatalogue.findMany()
    * ```
    */
  get suscriptionsCatalogue(): Prisma.suscriptionsCatalogueDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.usersSuscriptions`: Exposes CRUD operations for the **usersSuscriptions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersSuscriptions
    * const usersSuscriptions = await prisma.usersSuscriptions.findMany()
    * ```
    */
  get usersSuscriptions(): Prisma.usersSuscriptionsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.addOnsCatalogue`: Exposes CRUD operations for the **addOnsCatalogue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AddOnsCatalogues
    * const addOnsCatalogues = await prisma.addOnsCatalogue.findMany()
    * ```
    */
  get addOnsCatalogue(): Prisma.addOnsCatalogueDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.usersAddOns`: Exposes CRUD operations for the **usersAddOns** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsersAddOns
    * const usersAddOns = await prisma.usersAddOns.findMany()
    * ```
    */
  get usersAddOns(): Prisma.usersAddOnsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.referals`: Exposes CRUD operations for the **referals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referals
    * const referals = await prisma.referals.findMany()
    * ```
    */
  get referals(): Prisma.referalsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.pushNotifications`: Exposes CRUD operations for the **pushNotifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PushNotifications
    * const pushNotifications = await prisma.pushNotifications.findMany()
    * ```
    */
  get pushNotifications(): Prisma.pushNotificationsDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Message: 'Message',
    MessageStatus: 'MessageStatus',
    Log: 'Log',
    Contact: 'Contact',
    WishesMessages: 'WishesMessages',
    Deletions: 'Deletions',
    doubleFactor: 'doubleFactor',
    suscriptionsCatalogue: 'suscriptionsCatalogue',
    usersSuscriptions: 'usersSuscriptions',
    addOnsCatalogue: 'addOnsCatalogue',
    usersAddOns: 'usersAddOns',
    referals: 'referals',
    pushNotifications: 'pushNotifications'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'message' | 'messageStatus' | 'log' | 'contact' | 'wishesMessages' | 'deletions' | 'doubleFactor' | 'suscriptionsCatalogue' | 'usersSuscriptions' | 'addOnsCatalogue' | 'usersAddOns' | 'referals' | 'pushNotifications'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: MessagePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      MessageStatus: {
        payload: MessageStatusPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.MessageStatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageStatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload>
          }
          findFirst: {
            args: Prisma.MessageStatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageStatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload>
          }
          findMany: {
            args: Prisma.MessageStatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload>[]
          }
          create: {
            args: Prisma.MessageStatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload>
          }
          createMany: {
            args: Prisma.MessageStatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MessageStatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload>
          }
          update: {
            args: Prisma.MessageStatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload>
          }
          deleteMany: {
            args: Prisma.MessageStatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MessageStatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MessageStatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MessageStatusPayload>
          }
          aggregate: {
            args: Prisma.MessageStatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessageStatus>
          }
          groupBy: {
            args: Prisma.MessageStatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageStatusCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageStatusCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: LogPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>,
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: ContactPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      WishesMessages: {
        payload: WishesMessagesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.WishesMessagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WishesMessagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload>
          }
          findFirst: {
            args: Prisma.WishesMessagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WishesMessagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload>
          }
          findMany: {
            args: Prisma.WishesMessagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload>[]
          }
          create: {
            args: Prisma.WishesMessagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload>
          }
          createMany: {
            args: Prisma.WishesMessagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WishesMessagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload>
          }
          update: {
            args: Prisma.WishesMessagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload>
          }
          deleteMany: {
            args: Prisma.WishesMessagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WishesMessagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WishesMessagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WishesMessagesPayload>
          }
          aggregate: {
            args: Prisma.WishesMessagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWishesMessages>
          }
          groupBy: {
            args: Prisma.WishesMessagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WishesMessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.WishesMessagesCountArgs<ExtArgs>,
            result: $Utils.Optional<WishesMessagesCountAggregateOutputType> | number
          }
        }
      }
      Deletions: {
        payload: DeletionsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DeletionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeletionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload>
          }
          findFirst: {
            args: Prisma.DeletionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeletionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload>
          }
          findMany: {
            args: Prisma.DeletionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload>[]
          }
          create: {
            args: Prisma.DeletionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload>
          }
          createMany: {
            args: Prisma.DeletionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DeletionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload>
          }
          update: {
            args: Prisma.DeletionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload>
          }
          deleteMany: {
            args: Prisma.DeletionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DeletionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DeletionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DeletionsPayload>
          }
          aggregate: {
            args: Prisma.DeletionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDeletions>
          }
          groupBy: {
            args: Prisma.DeletionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DeletionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeletionsCountArgs<ExtArgs>,
            result: $Utils.Optional<DeletionsCountAggregateOutputType> | number
          }
        }
      }
      doubleFactor: {
        payload: doubleFactorPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.doubleFactorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doubleFactorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload>
          }
          findFirst: {
            args: Prisma.doubleFactorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doubleFactorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload>
          }
          findMany: {
            args: Prisma.doubleFactorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload>[]
          }
          create: {
            args: Prisma.doubleFactorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload>
          }
          createMany: {
            args: Prisma.doubleFactorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.doubleFactorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload>
          }
          update: {
            args: Prisma.doubleFactorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload>
          }
          deleteMany: {
            args: Prisma.doubleFactorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.doubleFactorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.doubleFactorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<doubleFactorPayload>
          }
          aggregate: {
            args: Prisma.DoubleFactorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoubleFactor>
          }
          groupBy: {
            args: Prisma.DoubleFactorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoubleFactorGroupByOutputType>[]
          }
          count: {
            args: Prisma.doubleFactorCountArgs<ExtArgs>,
            result: $Utils.Optional<DoubleFactorCountAggregateOutputType> | number
          }
        }
      }
      suscriptionsCatalogue: {
        payload: suscriptionsCataloguePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.suscriptionsCatalogueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.suscriptionsCatalogueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload>
          }
          findFirst: {
            args: Prisma.suscriptionsCatalogueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.suscriptionsCatalogueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload>
          }
          findMany: {
            args: Prisma.suscriptionsCatalogueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload>[]
          }
          create: {
            args: Prisma.suscriptionsCatalogueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload>
          }
          createMany: {
            args: Prisma.suscriptionsCatalogueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.suscriptionsCatalogueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload>
          }
          update: {
            args: Prisma.suscriptionsCatalogueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload>
          }
          deleteMany: {
            args: Prisma.suscriptionsCatalogueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.suscriptionsCatalogueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.suscriptionsCatalogueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<suscriptionsCataloguePayload>
          }
          aggregate: {
            args: Prisma.SuscriptionsCatalogueAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSuscriptionsCatalogue>
          }
          groupBy: {
            args: Prisma.SuscriptionsCatalogueGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SuscriptionsCatalogueGroupByOutputType>[]
          }
          count: {
            args: Prisma.suscriptionsCatalogueCountArgs<ExtArgs>,
            result: $Utils.Optional<SuscriptionsCatalogueCountAggregateOutputType> | number
          }
        }
      }
      usersSuscriptions: {
        payload: usersSuscriptionsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.usersSuscriptionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersSuscriptionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload>
          }
          findFirst: {
            args: Prisma.usersSuscriptionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersSuscriptionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload>
          }
          findMany: {
            args: Prisma.usersSuscriptionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload>[]
          }
          create: {
            args: Prisma.usersSuscriptionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload>
          }
          createMany: {
            args: Prisma.usersSuscriptionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersSuscriptionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload>
          }
          update: {
            args: Prisma.usersSuscriptionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload>
          }
          deleteMany: {
            args: Prisma.usersSuscriptionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersSuscriptionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersSuscriptionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersSuscriptionsPayload>
          }
          aggregate: {
            args: Prisma.UsersSuscriptionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsersSuscriptions>
          }
          groupBy: {
            args: Prisma.UsersSuscriptionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersSuscriptionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersSuscriptionsCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersSuscriptionsCountAggregateOutputType> | number
          }
        }
      }
      addOnsCatalogue: {
        payload: addOnsCataloguePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.addOnsCatalogueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.addOnsCatalogueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload>
          }
          findFirst: {
            args: Prisma.addOnsCatalogueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.addOnsCatalogueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload>
          }
          findMany: {
            args: Prisma.addOnsCatalogueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload>[]
          }
          create: {
            args: Prisma.addOnsCatalogueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload>
          }
          createMany: {
            args: Prisma.addOnsCatalogueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.addOnsCatalogueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload>
          }
          update: {
            args: Prisma.addOnsCatalogueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload>
          }
          deleteMany: {
            args: Prisma.addOnsCatalogueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.addOnsCatalogueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.addOnsCatalogueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<addOnsCataloguePayload>
          }
          aggregate: {
            args: Prisma.AddOnsCatalogueAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddOnsCatalogue>
          }
          groupBy: {
            args: Prisma.AddOnsCatalogueGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddOnsCatalogueGroupByOutputType>[]
          }
          count: {
            args: Prisma.addOnsCatalogueCountArgs<ExtArgs>,
            result: $Utils.Optional<AddOnsCatalogueCountAggregateOutputType> | number
          }
        }
      }
      usersAddOns: {
        payload: usersAddOnsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.usersAddOnsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersAddOnsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload>
          }
          findFirst: {
            args: Prisma.usersAddOnsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersAddOnsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload>
          }
          findMany: {
            args: Prisma.usersAddOnsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload>[]
          }
          create: {
            args: Prisma.usersAddOnsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload>
          }
          createMany: {
            args: Prisma.usersAddOnsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersAddOnsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload>
          }
          update: {
            args: Prisma.usersAddOnsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload>
          }
          deleteMany: {
            args: Prisma.usersAddOnsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersAddOnsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersAddOnsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<usersAddOnsPayload>
          }
          aggregate: {
            args: Prisma.UsersAddOnsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsersAddOns>
          }
          groupBy: {
            args: Prisma.UsersAddOnsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersAddOnsGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersAddOnsCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersAddOnsCountAggregateOutputType> | number
          }
        }
      }
      referals: {
        payload: referalsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.referalsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.referalsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload>
          }
          findFirst: {
            args: Prisma.referalsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.referalsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload>
          }
          findMany: {
            args: Prisma.referalsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload>[]
          }
          create: {
            args: Prisma.referalsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload>
          }
          createMany: {
            args: Prisma.referalsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.referalsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload>
          }
          update: {
            args: Prisma.referalsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload>
          }
          deleteMany: {
            args: Prisma.referalsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.referalsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.referalsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<referalsPayload>
          }
          aggregate: {
            args: Prisma.ReferalsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReferals>
          }
          groupBy: {
            args: Prisma.ReferalsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReferalsGroupByOutputType>[]
          }
          count: {
            args: Prisma.referalsCountArgs<ExtArgs>,
            result: $Utils.Optional<ReferalsCountAggregateOutputType> | number
          }
        }
      }
      pushNotifications: {
        payload: pushNotificationsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.pushNotificationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pushNotificationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload>
          }
          findFirst: {
            args: Prisma.pushNotificationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pushNotificationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload>
          }
          findMany: {
            args: Prisma.pushNotificationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload>[]
          }
          create: {
            args: Prisma.pushNotificationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload>
          }
          createMany: {
            args: Prisma.pushNotificationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.pushNotificationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload>
          }
          update: {
            args: Prisma.pushNotificationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload>
          }
          deleteMany: {
            args: Prisma.pushNotificationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.pushNotificationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.pushNotificationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<pushNotificationsPayload>
          }
          aggregate: {
            args: Prisma.PushNotificationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePushNotifications>
          }
          groupBy: {
            args: Prisma.PushNotificationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PushNotificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.pushNotificationsCountArgs<ExtArgs>,
            result: $Utils.Optional<PushNotificationsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Message: number
    Contact: number
    MessageStatus: number
    usersSuscriptions: number
    usersAddOns: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Message?: boolean | UserCountOutputTypeCountMessageArgs
    Contact?: boolean | UserCountOutputTypeCountContactArgs
    MessageStatus?: boolean | UserCountOutputTypeCountMessageStatusArgs
    usersSuscriptions?: boolean | UserCountOutputTypeCountUsersSuscriptionsArgs
    usersAddOns?: boolean | UserCountOutputTypeCountUsersAddOnsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessageStatusArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageStatusWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUsersSuscriptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersSuscriptionsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUsersAddOnsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersAddOnsWhereInput
  }



  /**
   * Count Type MessageCountOutputType
   */


  export type MessageCountOutputType = {
    MessageStatus: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    MessageStatus?: boolean | MessageCountOutputTypeCountMessageStatusArgs
  }

  // Custom InputTypes

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountMessageStatusArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageStatusWhereInput
  }



  /**
   * Count Type ContactCountOutputType
   */


  export type ContactCountOutputType = {
    Message: number
    MessageStatus: number
  }

  export type ContactCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Message?: boolean | ContactCountOutputTypeCountMessageArgs
    MessageStatus?: boolean | ContactCountOutputTypeCountMessageStatusArgs
  }

  // Custom InputTypes

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactCountOutputType
     */
    select?: ContactCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeCountMessageStatusArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageStatusWhereInput
  }



  /**
   * Count Type SuscriptionsCatalogueCountOutputType
   */


  export type SuscriptionsCatalogueCountOutputType = {
    usersSuscriptions: number
  }

  export type SuscriptionsCatalogueCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    usersSuscriptions?: boolean | SuscriptionsCatalogueCountOutputTypeCountUsersSuscriptionsArgs
  }

  // Custom InputTypes

  /**
   * SuscriptionsCatalogueCountOutputType without action
   */
  export type SuscriptionsCatalogueCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuscriptionsCatalogueCountOutputType
     */
    select?: SuscriptionsCatalogueCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SuscriptionsCatalogueCountOutputType without action
   */
  export type SuscriptionsCatalogueCountOutputTypeCountUsersSuscriptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersSuscriptionsWhereInput
  }



  /**
   * Count Type AddOnsCatalogueCountOutputType
   */


  export type AddOnsCatalogueCountOutputType = {
    usersAddOns: number
  }

  export type AddOnsCatalogueCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    usersAddOns?: boolean | AddOnsCatalogueCountOutputTypeCountUsersAddOnsArgs
  }

  // Custom InputTypes

  /**
   * AddOnsCatalogueCountOutputType without action
   */
  export type AddOnsCatalogueCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddOnsCatalogueCountOutputType
     */
    select?: AddOnsCatalogueCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AddOnsCatalogueCountOutputType without action
   */
  export type AddOnsCatalogueCountOutputTypeCountUsersAddOnsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersAddOnsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    referalCode: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    referalCode: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    fatherLastName: string | null
    motherLastName: string | null
    email: string | null
    gender: string | null
    phoneNumberCountry: string | null
    phoneNumber: string | null
    curp: string | null
    maritalStatus: string | null
    birthDate: string | null
    birthDateV2: Date | null
    city: string | null
    photo_url: string | null
    registryType: string | null
    referalCode: number | null
    useType: string | null
    created_time: string | null
    isVerified: boolean | null
    created_timeV2: Date | null
    last_edit_time: string | null
    last_edit_timeV2: Date | null
    acceptedTermsDate: Date | null
    lifeState: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    fatherLastName: string | null
    motherLastName: string | null
    email: string | null
    gender: string | null
    phoneNumberCountry: string | null
    phoneNumber: string | null
    curp: string | null
    maritalStatus: string | null
    birthDate: string | null
    birthDateV2: Date | null
    city: string | null
    photo_url: string | null
    registryType: string | null
    referalCode: number | null
    useType: string | null
    created_time: string | null
    isVerified: boolean | null
    created_timeV2: Date | null
    last_edit_time: string | null
    last_edit_timeV2: Date | null
    acceptedTermsDate: Date | null
    lifeState: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    fatherLastName: number
    motherLastName: number
    email: number
    gender: number
    phoneNumberCountry: number
    phoneNumber: number
    curp: number
    maritalStatus: number
    birthDate: number
    birthDateV2: number
    city: number
    photo_url: number
    registryType: number
    referalCode: number
    useType: number
    created_time: number
    isVerified: number
    created_timeV2: number
    last_edit_time: number
    last_edit_timeV2: number
    acceptedTermsDate: number
    lifeState: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    referalCode?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    referalCode?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    fatherLastName?: true
    motherLastName?: true
    email?: true
    gender?: true
    phoneNumberCountry?: true
    phoneNumber?: true
    curp?: true
    maritalStatus?: true
    birthDate?: true
    birthDateV2?: true
    city?: true
    photo_url?: true
    registryType?: true
    referalCode?: true
    useType?: true
    created_time?: true
    isVerified?: true
    created_timeV2?: true
    last_edit_time?: true
    last_edit_timeV2?: true
    acceptedTermsDate?: true
    lifeState?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    fatherLastName?: true
    motherLastName?: true
    email?: true
    gender?: true
    phoneNumberCountry?: true
    phoneNumber?: true
    curp?: true
    maritalStatus?: true
    birthDate?: true
    birthDateV2?: true
    city?: true
    photo_url?: true
    registryType?: true
    referalCode?: true
    useType?: true
    created_time?: true
    isVerified?: true
    created_timeV2?: true
    last_edit_time?: true
    last_edit_timeV2?: true
    acceptedTermsDate?: true
    lifeState?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    fatherLastName?: true
    motherLastName?: true
    email?: true
    gender?: true
    phoneNumberCountry?: true
    phoneNumber?: true
    curp?: true
    maritalStatus?: true
    birthDate?: true
    birthDateV2?: true
    city?: true
    photo_url?: true
    registryType?: true
    referalCode?: true
    useType?: true
    created_time?: true
    isVerified?: true
    created_timeV2?: true
    last_edit_time?: true
    last_edit_timeV2?: true
    acceptedTermsDate?: true
    lifeState?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2: Date
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified: boolean
    created_timeV2: Date
    last_edit_time: string
    last_edit_timeV2: Date
    acceptedTermsDate: Date
    lifeState: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    fatherLastName?: boolean
    motherLastName?: boolean
    email?: boolean
    gender?: boolean
    phoneNumberCountry?: boolean
    phoneNumber?: boolean
    curp?: boolean
    maritalStatus?: boolean
    birthDate?: boolean
    birthDateV2?: boolean
    city?: boolean
    photo_url?: boolean
    registryType?: boolean
    referalCode?: boolean
    useType?: boolean
    created_time?: boolean
    isVerified?: boolean
    created_timeV2?: boolean
    last_edit_time?: boolean
    last_edit_timeV2?: boolean
    acceptedTermsDate?: boolean
    lifeState?: boolean
    Message?: boolean | User$MessageArgs<ExtArgs>
    Contact?: boolean | User$ContactArgs<ExtArgs>
    MessageStatus?: boolean | User$MessageStatusArgs<ExtArgs>
    usersSuscriptions?: boolean | User$usersSuscriptionsArgs<ExtArgs>
    usersAddOns?: boolean | User$usersAddOnsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    fatherLastName?: boolean
    motherLastName?: boolean
    email?: boolean
    gender?: boolean
    phoneNumberCountry?: boolean
    phoneNumber?: boolean
    curp?: boolean
    maritalStatus?: boolean
    birthDate?: boolean
    birthDateV2?: boolean
    city?: boolean
    photo_url?: boolean
    registryType?: boolean
    referalCode?: boolean
    useType?: boolean
    created_time?: boolean
    isVerified?: boolean
    created_timeV2?: boolean
    last_edit_time?: boolean
    last_edit_timeV2?: boolean
    acceptedTermsDate?: boolean
    lifeState?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Message?: boolean | User$MessageArgs<ExtArgs>
    Contact?: boolean | User$ContactArgs<ExtArgs>
    MessageStatus?: boolean | User$MessageStatusArgs<ExtArgs>
    usersSuscriptions?: boolean | User$usersSuscriptionsArgs<ExtArgs>
    usersAddOns?: boolean | User$usersAddOnsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Message<T extends User$MessageArgs<ExtArgs> = {}>(args?: Subset<T, User$MessageArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    Contact<T extends User$ContactArgs<ExtArgs> = {}>(args?: Subset<T, User$ContactArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findMany', never>| Null>;

    MessageStatus<T extends User$MessageStatusArgs<ExtArgs> = {}>(args?: Subset<T, User$MessageStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findMany', never>| Null>;

    usersSuscriptions<T extends User$usersSuscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$usersSuscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    usersAddOns<T extends User$usersAddOnsArgs<ExtArgs> = {}>(args?: Subset<T, User$usersAddOnsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Message
   */
  export type User$MessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * User.Contact
   */
  export type User$ContactArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * User.MessageStatus
   */
  export type User$MessageStatusArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    where?: MessageStatusWhereInput
    orderBy?: Enumerable<MessageStatusOrderByWithRelationInput>
    cursor?: MessageStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageStatusScalarFieldEnum>
  }


  /**
   * User.usersSuscriptions
   */
  export type User$usersSuscriptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    where?: usersSuscriptionsWhereInput
    orderBy?: Enumerable<usersSuscriptionsOrderByWithRelationInput>
    cursor?: usersSuscriptionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersSuscriptionsScalarFieldEnum>
  }


  /**
   * User.usersAddOns
   */
  export type User$usersAddOnsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    where?: usersAddOnsWhereInput
    orderBy?: Enumerable<usersAddOnsOrderByWithRelationInput>
    cursor?: usersAddOnsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersAddOnsScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
    contactId: number | null
    maxhastriest: number | null
    maxconfirmtries: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    authorId: number | null
    contactId: number | null
    maxhastriest: number | null
    maxconfirmtries: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    authorId: number | null
    contactId: number | null
    title: string | null
    description: string | null
    urlMultimedia: string | null
    multimediaType: string | null
    multimediaMeta: string | null
    thumbnailUrl: string | null
    lifeState: string | null
    status: string | null
    isSend: boolean | null
    mediaType: boolean | null
    createDate: string | null
    createDateV2: Date | null
    editDate: string | null
    editDateV2: Date | null
    programDate: string | null
    programDateV2: Date | null
    urlNft: string | null
    isNfts: boolean | null
    idNft: string | null
    statsId: string | null
    folder: string | null
    chain: string | null
    estandar: string | null
    whatsapp: boolean | null
    email: boolean | null
    maxhastriest: number | null
    maxconfirmtries: number | null
    uuid: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    authorId: number | null
    contactId: number | null
    title: string | null
    description: string | null
    urlMultimedia: string | null
    multimediaType: string | null
    multimediaMeta: string | null
    thumbnailUrl: string | null
    lifeState: string | null
    status: string | null
    isSend: boolean | null
    mediaType: boolean | null
    createDate: string | null
    createDateV2: Date | null
    editDate: string | null
    editDateV2: Date | null
    programDate: string | null
    programDateV2: Date | null
    urlNft: string | null
    isNfts: boolean | null
    idNft: string | null
    statsId: string | null
    folder: string | null
    chain: string | null
    estandar: string | null
    whatsapp: boolean | null
    email: boolean | null
    maxhastriest: number | null
    maxconfirmtries: number | null
    uuid: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    authorId: number
    contactId: number
    title: number
    description: number
    urlMultimedia: number
    multimediaType: number
    multimediaMeta: number
    thumbnailUrl: number
    lifeState: number
    status: number
    isSend: number
    mediaType: number
    createDate: number
    createDateV2: number
    editDate: number
    editDateV2: number
    programDate: number
    programDateV2: number
    urlNft: number
    isNfts: number
    idNft: number
    statsId: number
    folder: number
    chain: number
    estandar: number
    whatsapp: number
    email: number
    maxhastriest: number
    maxconfirmtries: number
    uuid: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    maxhastriest?: true
    maxconfirmtries?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    maxhastriest?: true
    maxconfirmtries?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    title?: true
    description?: true
    urlMultimedia?: true
    multimediaType?: true
    multimediaMeta?: true
    thumbnailUrl?: true
    lifeState?: true
    status?: true
    isSend?: true
    mediaType?: true
    createDate?: true
    createDateV2?: true
    editDate?: true
    editDateV2?: true
    programDate?: true
    programDateV2?: true
    urlNft?: true
    isNfts?: true
    idNft?: true
    statsId?: true
    folder?: true
    chain?: true
    estandar?: true
    whatsapp?: true
    email?: true
    maxhastriest?: true
    maxconfirmtries?: true
    uuid?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    title?: true
    description?: true
    urlMultimedia?: true
    multimediaType?: true
    multimediaMeta?: true
    thumbnailUrl?: true
    lifeState?: true
    status?: true
    isSend?: true
    mediaType?: true
    createDate?: true
    createDateV2?: true
    editDate?: true
    editDateV2?: true
    programDate?: true
    programDateV2?: true
    urlNft?: true
    isNfts?: true
    idNft?: true
    statsId?: true
    folder?: true
    chain?: true
    estandar?: true
    whatsapp?: true
    email?: true
    maxhastriest?: true
    maxconfirmtries?: true
    uuid?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    title?: true
    description?: true
    urlMultimedia?: true
    multimediaType?: true
    multimediaMeta?: true
    thumbnailUrl?: true
    lifeState?: true
    status?: true
    isSend?: true
    mediaType?: true
    createDate?: true
    createDateV2?: true
    editDate?: true
    editDateV2?: true
    programDate?: true
    programDateV2?: true
    urlNft?: true
    isNfts?: true
    idNft?: true
    statsId?: true
    folder?: true
    chain?: true
    estandar?: true
    whatsapp?: true
    email?: true
    maxhastriest?: true
    maxconfirmtries?: true
    uuid?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithAggregationInput>
    by: MessageScalarFieldEnum[]
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: number
    authorId: number
    contactId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2: Date
    editDate: string
    editDateV2: Date
    programDate: string
    programDateV2: Date
    urlNft: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder: string
    chain: string
    estandar: string
    whatsapp: boolean
    email: boolean
    maxhastriest: number
    maxconfirmtries: number
    uuid: string
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    contactId?: boolean
    title?: boolean
    description?: boolean
    urlMultimedia?: boolean
    multimediaType?: boolean
    multimediaMeta?: boolean
    thumbnailUrl?: boolean
    lifeState?: boolean
    status?: boolean
    isSend?: boolean
    mediaType?: boolean
    createDate?: boolean
    createDateV2?: boolean
    editDate?: boolean
    editDateV2?: boolean
    programDate?: boolean
    programDateV2?: boolean
    urlNft?: boolean
    isNfts?: boolean
    idNft?: boolean
    statsId?: boolean
    folder?: boolean
    chain?: boolean
    estandar?: boolean
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: boolean
    maxconfirmtries?: boolean
    uuid?: boolean
    author?: boolean | UserArgs<ExtArgs>
    contact?: boolean | ContactArgs<ExtArgs>
    MessageStatus?: boolean | Message$MessageStatusArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    authorId?: boolean
    contactId?: boolean
    title?: boolean
    description?: boolean
    urlMultimedia?: boolean
    multimediaType?: boolean
    multimediaMeta?: boolean
    thumbnailUrl?: boolean
    lifeState?: boolean
    status?: boolean
    isSend?: boolean
    mediaType?: boolean
    createDate?: boolean
    createDateV2?: boolean
    editDate?: boolean
    editDateV2?: boolean
    programDate?: boolean
    programDateV2?: boolean
    urlNft?: boolean
    isNfts?: boolean
    idNft?: boolean
    statsId?: boolean
    folder?: boolean
    chain?: boolean
    estandar?: boolean
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: boolean
    maxconfirmtries?: boolean
    uuid?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    author?: boolean | UserArgs<ExtArgs>
    contact?: boolean | ContactArgs<ExtArgs>
    MessageStatus?: boolean | Message$MessageStatusArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeArgs<ExtArgs>
  }


  type MessageGetPayload<S extends boolean | null | undefined | MessageArgs> = $Types.GetResult<MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Message'> extends True ? Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Message'> extends True ? Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageCreateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>
    ): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    author<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    contact<T extends ContactArgs<ExtArgs> = {}>(args?: Subset<T, ContactArgs<ExtArgs>>): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    MessageStatus<T extends Message$MessageStatusArgs<ExtArgs> = {}>(args?: Subset<T, Message$MessageStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Message base type for findUnique actions
   */
  export type MessageFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUnique
   */
  export interface MessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessageFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message base type for findFirst actions
   */
  export type MessageFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }

  /**
   * Message findFirst
   */
  export interface MessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessageFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: Enumerable<MessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message.MessageStatus
   */
  export type Message$MessageStatusArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    where?: MessageStatusWhereInput
    orderBy?: Enumerable<MessageStatusOrderByWithRelationInput>
    cursor?: MessageStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageStatusScalarFieldEnum>
  }


  /**
   * Message without action
   */
  export type MessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
  }



  /**
   * Model MessageStatus
   */


  export type AggregateMessageStatus = {
    _count: MessageStatusCountAggregateOutputType | null
    _avg: MessageStatusAvgAggregateOutputType | null
    _sum: MessageStatusSumAggregateOutputType | null
    _min: MessageStatusMinAggregateOutputType | null
    _max: MessageStatusMaxAggregateOutputType | null
  }

  export type MessageStatusAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
    contactId: number | null
    messageId: number | null
    urlId: number | null
  }

  export type MessageStatusSumAggregateOutputType = {
    id: number | null
    authorId: number | null
    contactId: number | null
    messageId: number | null
    urlId: number | null
  }

  export type MessageStatusMinAggregateOutputType = {
    id: number | null
    authorId: number | null
    contactId: number | null
    messageId: number | null
    status: string | null
    programDate: string | null
    programDateV2: Date | null
    urlId: number | null
    messageError: string | null
  }

  export type MessageStatusMaxAggregateOutputType = {
    id: number | null
    authorId: number | null
    contactId: number | null
    messageId: number | null
    status: string | null
    programDate: string | null
    programDateV2: Date | null
    urlId: number | null
    messageError: string | null
  }

  export type MessageStatusCountAggregateOutputType = {
    id: number
    authorId: number
    contactId: number
    messageId: number
    status: number
    programDate: number
    programDateV2: number
    data: number
    urlId: number
    messageError: number
    _all: number
  }


  export type MessageStatusAvgAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    messageId?: true
    urlId?: true
  }

  export type MessageStatusSumAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    messageId?: true
    urlId?: true
  }

  export type MessageStatusMinAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    messageId?: true
    status?: true
    programDate?: true
    programDateV2?: true
    urlId?: true
    messageError?: true
  }

  export type MessageStatusMaxAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    messageId?: true
    status?: true
    programDate?: true
    programDateV2?: true
    urlId?: true
    messageError?: true
  }

  export type MessageStatusCountAggregateInputType = {
    id?: true
    authorId?: true
    contactId?: true
    messageId?: true
    status?: true
    programDate?: true
    programDateV2?: true
    data?: true
    urlId?: true
    messageError?: true
    _all?: true
  }

  export type MessageStatusAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageStatus to aggregate.
     */
    where?: MessageStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageStatuses to fetch.
     */
    orderBy?: Enumerable<MessageStatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageStatuses
    **/
    _count?: true | MessageStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageStatusMaxAggregateInputType
  }

  export type GetMessageStatusAggregateType<T extends MessageStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageStatus[P]>
      : GetScalarType<T[P], AggregateMessageStatus[P]>
  }




  export type MessageStatusGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MessageStatusWhereInput
    orderBy?: Enumerable<MessageStatusOrderByWithAggregationInput>
    by: MessageStatusScalarFieldEnum[]
    having?: MessageStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageStatusCountAggregateInputType | true
    _avg?: MessageStatusAvgAggregateInputType
    _sum?: MessageStatusSumAggregateInputType
    _min?: MessageStatusMinAggregateInputType
    _max?: MessageStatusMaxAggregateInputType
  }


  export type MessageStatusGroupByOutputType = {
    id: number
    authorId: number
    contactId: number
    messageId: number
    status: string
    programDate: string
    programDateV2: Date
    data: JsonValue
    urlId: number
    messageError: string
    _count: MessageStatusCountAggregateOutputType | null
    _avg: MessageStatusAvgAggregateOutputType | null
    _sum: MessageStatusSumAggregateOutputType | null
    _min: MessageStatusMinAggregateOutputType | null
    _max: MessageStatusMaxAggregateOutputType | null
  }

  type GetMessageStatusGroupByPayload<T extends MessageStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessageStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageStatusGroupByOutputType[P]>
            : GetScalarType<T[P], MessageStatusGroupByOutputType[P]>
        }
      >
    >


  export type MessageStatusSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    contactId?: boolean
    messageId?: boolean
    status?: boolean
    programDate?: boolean
    programDateV2?: boolean
    data?: boolean
    urlId?: boolean
    messageError?: boolean
    author?: boolean | UserArgs<ExtArgs>
    contact?: boolean | ContactArgs<ExtArgs>
    message?: boolean | MessageArgs<ExtArgs>
  }, ExtArgs["result"]["messageStatus"]>

  export type MessageStatusSelectScalar = {
    id?: boolean
    authorId?: boolean
    contactId?: boolean
    messageId?: boolean
    status?: boolean
    programDate?: boolean
    programDateV2?: boolean
    data?: boolean
    urlId?: boolean
    messageError?: boolean
  }

  export type MessageStatusInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    author?: boolean | UserArgs<ExtArgs>
    contact?: boolean | ContactArgs<ExtArgs>
    message?: boolean | MessageArgs<ExtArgs>
  }


  type MessageStatusGetPayload<S extends boolean | null | undefined | MessageStatusArgs> = $Types.GetResult<MessageStatusPayload, S>

  type MessageStatusCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MessageStatusFindManyArgs, 'select' | 'include'> & {
      select?: MessageStatusCountAggregateInputType | true
    }

  export interface MessageStatusDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageStatus'], meta: { name: 'MessageStatus' } }
    /**
     * Find zero or one MessageStatus that matches the filter.
     * @param {MessageStatusFindUniqueArgs} args - Arguments to find a MessageStatus
     * @example
     * // Get one MessageStatus
     * const messageStatus = await prisma.messageStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageStatusFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageStatusFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MessageStatus'> extends True ? Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one MessageStatus that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageStatusFindUniqueOrThrowArgs} args - Arguments to find a MessageStatus
     * @example
     * // Get one MessageStatus
     * const messageStatus = await prisma.messageStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageStatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageStatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first MessageStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageStatusFindFirstArgs} args - Arguments to find a MessageStatus
     * @example
     * // Get one MessageStatus
     * const messageStatus = await prisma.messageStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageStatusFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageStatusFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MessageStatus'> extends True ? Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first MessageStatus that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageStatusFindFirstOrThrowArgs} args - Arguments to find a MessageStatus
     * @example
     * // Get one MessageStatus
     * const messageStatus = await prisma.messageStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageStatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageStatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more MessageStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageStatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageStatuses
     * const messageStatuses = await prisma.messageStatus.findMany()
     * 
     * // Get first 10 MessageStatuses
     * const messageStatuses = await prisma.messageStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageStatusWithIdOnly = await prisma.messageStatus.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageStatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageStatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a MessageStatus.
     * @param {MessageStatusCreateArgs} args - Arguments to create a MessageStatus.
     * @example
     * // Create one MessageStatus
     * const MessageStatus = await prisma.messageStatus.create({
     *   data: {
     *     // ... data to create a MessageStatus
     *   }
     * })
     * 
    **/
    create<T extends MessageStatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageStatusCreateArgs<ExtArgs>>
    ): Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many MessageStatuses.
     *     @param {MessageStatusCreateManyArgs} args - Arguments to create many MessageStatuses.
     *     @example
     *     // Create many MessageStatuses
     *     const messageStatus = await prisma.messageStatus.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageStatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageStatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MessageStatus.
     * @param {MessageStatusDeleteArgs} args - Arguments to delete one MessageStatus.
     * @example
     * // Delete one MessageStatus
     * const MessageStatus = await prisma.messageStatus.delete({
     *   where: {
     *     // ... filter to delete one MessageStatus
     *   }
     * })
     * 
    **/
    delete<T extends MessageStatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MessageStatusDeleteArgs<ExtArgs>>
    ): Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one MessageStatus.
     * @param {MessageStatusUpdateArgs} args - Arguments to update one MessageStatus.
     * @example
     * // Update one MessageStatus
     * const messageStatus = await prisma.messageStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageStatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MessageStatusUpdateArgs<ExtArgs>>
    ): Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more MessageStatuses.
     * @param {MessageStatusDeleteManyArgs} args - Arguments to filter MessageStatuses to delete.
     * @example
     * // Delete a few MessageStatuses
     * const { count } = await prisma.messageStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageStatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MessageStatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageStatuses
     * const messageStatus = await prisma.messageStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageStatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MessageStatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MessageStatus.
     * @param {MessageStatusUpsertArgs} args - Arguments to update or create a MessageStatus.
     * @example
     * // Update or create a MessageStatus
     * const messageStatus = await prisma.messageStatus.upsert({
     *   create: {
     *     // ... data to create a MessageStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageStatus we want to update
     *   }
     * })
    **/
    upsert<T extends MessageStatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MessageStatusUpsertArgs<ExtArgs>>
    ): Prisma__MessageStatusClient<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of MessageStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageStatusCountArgs} args - Arguments to filter MessageStatuses to count.
     * @example
     * // Count the number of MessageStatuses
     * const count = await prisma.messageStatus.count({
     *   where: {
     *     // ... the filter for the MessageStatuses we want to count
     *   }
     * })
    **/
    count<T extends MessageStatusCountArgs>(
      args?: Subset<T, MessageStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageStatusAggregateArgs>(args: Subset<T, MessageStatusAggregateArgs>): Prisma.PrismaPromise<GetMessageStatusAggregateType<T>>

    /**
     * Group by MessageStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageStatusGroupByArgs['orderBy'] }
        : { orderBy?: MessageStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageStatusClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    author<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    contact<T extends ContactArgs<ExtArgs> = {}>(args?: Subset<T, ContactArgs<ExtArgs>>): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    message<T extends MessageArgs<ExtArgs> = {}>(args?: Subset<T, MessageArgs<ExtArgs>>): Prisma__MessageClient<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MessageStatus base type for findUnique actions
   */
  export type MessageStatusFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageStatus to fetch.
     */
    where: MessageStatusWhereUniqueInput
  }

  /**
   * MessageStatus findUnique
   */
  export interface MessageStatusFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessageStatusFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MessageStatus findUniqueOrThrow
   */
  export type MessageStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageStatus to fetch.
     */
    where: MessageStatusWhereUniqueInput
  }


  /**
   * MessageStatus base type for findFirst actions
   */
  export type MessageStatusFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageStatus to fetch.
     */
    where?: MessageStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageStatuses to fetch.
     */
    orderBy?: Enumerable<MessageStatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageStatuses.
     */
    cursor?: MessageStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageStatuses.
     */
    distinct?: Enumerable<MessageStatusScalarFieldEnum>
  }

  /**
   * MessageStatus findFirst
   */
  export interface MessageStatusFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MessageStatusFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MessageStatus findFirstOrThrow
   */
  export type MessageStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageStatus to fetch.
     */
    where?: MessageStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageStatuses to fetch.
     */
    orderBy?: Enumerable<MessageStatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageStatuses.
     */
    cursor?: MessageStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageStatuses.
     */
    distinct?: Enumerable<MessageStatusScalarFieldEnum>
  }


  /**
   * MessageStatus findMany
   */
  export type MessageStatusFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * Filter, which MessageStatuses to fetch.
     */
    where?: MessageStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageStatuses to fetch.
     */
    orderBy?: Enumerable<MessageStatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageStatuses.
     */
    cursor?: MessageStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageStatuses.
     */
    skip?: number
    distinct?: Enumerable<MessageStatusScalarFieldEnum>
  }


  /**
   * MessageStatus create
   */
  export type MessageStatusCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageStatus.
     */
    data: XOR<MessageStatusCreateInput, MessageStatusUncheckedCreateInput>
  }


  /**
   * MessageStatus createMany
   */
  export type MessageStatusCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageStatuses.
     */
    data: Enumerable<MessageStatusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MessageStatus update
   */
  export type MessageStatusUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageStatus.
     */
    data: XOR<MessageStatusUpdateInput, MessageStatusUncheckedUpdateInput>
    /**
     * Choose, which MessageStatus to update.
     */
    where: MessageStatusWhereUniqueInput
  }


  /**
   * MessageStatus updateMany
   */
  export type MessageStatusUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageStatuses.
     */
    data: XOR<MessageStatusUpdateManyMutationInput, MessageStatusUncheckedUpdateManyInput>
    /**
     * Filter which MessageStatuses to update
     */
    where?: MessageStatusWhereInput
  }


  /**
   * MessageStatus upsert
   */
  export type MessageStatusUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageStatus to update in case it exists.
     */
    where: MessageStatusWhereUniqueInput
    /**
     * In case the MessageStatus found by the `where` argument doesn't exist, create a new MessageStatus with this data.
     */
    create: XOR<MessageStatusCreateInput, MessageStatusUncheckedCreateInput>
    /**
     * In case the MessageStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageStatusUpdateInput, MessageStatusUncheckedUpdateInput>
  }


  /**
   * MessageStatus delete
   */
  export type MessageStatusDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    /**
     * Filter which MessageStatus to delete.
     */
    where: MessageStatusWhereUniqueInput
  }


  /**
   * MessageStatus deleteMany
   */
  export type MessageStatusDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageStatuses to delete
     */
    where?: MessageStatusWhereInput
  }


  /**
   * MessageStatus without action
   */
  export type MessageStatusArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
  }



  /**
   * Model Log
   */


  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    fecha: string | null
    fechaV2: Date | null
    proceso: string | null
    comentario: string | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    fecha: string | null
    fechaV2: Date | null
    proceso: string | null
    comentario: string | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    fecha: number
    fechaV2: number
    proceso: number
    comentario: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    fecha?: true
    fechaV2?: true
    proceso?: true
    comentario?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    fecha?: true
    fechaV2?: true
    proceso?: true
    comentario?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    fecha?: true
    fechaV2?: true
    proceso?: true
    comentario?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: Enumerable<LogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: Enumerable<LogOrderByWithAggregationInput>
    by: LogScalarFieldEnum[]
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }


  export type LogGroupByOutputType = {
    id: number
    fecha: string
    fechaV2: Date
    proceso: string
    comentario: string
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    fechaV2?: boolean
    proceso?: boolean
    comentario?: boolean
  }, ExtArgs["result"]["log"]>

  export type LogSelectScalar = {
    id?: boolean
    fecha?: boolean
    fechaV2?: boolean
    proceso?: boolean
    comentario?: boolean
  }


  type LogGetPayload<S extends boolean | null | undefined | LogArgs> = $Types.GetResult<LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LogFindManyArgs, 'select' | 'include'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LogFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Log'> extends True ? Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Log that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LogFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Log'> extends True ? Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Log that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<LogPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
    **/
    create<T extends LogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LogCreateArgs<ExtArgs>>
    ): Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Logs.
     *     @param {LogCreateManyArgs} args - Arguments to create many Logs.
     *     @example
     *     // Create many Logs
     *     const log = await prisma.log.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
    **/
    delete<T extends LogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LogDeleteArgs<ExtArgs>>
    ): Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LogUpdateArgs<ExtArgs>>
    ): Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
    **/
    upsert<T extends LogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LogUpsertArgs<ExtArgs>>
    ): Prisma__LogClient<$Types.GetResult<LogPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Log base type for findUnique actions
   */
  export type LogFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUnique
   */
  export interface LogFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LogFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }


  /**
   * Log base type for findFirst actions
   */
  export type LogFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: Enumerable<LogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: Enumerable<LogScalarFieldEnum>
  }

  /**
   * Log findFirst
   */
  export interface LogFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LogFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: Enumerable<LogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: Enumerable<LogScalarFieldEnum>
  }


  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: Enumerable<LogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: Enumerable<LogScalarFieldEnum>
  }


  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }


  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: Enumerable<LogCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }


  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
  }


  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }


  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }


  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
  }


  /**
   * Log without action
   */
  export type LogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
  }



  /**
   * Model Contact
   */


  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type ContactSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type ContactMinAggregateOutputType = {
    id: number | null
    authorId: number | null
    photoUrl: string | null
    name: string | null
    fatherLastName: string | null
    motherLastName: string | null
    relation: string | null
    email: string | null
    typeContact: string | null
    phoneNumber: string | null
    phoneNumberCountry: string | null
    birthDate: string | null
    birthDateV2: Date | null
    notes: string | null
    trusted: boolean | null
    hidden: boolean | null
  }

  export type ContactMaxAggregateOutputType = {
    id: number | null
    authorId: number | null
    photoUrl: string | null
    name: string | null
    fatherLastName: string | null
    motherLastName: string | null
    relation: string | null
    email: string | null
    typeContact: string | null
    phoneNumber: string | null
    phoneNumberCountry: string | null
    birthDate: string | null
    birthDateV2: Date | null
    notes: string | null
    trusted: boolean | null
    hidden: boolean | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    authorId: number
    photoUrl: number
    name: number
    fatherLastName: number
    motherLastName: number
    relation: number
    email: number
    typeContact: number
    phoneNumber: number
    phoneNumberCountry: number
    birthDate: number
    birthDateV2: number
    notes: number
    trusted: number
    hidden: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type ContactSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type ContactMinAggregateInputType = {
    id?: true
    authorId?: true
    photoUrl?: true
    name?: true
    fatherLastName?: true
    motherLastName?: true
    relation?: true
    email?: true
    typeContact?: true
    phoneNumber?: true
    phoneNumberCountry?: true
    birthDate?: true
    birthDateV2?: true
    notes?: true
    trusted?: true
    hidden?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    authorId?: true
    photoUrl?: true
    name?: true
    fatherLastName?: true
    motherLastName?: true
    relation?: true
    email?: true
    typeContact?: true
    phoneNumber?: true
    phoneNumberCountry?: true
    birthDate?: true
    birthDateV2?: true
    notes?: true
    trusted?: true
    hidden?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    authorId?: true
    photoUrl?: true
    name?: true
    fatherLastName?: true
    motherLastName?: true
    relation?: true
    email?: true
    typeContact?: true
    phoneNumber?: true
    phoneNumberCountry?: true
    birthDate?: true
    birthDateV2?: true
    notes?: true
    trusted?: true
    hidden?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: Enumerable<ContactOrderByWithAggregationInput>
    by: ContactScalarFieldEnum[]
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _avg?: ContactAvgAggregateInputType
    _sum?: ContactSumAggregateInputType
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }


  export type ContactGroupByOutputType = {
    id: number
    authorId: number
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2: Date
    notes: string
    trusted: boolean
    hidden: boolean
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    photoUrl?: boolean
    name?: boolean
    fatherLastName?: boolean
    motherLastName?: boolean
    relation?: boolean
    email?: boolean
    typeContact?: boolean
    phoneNumber?: boolean
    phoneNumberCountry?: boolean
    birthDate?: boolean
    birthDateV2?: boolean
    notes?: boolean
    trusted?: boolean
    hidden?: boolean
    author?: boolean | UserArgs<ExtArgs>
    Message?: boolean | Contact$MessageArgs<ExtArgs>
    MessageStatus?: boolean | Contact$MessageStatusArgs<ExtArgs>
    _count?: boolean | ContactCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    authorId?: boolean
    photoUrl?: boolean
    name?: boolean
    fatherLastName?: boolean
    motherLastName?: boolean
    relation?: boolean
    email?: boolean
    typeContact?: boolean
    phoneNumber?: boolean
    phoneNumberCountry?: boolean
    birthDate?: boolean
    birthDateV2?: boolean
    notes?: boolean
    trusted?: boolean
    hidden?: boolean
  }

  export type ContactInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    author?: boolean | UserArgs<ExtArgs>
    Message?: boolean | Contact$MessageArgs<ExtArgs>
    MessageStatus?: boolean | Contact$MessageStatusArgs<ExtArgs>
    _count?: boolean | ContactCountOutputTypeArgs<ExtArgs>
  }


  type ContactGetPayload<S extends boolean | null | undefined | ContactArgs> = $Types.GetResult<ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ContactFindManyArgs, 'select' | 'include'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Contact'> extends True ? Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Contact that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Contact'> extends True ? Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Contact that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ContactPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
    **/
    create<T extends ContactCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactCreateArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Contacts.
     *     @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     *     @example
     *     // Create many Contacts
     *     const contact = await prisma.contact.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContactCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
    **/
    delete<T extends ContactDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
    **/
    upsert<T extends ContactUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>
    ): Prisma__ContactClient<$Types.GetResult<ContactPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    author<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Message<T extends Contact$MessageArgs<ExtArgs> = {}>(args?: Subset<T, Contact$MessageArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    MessageStatus<T extends Contact$MessageStatusArgs<ExtArgs> = {}>(args?: Subset<T, Contact$MessageStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MessageStatusPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Contact base type for findUnique actions
   */
  export type ContactFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUnique
   */
  export interface ContactFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContactFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact base type for findFirst actions
   */
  export type ContactFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: Enumerable<ContactScalarFieldEnum>
  }

  /**
   * Contact findFirst
   */
  export interface ContactFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ContactFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: Enumerable<ContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }


  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: Enumerable<ContactCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
  }


  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }


  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }


  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
  }


  /**
   * Contact.Message
   */
  export type Contact$MessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Contact.MessageStatus
   */
  export type Contact$MessageStatusArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageStatus
     */
    select?: MessageStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageStatusInclude<ExtArgs> | null
    where?: MessageStatusWhereInput
    orderBy?: Enumerable<MessageStatusOrderByWithRelationInput>
    cursor?: MessageStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageStatusScalarFieldEnum>
  }


  /**
   * Contact without action
   */
  export type ContactArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ContactInclude<ExtArgs> | null
  }



  /**
   * Model WishesMessages
   */


  export type AggregateWishesMessages = {
    _count: WishesMessagesCountAggregateOutputType | null
    _avg: WishesMessagesAvgAggregateOutputType | null
    _sum: WishesMessagesSumAggregateOutputType | null
    _min: WishesMessagesMinAggregateOutputType | null
    _max: WishesMessagesMaxAggregateOutputType | null
  }

  export type WishesMessagesAvgAggregateOutputType = {
    id: number | null
  }

  export type WishesMessagesSumAggregateOutputType = {
    id: number | null
  }

  export type WishesMessagesMinAggregateOutputType = {
    id: number | null
    authorAcc: string | null
    createDate: Date | null
    status: string | null
    url: string | null
    identifier: string | null
    encelopeId: string | null
  }

  export type WishesMessagesMaxAggregateOutputType = {
    id: number | null
    authorAcc: string | null
    createDate: Date | null
    status: string | null
    url: string | null
    identifier: string | null
    encelopeId: string | null
  }

  export type WishesMessagesCountAggregateOutputType = {
    id: number
    authorAcc: number
    createDate: number
    status: number
    url: number
    identifier: number
    encelopeId: number
    _all: number
  }


  export type WishesMessagesAvgAggregateInputType = {
    id?: true
  }

  export type WishesMessagesSumAggregateInputType = {
    id?: true
  }

  export type WishesMessagesMinAggregateInputType = {
    id?: true
    authorAcc?: true
    createDate?: true
    status?: true
    url?: true
    identifier?: true
    encelopeId?: true
  }

  export type WishesMessagesMaxAggregateInputType = {
    id?: true
    authorAcc?: true
    createDate?: true
    status?: true
    url?: true
    identifier?: true
    encelopeId?: true
  }

  export type WishesMessagesCountAggregateInputType = {
    id?: true
    authorAcc?: true
    createDate?: true
    status?: true
    url?: true
    identifier?: true
    encelopeId?: true
    _all?: true
  }

  export type WishesMessagesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WishesMessages to aggregate.
     */
    where?: WishesMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WishesMessages to fetch.
     */
    orderBy?: Enumerable<WishesMessagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WishesMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WishesMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WishesMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WishesMessages
    **/
    _count?: true | WishesMessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WishesMessagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WishesMessagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WishesMessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WishesMessagesMaxAggregateInputType
  }

  export type GetWishesMessagesAggregateType<T extends WishesMessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateWishesMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWishesMessages[P]>
      : GetScalarType<T[P], AggregateWishesMessages[P]>
  }




  export type WishesMessagesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WishesMessagesWhereInput
    orderBy?: Enumerable<WishesMessagesOrderByWithAggregationInput>
    by: WishesMessagesScalarFieldEnum[]
    having?: WishesMessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WishesMessagesCountAggregateInputType | true
    _avg?: WishesMessagesAvgAggregateInputType
    _sum?: WishesMessagesSumAggregateInputType
    _min?: WishesMessagesMinAggregateInputType
    _max?: WishesMessagesMaxAggregateInputType
  }


  export type WishesMessagesGroupByOutputType = {
    id: number
    authorAcc: string
    createDate: Date
    status: string
    url: string
    identifier: string
    encelopeId: string
    _count: WishesMessagesCountAggregateOutputType | null
    _avg: WishesMessagesAvgAggregateOutputType | null
    _sum: WishesMessagesSumAggregateOutputType | null
    _min: WishesMessagesMinAggregateOutputType | null
    _max: WishesMessagesMaxAggregateOutputType | null
  }

  type GetWishesMessagesGroupByPayload<T extends WishesMessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WishesMessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WishesMessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WishesMessagesGroupByOutputType[P]>
            : GetScalarType<T[P], WishesMessagesGroupByOutputType[P]>
        }
      >
    >


  export type WishesMessagesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorAcc?: boolean
    createDate?: boolean
    status?: boolean
    url?: boolean
    identifier?: boolean
    encelopeId?: boolean
  }, ExtArgs["result"]["wishesMessages"]>

  export type WishesMessagesSelectScalar = {
    id?: boolean
    authorAcc?: boolean
    createDate?: boolean
    status?: boolean
    url?: boolean
    identifier?: boolean
    encelopeId?: boolean
  }


  type WishesMessagesGetPayload<S extends boolean | null | undefined | WishesMessagesArgs> = $Types.GetResult<WishesMessagesPayload, S>

  type WishesMessagesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<WishesMessagesFindManyArgs, 'select' | 'include'> & {
      select?: WishesMessagesCountAggregateInputType | true
    }

  export interface WishesMessagesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WishesMessages'], meta: { name: 'WishesMessages' } }
    /**
     * Find zero or one WishesMessages that matches the filter.
     * @param {WishesMessagesFindUniqueArgs} args - Arguments to find a WishesMessages
     * @example
     * // Get one WishesMessages
     * const wishesMessages = await prisma.wishesMessages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WishesMessagesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WishesMessagesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WishesMessages'> extends True ? Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one WishesMessages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WishesMessagesFindUniqueOrThrowArgs} args - Arguments to find a WishesMessages
     * @example
     * // Get one WishesMessages
     * const wishesMessages = await prisma.wishesMessages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WishesMessagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WishesMessagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first WishesMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishesMessagesFindFirstArgs} args - Arguments to find a WishesMessages
     * @example
     * // Get one WishesMessages
     * const wishesMessages = await prisma.wishesMessages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WishesMessagesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WishesMessagesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WishesMessages'> extends True ? Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first WishesMessages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishesMessagesFindFirstOrThrowArgs} args - Arguments to find a WishesMessages
     * @example
     * // Get one WishesMessages
     * const wishesMessages = await prisma.wishesMessages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WishesMessagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WishesMessagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more WishesMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishesMessagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WishesMessages
     * const wishesMessages = await prisma.wishesMessages.findMany()
     * 
     * // Get first 10 WishesMessages
     * const wishesMessages = await prisma.wishesMessages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wishesMessagesWithIdOnly = await prisma.wishesMessages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WishesMessagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WishesMessagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a WishesMessages.
     * @param {WishesMessagesCreateArgs} args - Arguments to create a WishesMessages.
     * @example
     * // Create one WishesMessages
     * const WishesMessages = await prisma.wishesMessages.create({
     *   data: {
     *     // ... data to create a WishesMessages
     *   }
     * })
     * 
    **/
    create<T extends WishesMessagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WishesMessagesCreateArgs<ExtArgs>>
    ): Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many WishesMessages.
     *     @param {WishesMessagesCreateManyArgs} args - Arguments to create many WishesMessages.
     *     @example
     *     // Create many WishesMessages
     *     const wishesMessages = await prisma.wishesMessages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WishesMessagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WishesMessagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WishesMessages.
     * @param {WishesMessagesDeleteArgs} args - Arguments to delete one WishesMessages.
     * @example
     * // Delete one WishesMessages
     * const WishesMessages = await prisma.wishesMessages.delete({
     *   where: {
     *     // ... filter to delete one WishesMessages
     *   }
     * })
     * 
    **/
    delete<T extends WishesMessagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WishesMessagesDeleteArgs<ExtArgs>>
    ): Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one WishesMessages.
     * @param {WishesMessagesUpdateArgs} args - Arguments to update one WishesMessages.
     * @example
     * // Update one WishesMessages
     * const wishesMessages = await prisma.wishesMessages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WishesMessagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WishesMessagesUpdateArgs<ExtArgs>>
    ): Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more WishesMessages.
     * @param {WishesMessagesDeleteManyArgs} args - Arguments to filter WishesMessages to delete.
     * @example
     * // Delete a few WishesMessages
     * const { count } = await prisma.wishesMessages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WishesMessagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WishesMessagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WishesMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishesMessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WishesMessages
     * const wishesMessages = await prisma.wishesMessages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WishesMessagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WishesMessagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WishesMessages.
     * @param {WishesMessagesUpsertArgs} args - Arguments to update or create a WishesMessages.
     * @example
     * // Update or create a WishesMessages
     * const wishesMessages = await prisma.wishesMessages.upsert({
     *   create: {
     *     // ... data to create a WishesMessages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WishesMessages we want to update
     *   }
     * })
    **/
    upsert<T extends WishesMessagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WishesMessagesUpsertArgs<ExtArgs>>
    ): Prisma__WishesMessagesClient<$Types.GetResult<WishesMessagesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of WishesMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishesMessagesCountArgs} args - Arguments to filter WishesMessages to count.
     * @example
     * // Count the number of WishesMessages
     * const count = await prisma.wishesMessages.count({
     *   where: {
     *     // ... the filter for the WishesMessages we want to count
     *   }
     * })
    **/
    count<T extends WishesMessagesCountArgs>(
      args?: Subset<T, WishesMessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WishesMessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WishesMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishesMessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WishesMessagesAggregateArgs>(args: Subset<T, WishesMessagesAggregateArgs>): Prisma.PrismaPromise<GetWishesMessagesAggregateType<T>>

    /**
     * Group by WishesMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishesMessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WishesMessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WishesMessagesGroupByArgs['orderBy'] }
        : { orderBy?: WishesMessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WishesMessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishesMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WishesMessages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WishesMessagesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WishesMessages base type for findUnique actions
   */
  export type WishesMessagesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * Filter, which WishesMessages to fetch.
     */
    where: WishesMessagesWhereUniqueInput
  }

  /**
   * WishesMessages findUnique
   */
  export interface WishesMessagesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WishesMessagesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WishesMessages findUniqueOrThrow
   */
  export type WishesMessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * Filter, which WishesMessages to fetch.
     */
    where: WishesMessagesWhereUniqueInput
  }


  /**
   * WishesMessages base type for findFirst actions
   */
  export type WishesMessagesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * Filter, which WishesMessages to fetch.
     */
    where?: WishesMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WishesMessages to fetch.
     */
    orderBy?: Enumerable<WishesMessagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WishesMessages.
     */
    cursor?: WishesMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WishesMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WishesMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WishesMessages.
     */
    distinct?: Enumerable<WishesMessagesScalarFieldEnum>
  }

  /**
   * WishesMessages findFirst
   */
  export interface WishesMessagesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WishesMessagesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WishesMessages findFirstOrThrow
   */
  export type WishesMessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * Filter, which WishesMessages to fetch.
     */
    where?: WishesMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WishesMessages to fetch.
     */
    orderBy?: Enumerable<WishesMessagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WishesMessages.
     */
    cursor?: WishesMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WishesMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WishesMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WishesMessages.
     */
    distinct?: Enumerable<WishesMessagesScalarFieldEnum>
  }


  /**
   * WishesMessages findMany
   */
  export type WishesMessagesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * Filter, which WishesMessages to fetch.
     */
    where?: WishesMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WishesMessages to fetch.
     */
    orderBy?: Enumerable<WishesMessagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WishesMessages.
     */
    cursor?: WishesMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WishesMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WishesMessages.
     */
    skip?: number
    distinct?: Enumerable<WishesMessagesScalarFieldEnum>
  }


  /**
   * WishesMessages create
   */
  export type WishesMessagesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * The data needed to create a WishesMessages.
     */
    data: XOR<WishesMessagesCreateInput, WishesMessagesUncheckedCreateInput>
  }


  /**
   * WishesMessages createMany
   */
  export type WishesMessagesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WishesMessages.
     */
    data: Enumerable<WishesMessagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WishesMessages update
   */
  export type WishesMessagesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * The data needed to update a WishesMessages.
     */
    data: XOR<WishesMessagesUpdateInput, WishesMessagesUncheckedUpdateInput>
    /**
     * Choose, which WishesMessages to update.
     */
    where: WishesMessagesWhereUniqueInput
  }


  /**
   * WishesMessages updateMany
   */
  export type WishesMessagesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WishesMessages.
     */
    data: XOR<WishesMessagesUpdateManyMutationInput, WishesMessagesUncheckedUpdateManyInput>
    /**
     * Filter which WishesMessages to update
     */
    where?: WishesMessagesWhereInput
  }


  /**
   * WishesMessages upsert
   */
  export type WishesMessagesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * The filter to search for the WishesMessages to update in case it exists.
     */
    where: WishesMessagesWhereUniqueInput
    /**
     * In case the WishesMessages found by the `where` argument doesn't exist, create a new WishesMessages with this data.
     */
    create: XOR<WishesMessagesCreateInput, WishesMessagesUncheckedCreateInput>
    /**
     * In case the WishesMessages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WishesMessagesUpdateInput, WishesMessagesUncheckedUpdateInput>
  }


  /**
   * WishesMessages delete
   */
  export type WishesMessagesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
    /**
     * Filter which WishesMessages to delete.
     */
    where: WishesMessagesWhereUniqueInput
  }


  /**
   * WishesMessages deleteMany
   */
  export type WishesMessagesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WishesMessages to delete
     */
    where?: WishesMessagesWhereInput
  }


  /**
   * WishesMessages without action
   */
  export type WishesMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WishesMessages
     */
    select?: WishesMessagesSelect<ExtArgs> | null
  }



  /**
   * Model Deletions
   */


  export type AggregateDeletions = {
    _count: DeletionsCountAggregateOutputType | null
    _avg: DeletionsAvgAggregateOutputType | null
    _sum: DeletionsSumAggregateOutputType | null
    _min: DeletionsMinAggregateOutputType | null
    _max: DeletionsMaxAggregateOutputType | null
  }

  export type DeletionsAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type DeletionsSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type DeletionsMinAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type DeletionsMaxAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type DeletionsCountAggregateOutputType = {
    id: number
    authorId: number
    _all: number
  }


  export type DeletionsAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type DeletionsSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type DeletionsMinAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type DeletionsMaxAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type DeletionsCountAggregateInputType = {
    id?: true
    authorId?: true
    _all?: true
  }

  export type DeletionsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Deletions to aggregate.
     */
    where?: DeletionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deletions to fetch.
     */
    orderBy?: Enumerable<DeletionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeletionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Deletions
    **/
    _count?: true | DeletionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeletionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeletionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeletionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeletionsMaxAggregateInputType
  }

  export type GetDeletionsAggregateType<T extends DeletionsAggregateArgs> = {
        [P in keyof T & keyof AggregateDeletions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeletions[P]>
      : GetScalarType<T[P], AggregateDeletions[P]>
  }




  export type DeletionsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DeletionsWhereInput
    orderBy?: Enumerable<DeletionsOrderByWithAggregationInput>
    by: DeletionsScalarFieldEnum[]
    having?: DeletionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeletionsCountAggregateInputType | true
    _avg?: DeletionsAvgAggregateInputType
    _sum?: DeletionsSumAggregateInputType
    _min?: DeletionsMinAggregateInputType
    _max?: DeletionsMaxAggregateInputType
  }


  export type DeletionsGroupByOutputType = {
    id: number
    authorId: number
    _count: DeletionsCountAggregateOutputType | null
    _avg: DeletionsAvgAggregateOutputType | null
    _sum: DeletionsSumAggregateOutputType | null
    _min: DeletionsMinAggregateOutputType | null
    _max: DeletionsMaxAggregateOutputType | null
  }

  type GetDeletionsGroupByPayload<T extends DeletionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DeletionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeletionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeletionsGroupByOutputType[P]>
            : GetScalarType<T[P], DeletionsGroupByOutputType[P]>
        }
      >
    >


  export type DeletionsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
  }, ExtArgs["result"]["deletions"]>

  export type DeletionsSelectScalar = {
    id?: boolean
    authorId?: boolean
  }


  type DeletionsGetPayload<S extends boolean | null | undefined | DeletionsArgs> = $Types.GetResult<DeletionsPayload, S>

  type DeletionsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DeletionsFindManyArgs, 'select' | 'include'> & {
      select?: DeletionsCountAggregateInputType | true
    }

  export interface DeletionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Deletions'], meta: { name: 'Deletions' } }
    /**
     * Find zero or one Deletions that matches the filter.
     * @param {DeletionsFindUniqueArgs} args - Arguments to find a Deletions
     * @example
     * // Get one Deletions
     * const deletions = await prisma.deletions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DeletionsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DeletionsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Deletions'> extends True ? Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Deletions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DeletionsFindUniqueOrThrowArgs} args - Arguments to find a Deletions
     * @example
     * // Get one Deletions
     * const deletions = await prisma.deletions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DeletionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DeletionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Deletions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionsFindFirstArgs} args - Arguments to find a Deletions
     * @example
     * // Get one Deletions
     * const deletions = await prisma.deletions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DeletionsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DeletionsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Deletions'> extends True ? Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Deletions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionsFindFirstOrThrowArgs} args - Arguments to find a Deletions
     * @example
     * // Get one Deletions
     * const deletions = await prisma.deletions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DeletionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DeletionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Deletions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deletions
     * const deletions = await prisma.deletions.findMany()
     * 
     * // Get first 10 Deletions
     * const deletions = await prisma.deletions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deletionsWithIdOnly = await prisma.deletions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DeletionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeletionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Deletions.
     * @param {DeletionsCreateArgs} args - Arguments to create a Deletions.
     * @example
     * // Create one Deletions
     * const Deletions = await prisma.deletions.create({
     *   data: {
     *     // ... data to create a Deletions
     *   }
     * })
     * 
    **/
    create<T extends DeletionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DeletionsCreateArgs<ExtArgs>>
    ): Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Deletions.
     *     @param {DeletionsCreateManyArgs} args - Arguments to create many Deletions.
     *     @example
     *     // Create many Deletions
     *     const deletions = await prisma.deletions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DeletionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeletionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Deletions.
     * @param {DeletionsDeleteArgs} args - Arguments to delete one Deletions.
     * @example
     * // Delete one Deletions
     * const Deletions = await prisma.deletions.delete({
     *   where: {
     *     // ... filter to delete one Deletions
     *   }
     * })
     * 
    **/
    delete<T extends DeletionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DeletionsDeleteArgs<ExtArgs>>
    ): Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Deletions.
     * @param {DeletionsUpdateArgs} args - Arguments to update one Deletions.
     * @example
     * // Update one Deletions
     * const deletions = await prisma.deletions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DeletionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DeletionsUpdateArgs<ExtArgs>>
    ): Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Deletions.
     * @param {DeletionsDeleteManyArgs} args - Arguments to filter Deletions to delete.
     * @example
     * // Delete a few Deletions
     * const { count } = await prisma.deletions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DeletionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DeletionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deletions
     * const deletions = await prisma.deletions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DeletionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DeletionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Deletions.
     * @param {DeletionsUpsertArgs} args - Arguments to update or create a Deletions.
     * @example
     * // Update or create a Deletions
     * const deletions = await prisma.deletions.upsert({
     *   create: {
     *     // ... data to create a Deletions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deletions we want to update
     *   }
     * })
    **/
    upsert<T extends DeletionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DeletionsUpsertArgs<ExtArgs>>
    ): Prisma__DeletionsClient<$Types.GetResult<DeletionsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Deletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionsCountArgs} args - Arguments to filter Deletions to count.
     * @example
     * // Count the number of Deletions
     * const count = await prisma.deletions.count({
     *   where: {
     *     // ... the filter for the Deletions we want to count
     *   }
     * })
    **/
    count<T extends DeletionsCountArgs>(
      args?: Subset<T, DeletionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeletionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeletionsAggregateArgs>(args: Subset<T, DeletionsAggregateArgs>): Prisma.PrismaPromise<GetDeletionsAggregateType<T>>

    /**
     * Group by Deletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeletionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeletionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeletionsGroupByArgs['orderBy'] }
        : { orderBy?: DeletionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeletionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeletionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Deletions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DeletionsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Deletions base type for findUnique actions
   */
  export type DeletionsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * Filter, which Deletions to fetch.
     */
    where: DeletionsWhereUniqueInput
  }

  /**
   * Deletions findUnique
   */
  export interface DeletionsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DeletionsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Deletions findUniqueOrThrow
   */
  export type DeletionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * Filter, which Deletions to fetch.
     */
    where: DeletionsWhereUniqueInput
  }


  /**
   * Deletions base type for findFirst actions
   */
  export type DeletionsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * Filter, which Deletions to fetch.
     */
    where?: DeletionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deletions to fetch.
     */
    orderBy?: Enumerable<DeletionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Deletions.
     */
    cursor?: DeletionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Deletions.
     */
    distinct?: Enumerable<DeletionsScalarFieldEnum>
  }

  /**
   * Deletions findFirst
   */
  export interface DeletionsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DeletionsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Deletions findFirstOrThrow
   */
  export type DeletionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * Filter, which Deletions to fetch.
     */
    where?: DeletionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deletions to fetch.
     */
    orderBy?: Enumerable<DeletionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Deletions.
     */
    cursor?: DeletionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Deletions.
     */
    distinct?: Enumerable<DeletionsScalarFieldEnum>
  }


  /**
   * Deletions findMany
   */
  export type DeletionsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * Filter, which Deletions to fetch.
     */
    where?: DeletionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deletions to fetch.
     */
    orderBy?: Enumerable<DeletionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Deletions.
     */
    cursor?: DeletionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deletions.
     */
    skip?: number
    distinct?: Enumerable<DeletionsScalarFieldEnum>
  }


  /**
   * Deletions create
   */
  export type DeletionsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * The data needed to create a Deletions.
     */
    data: XOR<DeletionsCreateInput, DeletionsUncheckedCreateInput>
  }


  /**
   * Deletions createMany
   */
  export type DeletionsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Deletions.
     */
    data: Enumerable<DeletionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Deletions update
   */
  export type DeletionsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * The data needed to update a Deletions.
     */
    data: XOR<DeletionsUpdateInput, DeletionsUncheckedUpdateInput>
    /**
     * Choose, which Deletions to update.
     */
    where: DeletionsWhereUniqueInput
  }


  /**
   * Deletions updateMany
   */
  export type DeletionsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Deletions.
     */
    data: XOR<DeletionsUpdateManyMutationInput, DeletionsUncheckedUpdateManyInput>
    /**
     * Filter which Deletions to update
     */
    where?: DeletionsWhereInput
  }


  /**
   * Deletions upsert
   */
  export type DeletionsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * The filter to search for the Deletions to update in case it exists.
     */
    where: DeletionsWhereUniqueInput
    /**
     * In case the Deletions found by the `where` argument doesn't exist, create a new Deletions with this data.
     */
    create: XOR<DeletionsCreateInput, DeletionsUncheckedCreateInput>
    /**
     * In case the Deletions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeletionsUpdateInput, DeletionsUncheckedUpdateInput>
  }


  /**
   * Deletions delete
   */
  export type DeletionsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
    /**
     * Filter which Deletions to delete.
     */
    where: DeletionsWhereUniqueInput
  }


  /**
   * Deletions deleteMany
   */
  export type DeletionsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Deletions to delete
     */
    where?: DeletionsWhereInput
  }


  /**
   * Deletions without action
   */
  export type DeletionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deletions
     */
    select?: DeletionsSelect<ExtArgs> | null
  }



  /**
   * Model doubleFactor
   */


  export type AggregateDoubleFactor = {
    _count: DoubleFactorCountAggregateOutputType | null
    _min: DoubleFactorMinAggregateOutputType | null
    _max: DoubleFactorMaxAggregateOutputType | null
  }

  export type DoubleFactorMinAggregateOutputType = {
    id: string | null
    authorId: string | null
    attemptDate: Date | null
    code: string | null
    status: string | null
  }

  export type DoubleFactorMaxAggregateOutputType = {
    id: string | null
    authorId: string | null
    attemptDate: Date | null
    code: string | null
    status: string | null
  }

  export type DoubleFactorCountAggregateOutputType = {
    id: number
    authorId: number
    attemptDate: number
    code: number
    status: number
    _all: number
  }


  export type DoubleFactorMinAggregateInputType = {
    id?: true
    authorId?: true
    attemptDate?: true
    code?: true
    status?: true
  }

  export type DoubleFactorMaxAggregateInputType = {
    id?: true
    authorId?: true
    attemptDate?: true
    code?: true
    status?: true
  }

  export type DoubleFactorCountAggregateInputType = {
    id?: true
    authorId?: true
    attemptDate?: true
    code?: true
    status?: true
    _all?: true
  }

  export type DoubleFactorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which doubleFactor to aggregate.
     */
    where?: doubleFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doubleFactors to fetch.
     */
    orderBy?: Enumerable<doubleFactorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doubleFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doubleFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doubleFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doubleFactors
    **/
    _count?: true | DoubleFactorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoubleFactorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoubleFactorMaxAggregateInputType
  }

  export type GetDoubleFactorAggregateType<T extends DoubleFactorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoubleFactor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoubleFactor[P]>
      : GetScalarType<T[P], AggregateDoubleFactor[P]>
  }




  export type DoubleFactorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: doubleFactorWhereInput
    orderBy?: Enumerable<doubleFactorOrderByWithAggregationInput>
    by: DoubleFactorScalarFieldEnum[]
    having?: doubleFactorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoubleFactorCountAggregateInputType | true
    _min?: DoubleFactorMinAggregateInputType
    _max?: DoubleFactorMaxAggregateInputType
  }


  export type DoubleFactorGroupByOutputType = {
    id: string
    authorId: string
    attemptDate: Date
    code: string
    status: string
    _count: DoubleFactorCountAggregateOutputType | null
    _min: DoubleFactorMinAggregateOutputType | null
    _max: DoubleFactorMaxAggregateOutputType | null
  }

  type GetDoubleFactorGroupByPayload<T extends DoubleFactorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DoubleFactorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoubleFactorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoubleFactorGroupByOutputType[P]>
            : GetScalarType<T[P], DoubleFactorGroupByOutputType[P]>
        }
      >
    >


  export type doubleFactorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    attemptDate?: boolean
    code?: boolean
    status?: boolean
  }, ExtArgs["result"]["doubleFactor"]>

  export type doubleFactorSelectScalar = {
    id?: boolean
    authorId?: boolean
    attemptDate?: boolean
    code?: boolean
    status?: boolean
  }


  type doubleFactorGetPayload<S extends boolean | null | undefined | doubleFactorArgs> = $Types.GetResult<doubleFactorPayload, S>

  type doubleFactorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<doubleFactorFindManyArgs, 'select' | 'include'> & {
      select?: DoubleFactorCountAggregateInputType | true
    }

  export interface doubleFactorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doubleFactor'], meta: { name: 'doubleFactor' } }
    /**
     * Find zero or one DoubleFactor that matches the filter.
     * @param {doubleFactorFindUniqueArgs} args - Arguments to find a DoubleFactor
     * @example
     * // Get one DoubleFactor
     * const doubleFactor = await prisma.doubleFactor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends doubleFactorFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, doubleFactorFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'doubleFactor'> extends True ? Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one DoubleFactor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {doubleFactorFindUniqueOrThrowArgs} args - Arguments to find a DoubleFactor
     * @example
     * // Get one DoubleFactor
     * const doubleFactor = await prisma.doubleFactor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends doubleFactorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, doubleFactorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first DoubleFactor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doubleFactorFindFirstArgs} args - Arguments to find a DoubleFactor
     * @example
     * // Get one DoubleFactor
     * const doubleFactor = await prisma.doubleFactor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends doubleFactorFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, doubleFactorFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'doubleFactor'> extends True ? Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first DoubleFactor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doubleFactorFindFirstOrThrowArgs} args - Arguments to find a DoubleFactor
     * @example
     * // Get one DoubleFactor
     * const doubleFactor = await prisma.doubleFactor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends doubleFactorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, doubleFactorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more DoubleFactors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doubleFactorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoubleFactors
     * const doubleFactors = await prisma.doubleFactor.findMany()
     * 
     * // Get first 10 DoubleFactors
     * const doubleFactors = await prisma.doubleFactor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doubleFactorWithIdOnly = await prisma.doubleFactor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends doubleFactorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doubleFactorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a DoubleFactor.
     * @param {doubleFactorCreateArgs} args - Arguments to create a DoubleFactor.
     * @example
     * // Create one DoubleFactor
     * const DoubleFactor = await prisma.doubleFactor.create({
     *   data: {
     *     // ... data to create a DoubleFactor
     *   }
     * })
     * 
    **/
    create<T extends doubleFactorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, doubleFactorCreateArgs<ExtArgs>>
    ): Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many DoubleFactors.
     *     @param {doubleFactorCreateManyArgs} args - Arguments to create many DoubleFactors.
     *     @example
     *     // Create many DoubleFactors
     *     const doubleFactor = await prisma.doubleFactor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends doubleFactorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doubleFactorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DoubleFactor.
     * @param {doubleFactorDeleteArgs} args - Arguments to delete one DoubleFactor.
     * @example
     * // Delete one DoubleFactor
     * const DoubleFactor = await prisma.doubleFactor.delete({
     *   where: {
     *     // ... filter to delete one DoubleFactor
     *   }
     * })
     * 
    **/
    delete<T extends doubleFactorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, doubleFactorDeleteArgs<ExtArgs>>
    ): Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one DoubleFactor.
     * @param {doubleFactorUpdateArgs} args - Arguments to update one DoubleFactor.
     * @example
     * // Update one DoubleFactor
     * const doubleFactor = await prisma.doubleFactor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends doubleFactorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, doubleFactorUpdateArgs<ExtArgs>>
    ): Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more DoubleFactors.
     * @param {doubleFactorDeleteManyArgs} args - Arguments to filter DoubleFactors to delete.
     * @example
     * // Delete a few DoubleFactors
     * const { count } = await prisma.doubleFactor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends doubleFactorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doubleFactorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoubleFactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doubleFactorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoubleFactors
     * const doubleFactor = await prisma.doubleFactor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends doubleFactorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, doubleFactorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DoubleFactor.
     * @param {doubleFactorUpsertArgs} args - Arguments to update or create a DoubleFactor.
     * @example
     * // Update or create a DoubleFactor
     * const doubleFactor = await prisma.doubleFactor.upsert({
     *   create: {
     *     // ... data to create a DoubleFactor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoubleFactor we want to update
     *   }
     * })
    **/
    upsert<T extends doubleFactorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, doubleFactorUpsertArgs<ExtArgs>>
    ): Prisma__doubleFactorClient<$Types.GetResult<doubleFactorPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of DoubleFactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doubleFactorCountArgs} args - Arguments to filter DoubleFactors to count.
     * @example
     * // Count the number of DoubleFactors
     * const count = await prisma.doubleFactor.count({
     *   where: {
     *     // ... the filter for the DoubleFactors we want to count
     *   }
     * })
    **/
    count<T extends doubleFactorCountArgs>(
      args?: Subset<T, doubleFactorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoubleFactorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoubleFactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubleFactorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoubleFactorAggregateArgs>(args: Subset<T, DoubleFactorAggregateArgs>): Prisma.PrismaPromise<GetDoubleFactorAggregateType<T>>

    /**
     * Group by DoubleFactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoubleFactorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoubleFactorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoubleFactorGroupByArgs['orderBy'] }
        : { orderBy?: DoubleFactorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoubleFactorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoubleFactorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for doubleFactor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__doubleFactorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * doubleFactor base type for findUnique actions
   */
  export type doubleFactorFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * Filter, which doubleFactor to fetch.
     */
    where: doubleFactorWhereUniqueInput
  }

  /**
   * doubleFactor findUnique
   */
  export interface doubleFactorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends doubleFactorFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * doubleFactor findUniqueOrThrow
   */
  export type doubleFactorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * Filter, which doubleFactor to fetch.
     */
    where: doubleFactorWhereUniqueInput
  }


  /**
   * doubleFactor base type for findFirst actions
   */
  export type doubleFactorFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * Filter, which doubleFactor to fetch.
     */
    where?: doubleFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doubleFactors to fetch.
     */
    orderBy?: Enumerable<doubleFactorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doubleFactors.
     */
    cursor?: doubleFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doubleFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doubleFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doubleFactors.
     */
    distinct?: Enumerable<DoubleFactorScalarFieldEnum>
  }

  /**
   * doubleFactor findFirst
   */
  export interface doubleFactorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends doubleFactorFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * doubleFactor findFirstOrThrow
   */
  export type doubleFactorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * Filter, which doubleFactor to fetch.
     */
    where?: doubleFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doubleFactors to fetch.
     */
    orderBy?: Enumerable<doubleFactorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doubleFactors.
     */
    cursor?: doubleFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doubleFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doubleFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doubleFactors.
     */
    distinct?: Enumerable<DoubleFactorScalarFieldEnum>
  }


  /**
   * doubleFactor findMany
   */
  export type doubleFactorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * Filter, which doubleFactors to fetch.
     */
    where?: doubleFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doubleFactors to fetch.
     */
    orderBy?: Enumerable<doubleFactorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doubleFactors.
     */
    cursor?: doubleFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doubleFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doubleFactors.
     */
    skip?: number
    distinct?: Enumerable<DoubleFactorScalarFieldEnum>
  }


  /**
   * doubleFactor create
   */
  export type doubleFactorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * The data needed to create a doubleFactor.
     */
    data: XOR<doubleFactorCreateInput, doubleFactorUncheckedCreateInput>
  }


  /**
   * doubleFactor createMany
   */
  export type doubleFactorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doubleFactors.
     */
    data: Enumerable<doubleFactorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * doubleFactor update
   */
  export type doubleFactorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * The data needed to update a doubleFactor.
     */
    data: XOR<doubleFactorUpdateInput, doubleFactorUncheckedUpdateInput>
    /**
     * Choose, which doubleFactor to update.
     */
    where: doubleFactorWhereUniqueInput
  }


  /**
   * doubleFactor updateMany
   */
  export type doubleFactorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doubleFactors.
     */
    data: XOR<doubleFactorUpdateManyMutationInput, doubleFactorUncheckedUpdateManyInput>
    /**
     * Filter which doubleFactors to update
     */
    where?: doubleFactorWhereInput
  }


  /**
   * doubleFactor upsert
   */
  export type doubleFactorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * The filter to search for the doubleFactor to update in case it exists.
     */
    where: doubleFactorWhereUniqueInput
    /**
     * In case the doubleFactor found by the `where` argument doesn't exist, create a new doubleFactor with this data.
     */
    create: XOR<doubleFactorCreateInput, doubleFactorUncheckedCreateInput>
    /**
     * In case the doubleFactor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doubleFactorUpdateInput, doubleFactorUncheckedUpdateInput>
  }


  /**
   * doubleFactor delete
   */
  export type doubleFactorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
    /**
     * Filter which doubleFactor to delete.
     */
    where: doubleFactorWhereUniqueInput
  }


  /**
   * doubleFactor deleteMany
   */
  export type doubleFactorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which doubleFactors to delete
     */
    where?: doubleFactorWhereInput
  }


  /**
   * doubleFactor without action
   */
  export type doubleFactorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doubleFactor
     */
    select?: doubleFactorSelect<ExtArgs> | null
  }



  /**
   * Model suscriptionsCatalogue
   */


  export type AggregateSuscriptionsCatalogue = {
    _count: SuscriptionsCatalogueCountAggregateOutputType | null
    _avg: SuscriptionsCatalogueAvgAggregateOutputType | null
    _sum: SuscriptionsCatalogueSumAggregateOutputType | null
    _min: SuscriptionsCatalogueMinAggregateOutputType | null
    _max: SuscriptionsCatalogueMaxAggregateOutputType | null
  }

  export type SuscriptionsCatalogueAvgAggregateOutputType = {
    id: number | null
    planprice: number | null
    allowedNfts: number | null
    storage: number | null
    document: number | null
    whoToInform: number | null
    daysOfGrace: number | null
    daysToExpire: number | null
  }

  export type SuscriptionsCatalogueSumAggregateOutputType = {
    id: number | null
    planprice: number | null
    allowedNfts: number | null
    storage: number | null
    document: number | null
    whoToInform: number | null
    daysOfGrace: number | null
    daysToExpire: number | null
  }

  export type SuscriptionsCatalogueMinAggregateOutputType = {
    id: number | null
    planName: string | null
    planprice: number | null
    allowedNfts: number | null
    storage: number | null
    patrimonial: boolean | null
    funeralWill: boolean | null
    remains: boolean | null
    organs: boolean | null
    health: boolean | null
    dependants: boolean | null
    pets: boolean | null
    accounts: boolean | null
    vault: boolean | null
    familyHub: boolean | null
    support: boolean | null
    document: number | null
    whoToInform: number | null
    daysOfGrace: number | null
    daysToExpire: number | null
    status: string | null
  }

  export type SuscriptionsCatalogueMaxAggregateOutputType = {
    id: number | null
    planName: string | null
    planprice: number | null
    allowedNfts: number | null
    storage: number | null
    patrimonial: boolean | null
    funeralWill: boolean | null
    remains: boolean | null
    organs: boolean | null
    health: boolean | null
    dependants: boolean | null
    pets: boolean | null
    accounts: boolean | null
    vault: boolean | null
    familyHub: boolean | null
    support: boolean | null
    document: number | null
    whoToInform: number | null
    daysOfGrace: number | null
    daysToExpire: number | null
    status: string | null
  }

  export type SuscriptionsCatalogueCountAggregateOutputType = {
    id: number
    planName: number
    planprice: number
    allowedNfts: number
    storage: number
    patrimonial: number
    funeralWill: number
    remains: number
    organs: number
    health: number
    dependants: number
    pets: number
    accounts: number
    vault: number
    familyHub: number
    support: number
    document: number
    whoToInform: number
    daysOfGrace: number
    daysToExpire: number
    status: number
    _all: number
  }


  export type SuscriptionsCatalogueAvgAggregateInputType = {
    id?: true
    planprice?: true
    allowedNfts?: true
    storage?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
  }

  export type SuscriptionsCatalogueSumAggregateInputType = {
    id?: true
    planprice?: true
    allowedNfts?: true
    storage?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
  }

  export type SuscriptionsCatalogueMinAggregateInputType = {
    id?: true
    planName?: true
    planprice?: true
    allowedNfts?: true
    storage?: true
    patrimonial?: true
    funeralWill?: true
    remains?: true
    organs?: true
    health?: true
    dependants?: true
    pets?: true
    accounts?: true
    vault?: true
    familyHub?: true
    support?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
    status?: true
  }

  export type SuscriptionsCatalogueMaxAggregateInputType = {
    id?: true
    planName?: true
    planprice?: true
    allowedNfts?: true
    storage?: true
    patrimonial?: true
    funeralWill?: true
    remains?: true
    organs?: true
    health?: true
    dependants?: true
    pets?: true
    accounts?: true
    vault?: true
    familyHub?: true
    support?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
    status?: true
  }

  export type SuscriptionsCatalogueCountAggregateInputType = {
    id?: true
    planName?: true
    planprice?: true
    allowedNfts?: true
    storage?: true
    patrimonial?: true
    funeralWill?: true
    remains?: true
    organs?: true
    health?: true
    dependants?: true
    pets?: true
    accounts?: true
    vault?: true
    familyHub?: true
    support?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
    status?: true
    _all?: true
  }

  export type SuscriptionsCatalogueAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which suscriptionsCatalogue to aggregate.
     */
    where?: suscriptionsCatalogueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suscriptionsCatalogues to fetch.
     */
    orderBy?: Enumerable<suscriptionsCatalogueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: suscriptionsCatalogueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suscriptionsCatalogues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suscriptionsCatalogues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned suscriptionsCatalogues
    **/
    _count?: true | SuscriptionsCatalogueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuscriptionsCatalogueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuscriptionsCatalogueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuscriptionsCatalogueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuscriptionsCatalogueMaxAggregateInputType
  }

  export type GetSuscriptionsCatalogueAggregateType<T extends SuscriptionsCatalogueAggregateArgs> = {
        [P in keyof T & keyof AggregateSuscriptionsCatalogue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuscriptionsCatalogue[P]>
      : GetScalarType<T[P], AggregateSuscriptionsCatalogue[P]>
  }




  export type SuscriptionsCatalogueGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: suscriptionsCatalogueWhereInput
    orderBy?: Enumerable<suscriptionsCatalogueOrderByWithAggregationInput>
    by: SuscriptionsCatalogueScalarFieldEnum[]
    having?: suscriptionsCatalogueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuscriptionsCatalogueCountAggregateInputType | true
    _avg?: SuscriptionsCatalogueAvgAggregateInputType
    _sum?: SuscriptionsCatalogueSumAggregateInputType
    _min?: SuscriptionsCatalogueMinAggregateInputType
    _max?: SuscriptionsCatalogueMaxAggregateInputType
  }


  export type SuscriptionsCatalogueGroupByOutputType = {
    id: number
    planName: string
    planprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document: number
    whoToInform: number
    daysOfGrace: number
    daysToExpire: number
    status: string
    _count: SuscriptionsCatalogueCountAggregateOutputType | null
    _avg: SuscriptionsCatalogueAvgAggregateOutputType | null
    _sum: SuscriptionsCatalogueSumAggregateOutputType | null
    _min: SuscriptionsCatalogueMinAggregateOutputType | null
    _max: SuscriptionsCatalogueMaxAggregateOutputType | null
  }

  type GetSuscriptionsCatalogueGroupByPayload<T extends SuscriptionsCatalogueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SuscriptionsCatalogueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuscriptionsCatalogueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuscriptionsCatalogueGroupByOutputType[P]>
            : GetScalarType<T[P], SuscriptionsCatalogueGroupByOutputType[P]>
        }
      >
    >


  export type suscriptionsCatalogueSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planName?: boolean
    planprice?: boolean
    allowedNfts?: boolean
    storage?: boolean
    patrimonial?: boolean
    funeralWill?: boolean
    remains?: boolean
    organs?: boolean
    health?: boolean
    dependants?: boolean
    pets?: boolean
    accounts?: boolean
    vault?: boolean
    familyHub?: boolean
    support?: boolean
    document?: boolean
    whoToInform?: boolean
    daysOfGrace?: boolean
    daysToExpire?: boolean
    status?: boolean
    usersSuscriptions?: boolean | suscriptionsCatalogue$usersSuscriptionsArgs<ExtArgs>
    _count?: boolean | SuscriptionsCatalogueCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["suscriptionsCatalogue"]>

  export type suscriptionsCatalogueSelectScalar = {
    id?: boolean
    planName?: boolean
    planprice?: boolean
    allowedNfts?: boolean
    storage?: boolean
    patrimonial?: boolean
    funeralWill?: boolean
    remains?: boolean
    organs?: boolean
    health?: boolean
    dependants?: boolean
    pets?: boolean
    accounts?: boolean
    vault?: boolean
    familyHub?: boolean
    support?: boolean
    document?: boolean
    whoToInform?: boolean
    daysOfGrace?: boolean
    daysToExpire?: boolean
    status?: boolean
  }

  export type suscriptionsCatalogueInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    usersSuscriptions?: boolean | suscriptionsCatalogue$usersSuscriptionsArgs<ExtArgs>
    _count?: boolean | SuscriptionsCatalogueCountOutputTypeArgs<ExtArgs>
  }


  type suscriptionsCatalogueGetPayload<S extends boolean | null | undefined | suscriptionsCatalogueArgs> = $Types.GetResult<suscriptionsCataloguePayload, S>

  type suscriptionsCatalogueCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<suscriptionsCatalogueFindManyArgs, 'select' | 'include'> & {
      select?: SuscriptionsCatalogueCountAggregateInputType | true
    }

  export interface suscriptionsCatalogueDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['suscriptionsCatalogue'], meta: { name: 'suscriptionsCatalogue' } }
    /**
     * Find zero or one SuscriptionsCatalogue that matches the filter.
     * @param {suscriptionsCatalogueFindUniqueArgs} args - Arguments to find a SuscriptionsCatalogue
     * @example
     * // Get one SuscriptionsCatalogue
     * const suscriptionsCatalogue = await prisma.suscriptionsCatalogue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends suscriptionsCatalogueFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, suscriptionsCatalogueFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'suscriptionsCatalogue'> extends True ? Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SuscriptionsCatalogue that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {suscriptionsCatalogueFindUniqueOrThrowArgs} args - Arguments to find a SuscriptionsCatalogue
     * @example
     * // Get one SuscriptionsCatalogue
     * const suscriptionsCatalogue = await prisma.suscriptionsCatalogue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends suscriptionsCatalogueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, suscriptionsCatalogueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SuscriptionsCatalogue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suscriptionsCatalogueFindFirstArgs} args - Arguments to find a SuscriptionsCatalogue
     * @example
     * // Get one SuscriptionsCatalogue
     * const suscriptionsCatalogue = await prisma.suscriptionsCatalogue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends suscriptionsCatalogueFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, suscriptionsCatalogueFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'suscriptionsCatalogue'> extends True ? Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SuscriptionsCatalogue that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suscriptionsCatalogueFindFirstOrThrowArgs} args - Arguments to find a SuscriptionsCatalogue
     * @example
     * // Get one SuscriptionsCatalogue
     * const suscriptionsCatalogue = await prisma.suscriptionsCatalogue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends suscriptionsCatalogueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, suscriptionsCatalogueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SuscriptionsCatalogues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suscriptionsCatalogueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuscriptionsCatalogues
     * const suscriptionsCatalogues = await prisma.suscriptionsCatalogue.findMany()
     * 
     * // Get first 10 SuscriptionsCatalogues
     * const suscriptionsCatalogues = await prisma.suscriptionsCatalogue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suscriptionsCatalogueWithIdOnly = await prisma.suscriptionsCatalogue.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends suscriptionsCatalogueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, suscriptionsCatalogueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SuscriptionsCatalogue.
     * @param {suscriptionsCatalogueCreateArgs} args - Arguments to create a SuscriptionsCatalogue.
     * @example
     * // Create one SuscriptionsCatalogue
     * const SuscriptionsCatalogue = await prisma.suscriptionsCatalogue.create({
     *   data: {
     *     // ... data to create a SuscriptionsCatalogue
     *   }
     * })
     * 
    **/
    create<T extends suscriptionsCatalogueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, suscriptionsCatalogueCreateArgs<ExtArgs>>
    ): Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SuscriptionsCatalogues.
     *     @param {suscriptionsCatalogueCreateManyArgs} args - Arguments to create many SuscriptionsCatalogues.
     *     @example
     *     // Create many SuscriptionsCatalogues
     *     const suscriptionsCatalogue = await prisma.suscriptionsCatalogue.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends suscriptionsCatalogueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, suscriptionsCatalogueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SuscriptionsCatalogue.
     * @param {suscriptionsCatalogueDeleteArgs} args - Arguments to delete one SuscriptionsCatalogue.
     * @example
     * // Delete one SuscriptionsCatalogue
     * const SuscriptionsCatalogue = await prisma.suscriptionsCatalogue.delete({
     *   where: {
     *     // ... filter to delete one SuscriptionsCatalogue
     *   }
     * })
     * 
    **/
    delete<T extends suscriptionsCatalogueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, suscriptionsCatalogueDeleteArgs<ExtArgs>>
    ): Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SuscriptionsCatalogue.
     * @param {suscriptionsCatalogueUpdateArgs} args - Arguments to update one SuscriptionsCatalogue.
     * @example
     * // Update one SuscriptionsCatalogue
     * const suscriptionsCatalogue = await prisma.suscriptionsCatalogue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends suscriptionsCatalogueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, suscriptionsCatalogueUpdateArgs<ExtArgs>>
    ): Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SuscriptionsCatalogues.
     * @param {suscriptionsCatalogueDeleteManyArgs} args - Arguments to filter SuscriptionsCatalogues to delete.
     * @example
     * // Delete a few SuscriptionsCatalogues
     * const { count } = await prisma.suscriptionsCatalogue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends suscriptionsCatalogueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, suscriptionsCatalogueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuscriptionsCatalogues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suscriptionsCatalogueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuscriptionsCatalogues
     * const suscriptionsCatalogue = await prisma.suscriptionsCatalogue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends suscriptionsCatalogueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, suscriptionsCatalogueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SuscriptionsCatalogue.
     * @param {suscriptionsCatalogueUpsertArgs} args - Arguments to update or create a SuscriptionsCatalogue.
     * @example
     * // Update or create a SuscriptionsCatalogue
     * const suscriptionsCatalogue = await prisma.suscriptionsCatalogue.upsert({
     *   create: {
     *     // ... data to create a SuscriptionsCatalogue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuscriptionsCatalogue we want to update
     *   }
     * })
    **/
    upsert<T extends suscriptionsCatalogueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, suscriptionsCatalogueUpsertArgs<ExtArgs>>
    ): Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SuscriptionsCatalogues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {suscriptionsCatalogueCountArgs} args - Arguments to filter SuscriptionsCatalogues to count.
     * @example
     * // Count the number of SuscriptionsCatalogues
     * const count = await prisma.suscriptionsCatalogue.count({
     *   where: {
     *     // ... the filter for the SuscriptionsCatalogues we want to count
     *   }
     * })
    **/
    count<T extends suscriptionsCatalogueCountArgs>(
      args?: Subset<T, suscriptionsCatalogueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuscriptionsCatalogueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuscriptionsCatalogue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuscriptionsCatalogueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuscriptionsCatalogueAggregateArgs>(args: Subset<T, SuscriptionsCatalogueAggregateArgs>): Prisma.PrismaPromise<GetSuscriptionsCatalogueAggregateType<T>>

    /**
     * Group by SuscriptionsCatalogue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuscriptionsCatalogueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuscriptionsCatalogueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuscriptionsCatalogueGroupByArgs['orderBy'] }
        : { orderBy?: SuscriptionsCatalogueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuscriptionsCatalogueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuscriptionsCatalogueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for suscriptionsCatalogue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__suscriptionsCatalogueClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    usersSuscriptions<T extends suscriptionsCatalogue$usersSuscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, suscriptionsCatalogue$usersSuscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * suscriptionsCatalogue base type for findUnique actions
   */
  export type suscriptionsCatalogueFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which suscriptionsCatalogue to fetch.
     */
    where: suscriptionsCatalogueWhereUniqueInput
  }

  /**
   * suscriptionsCatalogue findUnique
   */
  export interface suscriptionsCatalogueFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends suscriptionsCatalogueFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * suscriptionsCatalogue findUniqueOrThrow
   */
  export type suscriptionsCatalogueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which suscriptionsCatalogue to fetch.
     */
    where: suscriptionsCatalogueWhereUniqueInput
  }


  /**
   * suscriptionsCatalogue base type for findFirst actions
   */
  export type suscriptionsCatalogueFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which suscriptionsCatalogue to fetch.
     */
    where?: suscriptionsCatalogueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suscriptionsCatalogues to fetch.
     */
    orderBy?: Enumerable<suscriptionsCatalogueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for suscriptionsCatalogues.
     */
    cursor?: suscriptionsCatalogueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suscriptionsCatalogues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suscriptionsCatalogues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of suscriptionsCatalogues.
     */
    distinct?: Enumerable<SuscriptionsCatalogueScalarFieldEnum>
  }

  /**
   * suscriptionsCatalogue findFirst
   */
  export interface suscriptionsCatalogueFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends suscriptionsCatalogueFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * suscriptionsCatalogue findFirstOrThrow
   */
  export type suscriptionsCatalogueFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which suscriptionsCatalogue to fetch.
     */
    where?: suscriptionsCatalogueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suscriptionsCatalogues to fetch.
     */
    orderBy?: Enumerable<suscriptionsCatalogueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for suscriptionsCatalogues.
     */
    cursor?: suscriptionsCatalogueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suscriptionsCatalogues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suscriptionsCatalogues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of suscriptionsCatalogues.
     */
    distinct?: Enumerable<SuscriptionsCatalogueScalarFieldEnum>
  }


  /**
   * suscriptionsCatalogue findMany
   */
  export type suscriptionsCatalogueFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which suscriptionsCatalogues to fetch.
     */
    where?: suscriptionsCatalogueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of suscriptionsCatalogues to fetch.
     */
    orderBy?: Enumerable<suscriptionsCatalogueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing suscriptionsCatalogues.
     */
    cursor?: suscriptionsCatalogueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` suscriptionsCatalogues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` suscriptionsCatalogues.
     */
    skip?: number
    distinct?: Enumerable<SuscriptionsCatalogueScalarFieldEnum>
  }


  /**
   * suscriptionsCatalogue create
   */
  export type suscriptionsCatalogueCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * The data needed to create a suscriptionsCatalogue.
     */
    data: XOR<suscriptionsCatalogueCreateInput, suscriptionsCatalogueUncheckedCreateInput>
  }


  /**
   * suscriptionsCatalogue createMany
   */
  export type suscriptionsCatalogueCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many suscriptionsCatalogues.
     */
    data: Enumerable<suscriptionsCatalogueCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * suscriptionsCatalogue update
   */
  export type suscriptionsCatalogueUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * The data needed to update a suscriptionsCatalogue.
     */
    data: XOR<suscriptionsCatalogueUpdateInput, suscriptionsCatalogueUncheckedUpdateInput>
    /**
     * Choose, which suscriptionsCatalogue to update.
     */
    where: suscriptionsCatalogueWhereUniqueInput
  }


  /**
   * suscriptionsCatalogue updateMany
   */
  export type suscriptionsCatalogueUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update suscriptionsCatalogues.
     */
    data: XOR<suscriptionsCatalogueUpdateManyMutationInput, suscriptionsCatalogueUncheckedUpdateManyInput>
    /**
     * Filter which suscriptionsCatalogues to update
     */
    where?: suscriptionsCatalogueWhereInput
  }


  /**
   * suscriptionsCatalogue upsert
   */
  export type suscriptionsCatalogueUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * The filter to search for the suscriptionsCatalogue to update in case it exists.
     */
    where: suscriptionsCatalogueWhereUniqueInput
    /**
     * In case the suscriptionsCatalogue found by the `where` argument doesn't exist, create a new suscriptionsCatalogue with this data.
     */
    create: XOR<suscriptionsCatalogueCreateInput, suscriptionsCatalogueUncheckedCreateInput>
    /**
     * In case the suscriptionsCatalogue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<suscriptionsCatalogueUpdateInput, suscriptionsCatalogueUncheckedUpdateInput>
  }


  /**
   * suscriptionsCatalogue delete
   */
  export type suscriptionsCatalogueDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
    /**
     * Filter which suscriptionsCatalogue to delete.
     */
    where: suscriptionsCatalogueWhereUniqueInput
  }


  /**
   * suscriptionsCatalogue deleteMany
   */
  export type suscriptionsCatalogueDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which suscriptionsCatalogues to delete
     */
    where?: suscriptionsCatalogueWhereInput
  }


  /**
   * suscriptionsCatalogue.usersSuscriptions
   */
  export type suscriptionsCatalogue$usersSuscriptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    where?: usersSuscriptionsWhereInput
    orderBy?: Enumerable<usersSuscriptionsOrderByWithRelationInput>
    cursor?: usersSuscriptionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersSuscriptionsScalarFieldEnum>
  }


  /**
   * suscriptionsCatalogue without action
   */
  export type suscriptionsCatalogueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the suscriptionsCatalogue
     */
    select?: suscriptionsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: suscriptionsCatalogueInclude<ExtArgs> | null
  }



  /**
   * Model usersSuscriptions
   */


  export type AggregateUsersSuscriptions = {
    _count: UsersSuscriptionsCountAggregateOutputType | null
    _avg: UsersSuscriptionsAvgAggregateOutputType | null
    _sum: UsersSuscriptionsSumAggregateOutputType | null
    _min: UsersSuscriptionsMinAggregateOutputType | null
    _max: UsersSuscriptionsMaxAggregateOutputType | null
  }

  export type UsersSuscriptionsAvgAggregateOutputType = {
    authorId: number | null
    suscriptionType: number | null
    paymentAmount: number | null
  }

  export type UsersSuscriptionsSumAggregateOutputType = {
    authorId: number | null
    suscriptionType: number | null
    paymentAmount: number | null
  }

  export type UsersSuscriptionsMinAggregateOutputType = {
    id: string | null
    authorId: number | null
    suscriptionType: number | null
    suscriptionDate: Date | null
    paymentDate: Date | null
    expireDate: Date | null
    currency: string | null
    status: string | null
    paymentGateway: string | null
    paymentAmount: number | null
  }

  export type UsersSuscriptionsMaxAggregateOutputType = {
    id: string | null
    authorId: number | null
    suscriptionType: number | null
    suscriptionDate: Date | null
    paymentDate: Date | null
    expireDate: Date | null
    currency: string | null
    status: string | null
    paymentGateway: string | null
    paymentAmount: number | null
  }

  export type UsersSuscriptionsCountAggregateOutputType = {
    id: number
    authorId: number
    suscriptionType: number
    suscriptionDate: number
    paymentDate: number
    expireDate: number
    currency: number
    status: number
    paymentGateway: number
    paymentAmount: number
    _all: number
  }


  export type UsersSuscriptionsAvgAggregateInputType = {
    authorId?: true
    suscriptionType?: true
    paymentAmount?: true
  }

  export type UsersSuscriptionsSumAggregateInputType = {
    authorId?: true
    suscriptionType?: true
    paymentAmount?: true
  }

  export type UsersSuscriptionsMinAggregateInputType = {
    id?: true
    authorId?: true
    suscriptionType?: true
    suscriptionDate?: true
    paymentDate?: true
    expireDate?: true
    currency?: true
    status?: true
    paymentGateway?: true
    paymentAmount?: true
  }

  export type UsersSuscriptionsMaxAggregateInputType = {
    id?: true
    authorId?: true
    suscriptionType?: true
    suscriptionDate?: true
    paymentDate?: true
    expireDate?: true
    currency?: true
    status?: true
    paymentGateway?: true
    paymentAmount?: true
  }

  export type UsersSuscriptionsCountAggregateInputType = {
    id?: true
    authorId?: true
    suscriptionType?: true
    suscriptionDate?: true
    paymentDate?: true
    expireDate?: true
    currency?: true
    status?: true
    paymentGateway?: true
    paymentAmount?: true
    _all?: true
  }

  export type UsersSuscriptionsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which usersSuscriptions to aggregate.
     */
    where?: usersSuscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersSuscriptions to fetch.
     */
    orderBy?: Enumerable<usersSuscriptionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersSuscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersSuscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersSuscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usersSuscriptions
    **/
    _count?: true | UsersSuscriptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersSuscriptionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSuscriptionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersSuscriptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersSuscriptionsMaxAggregateInputType
  }

  export type GetUsersSuscriptionsAggregateType<T extends UsersSuscriptionsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersSuscriptions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersSuscriptions[P]>
      : GetScalarType<T[P], AggregateUsersSuscriptions[P]>
  }




  export type UsersSuscriptionsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersSuscriptionsWhereInput
    orderBy?: Enumerable<usersSuscriptionsOrderByWithAggregationInput>
    by: UsersSuscriptionsScalarFieldEnum[]
    having?: usersSuscriptionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersSuscriptionsCountAggregateInputType | true
    _avg?: UsersSuscriptionsAvgAggregateInputType
    _sum?: UsersSuscriptionsSumAggregateInputType
    _min?: UsersSuscriptionsMinAggregateInputType
    _max?: UsersSuscriptionsMaxAggregateInputType
  }


  export type UsersSuscriptionsGroupByOutputType = {
    id: string
    authorId: number
    suscriptionType: number
    suscriptionDate: Date
    paymentDate: Date
    expireDate: Date
    currency: string
    status: string
    paymentGateway: string
    paymentAmount: number
    _count: UsersSuscriptionsCountAggregateOutputType | null
    _avg: UsersSuscriptionsAvgAggregateOutputType | null
    _sum: UsersSuscriptionsSumAggregateOutputType | null
    _min: UsersSuscriptionsMinAggregateOutputType | null
    _max: UsersSuscriptionsMaxAggregateOutputType | null
  }

  type GetUsersSuscriptionsGroupByPayload<T extends UsersSuscriptionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersSuscriptionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersSuscriptionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersSuscriptionsGroupByOutputType[P]>
            : GetScalarType<T[P], UsersSuscriptionsGroupByOutputType[P]>
        }
      >
    >


  export type usersSuscriptionsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    suscriptionType?: boolean
    suscriptionDate?: boolean
    paymentDate?: boolean
    expireDate?: boolean
    currency?: boolean
    status?: boolean
    paymentGateway?: boolean
    paymentAmount?: boolean
    author?: boolean | UserArgs<ExtArgs>
    suscription?: boolean | suscriptionsCatalogueArgs<ExtArgs>
  }, ExtArgs["result"]["usersSuscriptions"]>

  export type usersSuscriptionsSelectScalar = {
    id?: boolean
    authorId?: boolean
    suscriptionType?: boolean
    suscriptionDate?: boolean
    paymentDate?: boolean
    expireDate?: boolean
    currency?: boolean
    status?: boolean
    paymentGateway?: boolean
    paymentAmount?: boolean
  }

  export type usersSuscriptionsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    author?: boolean | UserArgs<ExtArgs>
    suscription?: boolean | suscriptionsCatalogueArgs<ExtArgs>
  }


  type usersSuscriptionsGetPayload<S extends boolean | null | undefined | usersSuscriptionsArgs> = $Types.GetResult<usersSuscriptionsPayload, S>

  type usersSuscriptionsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usersSuscriptionsFindManyArgs, 'select' | 'include'> & {
      select?: UsersSuscriptionsCountAggregateInputType | true
    }

  export interface usersSuscriptionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usersSuscriptions'], meta: { name: 'usersSuscriptions' } }
    /**
     * Find zero or one UsersSuscriptions that matches the filter.
     * @param {usersSuscriptionsFindUniqueArgs} args - Arguments to find a UsersSuscriptions
     * @example
     * // Get one UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersSuscriptionsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersSuscriptionsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'usersSuscriptions'> extends True ? Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UsersSuscriptions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersSuscriptionsFindUniqueOrThrowArgs} args - Arguments to find a UsersSuscriptions
     * @example
     * // Get one UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersSuscriptionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersSuscriptionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UsersSuscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersSuscriptionsFindFirstArgs} args - Arguments to find a UsersSuscriptions
     * @example
     * // Get one UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersSuscriptionsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersSuscriptionsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'usersSuscriptions'> extends True ? Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UsersSuscriptions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersSuscriptionsFindFirstOrThrowArgs} args - Arguments to find a UsersSuscriptions
     * @example
     * // Get one UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersSuscriptionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersSuscriptionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UsersSuscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersSuscriptionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.findMany()
     * 
     * // Get first 10 UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersSuscriptionsWithIdOnly = await prisma.usersSuscriptions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersSuscriptionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersSuscriptionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UsersSuscriptions.
     * @param {usersSuscriptionsCreateArgs} args - Arguments to create a UsersSuscriptions.
     * @example
     * // Create one UsersSuscriptions
     * const UsersSuscriptions = await prisma.usersSuscriptions.create({
     *   data: {
     *     // ... data to create a UsersSuscriptions
     *   }
     * })
     * 
    **/
    create<T extends usersSuscriptionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersSuscriptionsCreateArgs<ExtArgs>>
    ): Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UsersSuscriptions.
     *     @param {usersSuscriptionsCreateManyArgs} args - Arguments to create many UsersSuscriptions.
     *     @example
     *     // Create many UsersSuscriptions
     *     const usersSuscriptions = await prisma.usersSuscriptions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersSuscriptionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersSuscriptionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsersSuscriptions.
     * @param {usersSuscriptionsDeleteArgs} args - Arguments to delete one UsersSuscriptions.
     * @example
     * // Delete one UsersSuscriptions
     * const UsersSuscriptions = await prisma.usersSuscriptions.delete({
     *   where: {
     *     // ... filter to delete one UsersSuscriptions
     *   }
     * })
     * 
    **/
    delete<T extends usersSuscriptionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersSuscriptionsDeleteArgs<ExtArgs>>
    ): Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UsersSuscriptions.
     * @param {usersSuscriptionsUpdateArgs} args - Arguments to update one UsersSuscriptions.
     * @example
     * // Update one UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersSuscriptionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersSuscriptionsUpdateArgs<ExtArgs>>
    ): Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UsersSuscriptions.
     * @param {usersSuscriptionsDeleteManyArgs} args - Arguments to filter UsersSuscriptions to delete.
     * @example
     * // Delete a few UsersSuscriptions
     * const { count } = await prisma.usersSuscriptions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersSuscriptionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersSuscriptionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersSuscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersSuscriptionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersSuscriptionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersSuscriptionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersSuscriptions.
     * @param {usersSuscriptionsUpsertArgs} args - Arguments to update or create a UsersSuscriptions.
     * @example
     * // Update or create a UsersSuscriptions
     * const usersSuscriptions = await prisma.usersSuscriptions.upsert({
     *   create: {
     *     // ... data to create a UsersSuscriptions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersSuscriptions we want to update
     *   }
     * })
    **/
    upsert<T extends usersSuscriptionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersSuscriptionsUpsertArgs<ExtArgs>>
    ): Prisma__usersSuscriptionsClient<$Types.GetResult<usersSuscriptionsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UsersSuscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersSuscriptionsCountArgs} args - Arguments to filter UsersSuscriptions to count.
     * @example
     * // Count the number of UsersSuscriptions
     * const count = await prisma.usersSuscriptions.count({
     *   where: {
     *     // ... the filter for the UsersSuscriptions we want to count
     *   }
     * })
    **/
    count<T extends usersSuscriptionsCountArgs>(
      args?: Subset<T, usersSuscriptionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersSuscriptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersSuscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersSuscriptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersSuscriptionsAggregateArgs>(args: Subset<T, UsersSuscriptionsAggregateArgs>): Prisma.PrismaPromise<GetUsersSuscriptionsAggregateType<T>>

    /**
     * Group by UsersSuscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersSuscriptionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersSuscriptionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersSuscriptionsGroupByArgs['orderBy'] }
        : { orderBy?: UsersSuscriptionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersSuscriptionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersSuscriptionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for usersSuscriptions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersSuscriptionsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    author<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    suscription<T extends suscriptionsCatalogueArgs<ExtArgs> = {}>(args?: Subset<T, suscriptionsCatalogueArgs<ExtArgs>>): Prisma__suscriptionsCatalogueClient<$Types.GetResult<suscriptionsCataloguePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * usersSuscriptions base type for findUnique actions
   */
  export type usersSuscriptionsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which usersSuscriptions to fetch.
     */
    where: usersSuscriptionsWhereUniqueInput
  }

  /**
   * usersSuscriptions findUnique
   */
  export interface usersSuscriptionsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends usersSuscriptionsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usersSuscriptions findUniqueOrThrow
   */
  export type usersSuscriptionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which usersSuscriptions to fetch.
     */
    where: usersSuscriptionsWhereUniqueInput
  }


  /**
   * usersSuscriptions base type for findFirst actions
   */
  export type usersSuscriptionsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which usersSuscriptions to fetch.
     */
    where?: usersSuscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersSuscriptions to fetch.
     */
    orderBy?: Enumerable<usersSuscriptionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usersSuscriptions.
     */
    cursor?: usersSuscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersSuscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersSuscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usersSuscriptions.
     */
    distinct?: Enumerable<UsersSuscriptionsScalarFieldEnum>
  }

  /**
   * usersSuscriptions findFirst
   */
  export interface usersSuscriptionsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends usersSuscriptionsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usersSuscriptions findFirstOrThrow
   */
  export type usersSuscriptionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which usersSuscriptions to fetch.
     */
    where?: usersSuscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersSuscriptions to fetch.
     */
    orderBy?: Enumerable<usersSuscriptionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usersSuscriptions.
     */
    cursor?: usersSuscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersSuscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersSuscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usersSuscriptions.
     */
    distinct?: Enumerable<UsersSuscriptionsScalarFieldEnum>
  }


  /**
   * usersSuscriptions findMany
   */
  export type usersSuscriptionsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which usersSuscriptions to fetch.
     */
    where?: usersSuscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersSuscriptions to fetch.
     */
    orderBy?: Enumerable<usersSuscriptionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usersSuscriptions.
     */
    cursor?: usersSuscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersSuscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersSuscriptions.
     */
    skip?: number
    distinct?: Enumerable<UsersSuscriptionsScalarFieldEnum>
  }


  /**
   * usersSuscriptions create
   */
  export type usersSuscriptionsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * The data needed to create a usersSuscriptions.
     */
    data: XOR<usersSuscriptionsCreateInput, usersSuscriptionsUncheckedCreateInput>
  }


  /**
   * usersSuscriptions createMany
   */
  export type usersSuscriptionsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usersSuscriptions.
     */
    data: Enumerable<usersSuscriptionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * usersSuscriptions update
   */
  export type usersSuscriptionsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * The data needed to update a usersSuscriptions.
     */
    data: XOR<usersSuscriptionsUpdateInput, usersSuscriptionsUncheckedUpdateInput>
    /**
     * Choose, which usersSuscriptions to update.
     */
    where: usersSuscriptionsWhereUniqueInput
  }


  /**
   * usersSuscriptions updateMany
   */
  export type usersSuscriptionsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usersSuscriptions.
     */
    data: XOR<usersSuscriptionsUpdateManyMutationInput, usersSuscriptionsUncheckedUpdateManyInput>
    /**
     * Filter which usersSuscriptions to update
     */
    where?: usersSuscriptionsWhereInput
  }


  /**
   * usersSuscriptions upsert
   */
  export type usersSuscriptionsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * The filter to search for the usersSuscriptions to update in case it exists.
     */
    where: usersSuscriptionsWhereUniqueInput
    /**
     * In case the usersSuscriptions found by the `where` argument doesn't exist, create a new usersSuscriptions with this data.
     */
    create: XOR<usersSuscriptionsCreateInput, usersSuscriptionsUncheckedCreateInput>
    /**
     * In case the usersSuscriptions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersSuscriptionsUpdateInput, usersSuscriptionsUncheckedUpdateInput>
  }


  /**
   * usersSuscriptions delete
   */
  export type usersSuscriptionsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
    /**
     * Filter which usersSuscriptions to delete.
     */
    where: usersSuscriptionsWhereUniqueInput
  }


  /**
   * usersSuscriptions deleteMany
   */
  export type usersSuscriptionsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which usersSuscriptions to delete
     */
    where?: usersSuscriptionsWhereInput
  }


  /**
   * usersSuscriptions without action
   */
  export type usersSuscriptionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersSuscriptions
     */
    select?: usersSuscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersSuscriptionsInclude<ExtArgs> | null
  }



  /**
   * Model addOnsCatalogue
   */


  export type AggregateAddOnsCatalogue = {
    _count: AddOnsCatalogueCountAggregateOutputType | null
    _avg: AddOnsCatalogueAvgAggregateOutputType | null
    _sum: AddOnsCatalogueSumAggregateOutputType | null
    _min: AddOnsCatalogueMinAggregateOutputType | null
    _max: AddOnsCatalogueMaxAggregateOutputType | null
  }

  export type AddOnsCatalogueAvgAggregateOutputType = {
    id: number | null
    addOnprice: number | null
    allowedNfts: number | null
    storage: number | null
    document: number | null
    whoToInform: number | null
    daysOfGrace: number | null
    daysToExpire: number | null
  }

  export type AddOnsCatalogueSumAggregateOutputType = {
    id: number | null
    addOnprice: number | null
    allowedNfts: number | null
    storage: number | null
    document: number | null
    whoToInform: number | null
    daysOfGrace: number | null
    daysToExpire: number | null
  }

  export type AddOnsCatalogueMinAggregateOutputType = {
    id: number | null
    addOnName: string | null
    addOnprice: number | null
    allowedNfts: number | null
    storage: number | null
    patrimonial: boolean | null
    funeralWill: boolean | null
    remains: boolean | null
    organs: boolean | null
    health: boolean | null
    dependants: boolean | null
    pets: boolean | null
    accounts: boolean | null
    vault: boolean | null
    familyHub: boolean | null
    support: boolean | null
    document: number | null
    whoToInform: number | null
    daysOfGrace: number | null
    daysToExpire: number | null
    status: string | null
  }

  export type AddOnsCatalogueMaxAggregateOutputType = {
    id: number | null
    addOnName: string | null
    addOnprice: number | null
    allowedNfts: number | null
    storage: number | null
    patrimonial: boolean | null
    funeralWill: boolean | null
    remains: boolean | null
    organs: boolean | null
    health: boolean | null
    dependants: boolean | null
    pets: boolean | null
    accounts: boolean | null
    vault: boolean | null
    familyHub: boolean | null
    support: boolean | null
    document: number | null
    whoToInform: number | null
    daysOfGrace: number | null
    daysToExpire: number | null
    status: string | null
  }

  export type AddOnsCatalogueCountAggregateOutputType = {
    id: number
    addOnName: number
    addOnprice: number
    allowedNfts: number
    storage: number
    patrimonial: number
    funeralWill: number
    remains: number
    organs: number
    health: number
    dependants: number
    pets: number
    accounts: number
    vault: number
    familyHub: number
    support: number
    document: number
    whoToInform: number
    daysOfGrace: number
    daysToExpire: number
    status: number
    _all: number
  }


  export type AddOnsCatalogueAvgAggregateInputType = {
    id?: true
    addOnprice?: true
    allowedNfts?: true
    storage?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
  }

  export type AddOnsCatalogueSumAggregateInputType = {
    id?: true
    addOnprice?: true
    allowedNfts?: true
    storage?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
  }

  export type AddOnsCatalogueMinAggregateInputType = {
    id?: true
    addOnName?: true
    addOnprice?: true
    allowedNfts?: true
    storage?: true
    patrimonial?: true
    funeralWill?: true
    remains?: true
    organs?: true
    health?: true
    dependants?: true
    pets?: true
    accounts?: true
    vault?: true
    familyHub?: true
    support?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
    status?: true
  }

  export type AddOnsCatalogueMaxAggregateInputType = {
    id?: true
    addOnName?: true
    addOnprice?: true
    allowedNfts?: true
    storage?: true
    patrimonial?: true
    funeralWill?: true
    remains?: true
    organs?: true
    health?: true
    dependants?: true
    pets?: true
    accounts?: true
    vault?: true
    familyHub?: true
    support?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
    status?: true
  }

  export type AddOnsCatalogueCountAggregateInputType = {
    id?: true
    addOnName?: true
    addOnprice?: true
    allowedNfts?: true
    storage?: true
    patrimonial?: true
    funeralWill?: true
    remains?: true
    organs?: true
    health?: true
    dependants?: true
    pets?: true
    accounts?: true
    vault?: true
    familyHub?: true
    support?: true
    document?: true
    whoToInform?: true
    daysOfGrace?: true
    daysToExpire?: true
    status?: true
    _all?: true
  }

  export type AddOnsCatalogueAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which addOnsCatalogue to aggregate.
     */
    where?: addOnsCatalogueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addOnsCatalogues to fetch.
     */
    orderBy?: Enumerable<addOnsCatalogueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: addOnsCatalogueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addOnsCatalogues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addOnsCatalogues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned addOnsCatalogues
    **/
    _count?: true | AddOnsCatalogueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddOnsCatalogueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddOnsCatalogueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddOnsCatalogueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddOnsCatalogueMaxAggregateInputType
  }

  export type GetAddOnsCatalogueAggregateType<T extends AddOnsCatalogueAggregateArgs> = {
        [P in keyof T & keyof AggregateAddOnsCatalogue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddOnsCatalogue[P]>
      : GetScalarType<T[P], AggregateAddOnsCatalogue[P]>
  }




  export type AddOnsCatalogueGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: addOnsCatalogueWhereInput
    orderBy?: Enumerable<addOnsCatalogueOrderByWithAggregationInput>
    by: AddOnsCatalogueScalarFieldEnum[]
    having?: addOnsCatalogueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddOnsCatalogueCountAggregateInputType | true
    _avg?: AddOnsCatalogueAvgAggregateInputType
    _sum?: AddOnsCatalogueSumAggregateInputType
    _min?: AddOnsCatalogueMinAggregateInputType
    _max?: AddOnsCatalogueMaxAggregateInputType
  }


  export type AddOnsCatalogueGroupByOutputType = {
    id: number
    addOnName: string
    addOnprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document: number
    whoToInform: number
    daysOfGrace: number
    daysToExpire: number
    status: string
    _count: AddOnsCatalogueCountAggregateOutputType | null
    _avg: AddOnsCatalogueAvgAggregateOutputType | null
    _sum: AddOnsCatalogueSumAggregateOutputType | null
    _min: AddOnsCatalogueMinAggregateOutputType | null
    _max: AddOnsCatalogueMaxAggregateOutputType | null
  }

  type GetAddOnsCatalogueGroupByPayload<T extends AddOnsCatalogueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AddOnsCatalogueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddOnsCatalogueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddOnsCatalogueGroupByOutputType[P]>
            : GetScalarType<T[P], AddOnsCatalogueGroupByOutputType[P]>
        }
      >
    >


  export type addOnsCatalogueSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addOnName?: boolean
    addOnprice?: boolean
    allowedNfts?: boolean
    storage?: boolean
    patrimonial?: boolean
    funeralWill?: boolean
    remains?: boolean
    organs?: boolean
    health?: boolean
    dependants?: boolean
    pets?: boolean
    accounts?: boolean
    vault?: boolean
    familyHub?: boolean
    support?: boolean
    document?: boolean
    whoToInform?: boolean
    daysOfGrace?: boolean
    daysToExpire?: boolean
    status?: boolean
    usersAddOns?: boolean | addOnsCatalogue$usersAddOnsArgs<ExtArgs>
    _count?: boolean | AddOnsCatalogueCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["addOnsCatalogue"]>

  export type addOnsCatalogueSelectScalar = {
    id?: boolean
    addOnName?: boolean
    addOnprice?: boolean
    allowedNfts?: boolean
    storage?: boolean
    patrimonial?: boolean
    funeralWill?: boolean
    remains?: boolean
    organs?: boolean
    health?: boolean
    dependants?: boolean
    pets?: boolean
    accounts?: boolean
    vault?: boolean
    familyHub?: boolean
    support?: boolean
    document?: boolean
    whoToInform?: boolean
    daysOfGrace?: boolean
    daysToExpire?: boolean
    status?: boolean
  }

  export type addOnsCatalogueInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    usersAddOns?: boolean | addOnsCatalogue$usersAddOnsArgs<ExtArgs>
    _count?: boolean | AddOnsCatalogueCountOutputTypeArgs<ExtArgs>
  }


  type addOnsCatalogueGetPayload<S extends boolean | null | undefined | addOnsCatalogueArgs> = $Types.GetResult<addOnsCataloguePayload, S>

  type addOnsCatalogueCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<addOnsCatalogueFindManyArgs, 'select' | 'include'> & {
      select?: AddOnsCatalogueCountAggregateInputType | true
    }

  export interface addOnsCatalogueDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['addOnsCatalogue'], meta: { name: 'addOnsCatalogue' } }
    /**
     * Find zero or one AddOnsCatalogue that matches the filter.
     * @param {addOnsCatalogueFindUniqueArgs} args - Arguments to find a AddOnsCatalogue
     * @example
     * // Get one AddOnsCatalogue
     * const addOnsCatalogue = await prisma.addOnsCatalogue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends addOnsCatalogueFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, addOnsCatalogueFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'addOnsCatalogue'> extends True ? Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one AddOnsCatalogue that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {addOnsCatalogueFindUniqueOrThrowArgs} args - Arguments to find a AddOnsCatalogue
     * @example
     * // Get one AddOnsCatalogue
     * const addOnsCatalogue = await prisma.addOnsCatalogue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends addOnsCatalogueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, addOnsCatalogueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first AddOnsCatalogue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addOnsCatalogueFindFirstArgs} args - Arguments to find a AddOnsCatalogue
     * @example
     * // Get one AddOnsCatalogue
     * const addOnsCatalogue = await prisma.addOnsCatalogue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends addOnsCatalogueFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, addOnsCatalogueFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'addOnsCatalogue'> extends True ? Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first AddOnsCatalogue that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addOnsCatalogueFindFirstOrThrowArgs} args - Arguments to find a AddOnsCatalogue
     * @example
     * // Get one AddOnsCatalogue
     * const addOnsCatalogue = await prisma.addOnsCatalogue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends addOnsCatalogueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, addOnsCatalogueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more AddOnsCatalogues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addOnsCatalogueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AddOnsCatalogues
     * const addOnsCatalogues = await prisma.addOnsCatalogue.findMany()
     * 
     * // Get first 10 AddOnsCatalogues
     * const addOnsCatalogues = await prisma.addOnsCatalogue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addOnsCatalogueWithIdOnly = await prisma.addOnsCatalogue.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends addOnsCatalogueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addOnsCatalogueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a AddOnsCatalogue.
     * @param {addOnsCatalogueCreateArgs} args - Arguments to create a AddOnsCatalogue.
     * @example
     * // Create one AddOnsCatalogue
     * const AddOnsCatalogue = await prisma.addOnsCatalogue.create({
     *   data: {
     *     // ... data to create a AddOnsCatalogue
     *   }
     * })
     * 
    **/
    create<T extends addOnsCatalogueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, addOnsCatalogueCreateArgs<ExtArgs>>
    ): Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many AddOnsCatalogues.
     *     @param {addOnsCatalogueCreateManyArgs} args - Arguments to create many AddOnsCatalogues.
     *     @example
     *     // Create many AddOnsCatalogues
     *     const addOnsCatalogue = await prisma.addOnsCatalogue.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends addOnsCatalogueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addOnsCatalogueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AddOnsCatalogue.
     * @param {addOnsCatalogueDeleteArgs} args - Arguments to delete one AddOnsCatalogue.
     * @example
     * // Delete one AddOnsCatalogue
     * const AddOnsCatalogue = await prisma.addOnsCatalogue.delete({
     *   where: {
     *     // ... filter to delete one AddOnsCatalogue
     *   }
     * })
     * 
    **/
    delete<T extends addOnsCatalogueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, addOnsCatalogueDeleteArgs<ExtArgs>>
    ): Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one AddOnsCatalogue.
     * @param {addOnsCatalogueUpdateArgs} args - Arguments to update one AddOnsCatalogue.
     * @example
     * // Update one AddOnsCatalogue
     * const addOnsCatalogue = await prisma.addOnsCatalogue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends addOnsCatalogueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, addOnsCatalogueUpdateArgs<ExtArgs>>
    ): Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more AddOnsCatalogues.
     * @param {addOnsCatalogueDeleteManyArgs} args - Arguments to filter AddOnsCatalogues to delete.
     * @example
     * // Delete a few AddOnsCatalogues
     * const { count } = await prisma.addOnsCatalogue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends addOnsCatalogueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, addOnsCatalogueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AddOnsCatalogues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addOnsCatalogueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AddOnsCatalogues
     * const addOnsCatalogue = await prisma.addOnsCatalogue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends addOnsCatalogueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, addOnsCatalogueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AddOnsCatalogue.
     * @param {addOnsCatalogueUpsertArgs} args - Arguments to update or create a AddOnsCatalogue.
     * @example
     * // Update or create a AddOnsCatalogue
     * const addOnsCatalogue = await prisma.addOnsCatalogue.upsert({
     *   create: {
     *     // ... data to create a AddOnsCatalogue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AddOnsCatalogue we want to update
     *   }
     * })
    **/
    upsert<T extends addOnsCatalogueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, addOnsCatalogueUpsertArgs<ExtArgs>>
    ): Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of AddOnsCatalogues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addOnsCatalogueCountArgs} args - Arguments to filter AddOnsCatalogues to count.
     * @example
     * // Count the number of AddOnsCatalogues
     * const count = await prisma.addOnsCatalogue.count({
     *   where: {
     *     // ... the filter for the AddOnsCatalogues we want to count
     *   }
     * })
    **/
    count<T extends addOnsCatalogueCountArgs>(
      args?: Subset<T, addOnsCatalogueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddOnsCatalogueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AddOnsCatalogue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddOnsCatalogueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddOnsCatalogueAggregateArgs>(args: Subset<T, AddOnsCatalogueAggregateArgs>): Prisma.PrismaPromise<GetAddOnsCatalogueAggregateType<T>>

    /**
     * Group by AddOnsCatalogue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddOnsCatalogueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddOnsCatalogueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddOnsCatalogueGroupByArgs['orderBy'] }
        : { orderBy?: AddOnsCatalogueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddOnsCatalogueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddOnsCatalogueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for addOnsCatalogue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__addOnsCatalogueClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    usersAddOns<T extends addOnsCatalogue$usersAddOnsArgs<ExtArgs> = {}>(args?: Subset<T, addOnsCatalogue$usersAddOnsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * addOnsCatalogue base type for findUnique actions
   */
  export type addOnsCatalogueFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which addOnsCatalogue to fetch.
     */
    where: addOnsCatalogueWhereUniqueInput
  }

  /**
   * addOnsCatalogue findUnique
   */
  export interface addOnsCatalogueFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends addOnsCatalogueFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * addOnsCatalogue findUniqueOrThrow
   */
  export type addOnsCatalogueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which addOnsCatalogue to fetch.
     */
    where: addOnsCatalogueWhereUniqueInput
  }


  /**
   * addOnsCatalogue base type for findFirst actions
   */
  export type addOnsCatalogueFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which addOnsCatalogue to fetch.
     */
    where?: addOnsCatalogueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addOnsCatalogues to fetch.
     */
    orderBy?: Enumerable<addOnsCatalogueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addOnsCatalogues.
     */
    cursor?: addOnsCatalogueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addOnsCatalogues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addOnsCatalogues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addOnsCatalogues.
     */
    distinct?: Enumerable<AddOnsCatalogueScalarFieldEnum>
  }

  /**
   * addOnsCatalogue findFirst
   */
  export interface addOnsCatalogueFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends addOnsCatalogueFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * addOnsCatalogue findFirstOrThrow
   */
  export type addOnsCatalogueFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which addOnsCatalogue to fetch.
     */
    where?: addOnsCatalogueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addOnsCatalogues to fetch.
     */
    orderBy?: Enumerable<addOnsCatalogueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addOnsCatalogues.
     */
    cursor?: addOnsCatalogueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addOnsCatalogues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addOnsCatalogues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addOnsCatalogues.
     */
    distinct?: Enumerable<AddOnsCatalogueScalarFieldEnum>
  }


  /**
   * addOnsCatalogue findMany
   */
  export type addOnsCatalogueFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * Filter, which addOnsCatalogues to fetch.
     */
    where?: addOnsCatalogueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addOnsCatalogues to fetch.
     */
    orderBy?: Enumerable<addOnsCatalogueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing addOnsCatalogues.
     */
    cursor?: addOnsCatalogueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addOnsCatalogues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addOnsCatalogues.
     */
    skip?: number
    distinct?: Enumerable<AddOnsCatalogueScalarFieldEnum>
  }


  /**
   * addOnsCatalogue create
   */
  export type addOnsCatalogueCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * The data needed to create a addOnsCatalogue.
     */
    data: XOR<addOnsCatalogueCreateInput, addOnsCatalogueUncheckedCreateInput>
  }


  /**
   * addOnsCatalogue createMany
   */
  export type addOnsCatalogueCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many addOnsCatalogues.
     */
    data: Enumerable<addOnsCatalogueCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * addOnsCatalogue update
   */
  export type addOnsCatalogueUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * The data needed to update a addOnsCatalogue.
     */
    data: XOR<addOnsCatalogueUpdateInput, addOnsCatalogueUncheckedUpdateInput>
    /**
     * Choose, which addOnsCatalogue to update.
     */
    where: addOnsCatalogueWhereUniqueInput
  }


  /**
   * addOnsCatalogue updateMany
   */
  export type addOnsCatalogueUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update addOnsCatalogues.
     */
    data: XOR<addOnsCatalogueUpdateManyMutationInput, addOnsCatalogueUncheckedUpdateManyInput>
    /**
     * Filter which addOnsCatalogues to update
     */
    where?: addOnsCatalogueWhereInput
  }


  /**
   * addOnsCatalogue upsert
   */
  export type addOnsCatalogueUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * The filter to search for the addOnsCatalogue to update in case it exists.
     */
    where: addOnsCatalogueWhereUniqueInput
    /**
     * In case the addOnsCatalogue found by the `where` argument doesn't exist, create a new addOnsCatalogue with this data.
     */
    create: XOR<addOnsCatalogueCreateInput, addOnsCatalogueUncheckedCreateInput>
    /**
     * In case the addOnsCatalogue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<addOnsCatalogueUpdateInput, addOnsCatalogueUncheckedUpdateInput>
  }


  /**
   * addOnsCatalogue delete
   */
  export type addOnsCatalogueDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
    /**
     * Filter which addOnsCatalogue to delete.
     */
    where: addOnsCatalogueWhereUniqueInput
  }


  /**
   * addOnsCatalogue deleteMany
   */
  export type addOnsCatalogueDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which addOnsCatalogues to delete
     */
    where?: addOnsCatalogueWhereInput
  }


  /**
   * addOnsCatalogue.usersAddOns
   */
  export type addOnsCatalogue$usersAddOnsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    where?: usersAddOnsWhereInput
    orderBy?: Enumerable<usersAddOnsOrderByWithRelationInput>
    cursor?: usersAddOnsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersAddOnsScalarFieldEnum>
  }


  /**
   * addOnsCatalogue without action
   */
  export type addOnsCatalogueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the addOnsCatalogue
     */
    select?: addOnsCatalogueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: addOnsCatalogueInclude<ExtArgs> | null
  }



  /**
   * Model usersAddOns
   */


  export type AggregateUsersAddOns = {
    _count: UsersAddOnsCountAggregateOutputType | null
    _avg: UsersAddOnsAvgAggregateOutputType | null
    _sum: UsersAddOnsSumAggregateOutputType | null
    _min: UsersAddOnsMinAggregateOutputType | null
    _max: UsersAddOnsMaxAggregateOutputType | null
  }

  export type UsersAddOnsAvgAggregateOutputType = {
    authorId: number | null
    addOnType: number | null
    paymentAmount: number | null
  }

  export type UsersAddOnsSumAggregateOutputType = {
    authorId: number | null
    addOnType: number | null
    paymentAmount: number | null
  }

  export type UsersAddOnsMinAggregateOutputType = {
    id: string | null
    authorId: number | null
    addOnType: number | null
    addOnDate: Date | null
    paymentDate: Date | null
    expireDate: Date | null
    currency: string | null
    status: string | null
    paymentGateway: string | null
    paymentAmount: number | null
  }

  export type UsersAddOnsMaxAggregateOutputType = {
    id: string | null
    authorId: number | null
    addOnType: number | null
    addOnDate: Date | null
    paymentDate: Date | null
    expireDate: Date | null
    currency: string | null
    status: string | null
    paymentGateway: string | null
    paymentAmount: number | null
  }

  export type UsersAddOnsCountAggregateOutputType = {
    id: number
    authorId: number
    addOnType: number
    addOnDate: number
    paymentDate: number
    expireDate: number
    currency: number
    status: number
    paymentGateway: number
    paymentAmount: number
    _all: number
  }


  export type UsersAddOnsAvgAggregateInputType = {
    authorId?: true
    addOnType?: true
    paymentAmount?: true
  }

  export type UsersAddOnsSumAggregateInputType = {
    authorId?: true
    addOnType?: true
    paymentAmount?: true
  }

  export type UsersAddOnsMinAggregateInputType = {
    id?: true
    authorId?: true
    addOnType?: true
    addOnDate?: true
    paymentDate?: true
    expireDate?: true
    currency?: true
    status?: true
    paymentGateway?: true
    paymentAmount?: true
  }

  export type UsersAddOnsMaxAggregateInputType = {
    id?: true
    authorId?: true
    addOnType?: true
    addOnDate?: true
    paymentDate?: true
    expireDate?: true
    currency?: true
    status?: true
    paymentGateway?: true
    paymentAmount?: true
  }

  export type UsersAddOnsCountAggregateInputType = {
    id?: true
    authorId?: true
    addOnType?: true
    addOnDate?: true
    paymentDate?: true
    expireDate?: true
    currency?: true
    status?: true
    paymentGateway?: true
    paymentAmount?: true
    _all?: true
  }

  export type UsersAddOnsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which usersAddOns to aggregate.
     */
    where?: usersAddOnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersAddOns to fetch.
     */
    orderBy?: Enumerable<usersAddOnsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersAddOnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersAddOns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersAddOns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usersAddOns
    **/
    _count?: true | UsersAddOnsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAddOnsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersAddOnsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersAddOnsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersAddOnsMaxAggregateInputType
  }

  export type GetUsersAddOnsAggregateType<T extends UsersAddOnsAggregateArgs> = {
        [P in keyof T & keyof AggregateUsersAddOns]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsersAddOns[P]>
      : GetScalarType<T[P], AggregateUsersAddOns[P]>
  }




  export type UsersAddOnsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersAddOnsWhereInput
    orderBy?: Enumerable<usersAddOnsOrderByWithAggregationInput>
    by: UsersAddOnsScalarFieldEnum[]
    having?: usersAddOnsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersAddOnsCountAggregateInputType | true
    _avg?: UsersAddOnsAvgAggregateInputType
    _sum?: UsersAddOnsSumAggregateInputType
    _min?: UsersAddOnsMinAggregateInputType
    _max?: UsersAddOnsMaxAggregateInputType
  }


  export type UsersAddOnsGroupByOutputType = {
    id: string
    authorId: number
    addOnType: number
    addOnDate: Date
    paymentDate: Date
    expireDate: Date
    currency: string
    status: string
    paymentGateway: string
    paymentAmount: number
    _count: UsersAddOnsCountAggregateOutputType | null
    _avg: UsersAddOnsAvgAggregateOutputType | null
    _sum: UsersAddOnsSumAggregateOutputType | null
    _min: UsersAddOnsMinAggregateOutputType | null
    _max: UsersAddOnsMaxAggregateOutputType | null
  }

  type GetUsersAddOnsGroupByPayload<T extends UsersAddOnsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersAddOnsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersAddOnsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersAddOnsGroupByOutputType[P]>
            : GetScalarType<T[P], UsersAddOnsGroupByOutputType[P]>
        }
      >
    >


  export type usersAddOnsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authorId?: boolean
    addOnType?: boolean
    addOnDate?: boolean
    paymentDate?: boolean
    expireDate?: boolean
    currency?: boolean
    status?: boolean
    paymentGateway?: boolean
    paymentAmount?: boolean
    author?: boolean | UserArgs<ExtArgs>
    suscription?: boolean | addOnsCatalogueArgs<ExtArgs>
  }, ExtArgs["result"]["usersAddOns"]>

  export type usersAddOnsSelectScalar = {
    id?: boolean
    authorId?: boolean
    addOnType?: boolean
    addOnDate?: boolean
    paymentDate?: boolean
    expireDate?: boolean
    currency?: boolean
    status?: boolean
    paymentGateway?: boolean
    paymentAmount?: boolean
  }

  export type usersAddOnsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    author?: boolean | UserArgs<ExtArgs>
    suscription?: boolean | addOnsCatalogueArgs<ExtArgs>
  }


  type usersAddOnsGetPayload<S extends boolean | null | undefined | usersAddOnsArgs> = $Types.GetResult<usersAddOnsPayload, S>

  type usersAddOnsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usersAddOnsFindManyArgs, 'select' | 'include'> & {
      select?: UsersAddOnsCountAggregateInputType | true
    }

  export interface usersAddOnsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usersAddOns'], meta: { name: 'usersAddOns' } }
    /**
     * Find zero or one UsersAddOns that matches the filter.
     * @param {usersAddOnsFindUniqueArgs} args - Arguments to find a UsersAddOns
     * @example
     * // Get one UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersAddOnsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersAddOnsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'usersAddOns'> extends True ? Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UsersAddOns that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersAddOnsFindUniqueOrThrowArgs} args - Arguments to find a UsersAddOns
     * @example
     * // Get one UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersAddOnsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersAddOnsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UsersAddOns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersAddOnsFindFirstArgs} args - Arguments to find a UsersAddOns
     * @example
     * // Get one UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersAddOnsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersAddOnsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'usersAddOns'> extends True ? Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UsersAddOns that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersAddOnsFindFirstOrThrowArgs} args - Arguments to find a UsersAddOns
     * @example
     * // Get one UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersAddOnsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersAddOnsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UsersAddOns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersAddOnsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.findMany()
     * 
     * // Get first 10 UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersAddOnsWithIdOnly = await prisma.usersAddOns.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersAddOnsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersAddOnsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UsersAddOns.
     * @param {usersAddOnsCreateArgs} args - Arguments to create a UsersAddOns.
     * @example
     * // Create one UsersAddOns
     * const UsersAddOns = await prisma.usersAddOns.create({
     *   data: {
     *     // ... data to create a UsersAddOns
     *   }
     * })
     * 
    **/
    create<T extends usersAddOnsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersAddOnsCreateArgs<ExtArgs>>
    ): Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UsersAddOns.
     *     @param {usersAddOnsCreateManyArgs} args - Arguments to create many UsersAddOns.
     *     @example
     *     // Create many UsersAddOns
     *     const usersAddOns = await prisma.usersAddOns.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersAddOnsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersAddOnsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsersAddOns.
     * @param {usersAddOnsDeleteArgs} args - Arguments to delete one UsersAddOns.
     * @example
     * // Delete one UsersAddOns
     * const UsersAddOns = await prisma.usersAddOns.delete({
     *   where: {
     *     // ... filter to delete one UsersAddOns
     *   }
     * })
     * 
    **/
    delete<T extends usersAddOnsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersAddOnsDeleteArgs<ExtArgs>>
    ): Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UsersAddOns.
     * @param {usersAddOnsUpdateArgs} args - Arguments to update one UsersAddOns.
     * @example
     * // Update one UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersAddOnsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersAddOnsUpdateArgs<ExtArgs>>
    ): Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UsersAddOns.
     * @param {usersAddOnsDeleteManyArgs} args - Arguments to filter UsersAddOns to delete.
     * @example
     * // Delete a few UsersAddOns
     * const { count } = await prisma.usersAddOns.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersAddOnsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersAddOnsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsersAddOns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersAddOnsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersAddOnsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersAddOnsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsersAddOns.
     * @param {usersAddOnsUpsertArgs} args - Arguments to update or create a UsersAddOns.
     * @example
     * // Update or create a UsersAddOns
     * const usersAddOns = await prisma.usersAddOns.upsert({
     *   create: {
     *     // ... data to create a UsersAddOns
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsersAddOns we want to update
     *   }
     * })
    **/
    upsert<T extends usersAddOnsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersAddOnsUpsertArgs<ExtArgs>>
    ): Prisma__usersAddOnsClient<$Types.GetResult<usersAddOnsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UsersAddOns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersAddOnsCountArgs} args - Arguments to filter UsersAddOns to count.
     * @example
     * // Count the number of UsersAddOns
     * const count = await prisma.usersAddOns.count({
     *   where: {
     *     // ... the filter for the UsersAddOns we want to count
     *   }
     * })
    **/
    count<T extends usersAddOnsCountArgs>(
      args?: Subset<T, usersAddOnsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersAddOnsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsersAddOns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddOnsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAddOnsAggregateArgs>(args: Subset<T, UsersAddOnsAggregateArgs>): Prisma.PrismaPromise<GetUsersAddOnsAggregateType<T>>

    /**
     * Group by UsersAddOns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAddOnsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersAddOnsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersAddOnsGroupByArgs['orderBy'] }
        : { orderBy?: UsersAddOnsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersAddOnsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersAddOnsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for usersAddOns.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersAddOnsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    author<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    suscription<T extends addOnsCatalogueArgs<ExtArgs> = {}>(args?: Subset<T, addOnsCatalogueArgs<ExtArgs>>): Prisma__addOnsCatalogueClient<$Types.GetResult<addOnsCataloguePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * usersAddOns base type for findUnique actions
   */
  export type usersAddOnsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * Filter, which usersAddOns to fetch.
     */
    where: usersAddOnsWhereUniqueInput
  }

  /**
   * usersAddOns findUnique
   */
  export interface usersAddOnsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends usersAddOnsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usersAddOns findUniqueOrThrow
   */
  export type usersAddOnsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * Filter, which usersAddOns to fetch.
     */
    where: usersAddOnsWhereUniqueInput
  }


  /**
   * usersAddOns base type for findFirst actions
   */
  export type usersAddOnsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * Filter, which usersAddOns to fetch.
     */
    where?: usersAddOnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersAddOns to fetch.
     */
    orderBy?: Enumerable<usersAddOnsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usersAddOns.
     */
    cursor?: usersAddOnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersAddOns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersAddOns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usersAddOns.
     */
    distinct?: Enumerable<UsersAddOnsScalarFieldEnum>
  }

  /**
   * usersAddOns findFirst
   */
  export interface usersAddOnsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends usersAddOnsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usersAddOns findFirstOrThrow
   */
  export type usersAddOnsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * Filter, which usersAddOns to fetch.
     */
    where?: usersAddOnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersAddOns to fetch.
     */
    orderBy?: Enumerable<usersAddOnsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usersAddOns.
     */
    cursor?: usersAddOnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersAddOns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersAddOns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usersAddOns.
     */
    distinct?: Enumerable<UsersAddOnsScalarFieldEnum>
  }


  /**
   * usersAddOns findMany
   */
  export type usersAddOnsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * Filter, which usersAddOns to fetch.
     */
    where?: usersAddOnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usersAddOns to fetch.
     */
    orderBy?: Enumerable<usersAddOnsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usersAddOns.
     */
    cursor?: usersAddOnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usersAddOns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usersAddOns.
     */
    skip?: number
    distinct?: Enumerable<UsersAddOnsScalarFieldEnum>
  }


  /**
   * usersAddOns create
   */
  export type usersAddOnsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * The data needed to create a usersAddOns.
     */
    data: XOR<usersAddOnsCreateInput, usersAddOnsUncheckedCreateInput>
  }


  /**
   * usersAddOns createMany
   */
  export type usersAddOnsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usersAddOns.
     */
    data: Enumerable<usersAddOnsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * usersAddOns update
   */
  export type usersAddOnsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * The data needed to update a usersAddOns.
     */
    data: XOR<usersAddOnsUpdateInput, usersAddOnsUncheckedUpdateInput>
    /**
     * Choose, which usersAddOns to update.
     */
    where: usersAddOnsWhereUniqueInput
  }


  /**
   * usersAddOns updateMany
   */
  export type usersAddOnsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usersAddOns.
     */
    data: XOR<usersAddOnsUpdateManyMutationInput, usersAddOnsUncheckedUpdateManyInput>
    /**
     * Filter which usersAddOns to update
     */
    where?: usersAddOnsWhereInput
  }


  /**
   * usersAddOns upsert
   */
  export type usersAddOnsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * The filter to search for the usersAddOns to update in case it exists.
     */
    where: usersAddOnsWhereUniqueInput
    /**
     * In case the usersAddOns found by the `where` argument doesn't exist, create a new usersAddOns with this data.
     */
    create: XOR<usersAddOnsCreateInput, usersAddOnsUncheckedCreateInput>
    /**
     * In case the usersAddOns was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersAddOnsUpdateInput, usersAddOnsUncheckedUpdateInput>
  }


  /**
   * usersAddOns delete
   */
  export type usersAddOnsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
    /**
     * Filter which usersAddOns to delete.
     */
    where: usersAddOnsWhereUniqueInput
  }


  /**
   * usersAddOns deleteMany
   */
  export type usersAddOnsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which usersAddOns to delete
     */
    where?: usersAddOnsWhereInput
  }


  /**
   * usersAddOns without action
   */
  export type usersAddOnsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usersAddOns
     */
    select?: usersAddOnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersAddOnsInclude<ExtArgs> | null
  }



  /**
   * Model referals
   */


  export type AggregateReferals = {
    _count: ReferalsCountAggregateOutputType | null
    _avg: ReferalsAvgAggregateOutputType | null
    _sum: ReferalsSumAggregateOutputType | null
    _min: ReferalsMinAggregateOutputType | null
    _max: ReferalsMaxAggregateOutputType | null
  }

  export type ReferalsAvgAggregateOutputType = {
    suscription: number | null
  }

  export type ReferalsSumAggregateOutputType = {
    suscription: number | null
  }

  export type ReferalsMinAggregateOutputType = {
    id: string | null
    code: string | null
    suscription: number | null
    status: string | null
  }

  export type ReferalsMaxAggregateOutputType = {
    id: string | null
    code: string | null
    suscription: number | null
    status: string | null
  }

  export type ReferalsCountAggregateOutputType = {
    id: number
    code: number
    suscription: number
    status: number
    _all: number
  }


  export type ReferalsAvgAggregateInputType = {
    suscription?: true
  }

  export type ReferalsSumAggregateInputType = {
    suscription?: true
  }

  export type ReferalsMinAggregateInputType = {
    id?: true
    code?: true
    suscription?: true
    status?: true
  }

  export type ReferalsMaxAggregateInputType = {
    id?: true
    code?: true
    suscription?: true
    status?: true
  }

  export type ReferalsCountAggregateInputType = {
    id?: true
    code?: true
    suscription?: true
    status?: true
    _all?: true
  }

  export type ReferalsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which referals to aggregate.
     */
    where?: referalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of referals to fetch.
     */
    orderBy?: Enumerable<referalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: referalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` referals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` referals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned referals
    **/
    _count?: true | ReferalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferalsMaxAggregateInputType
  }

  export type GetReferalsAggregateType<T extends ReferalsAggregateArgs> = {
        [P in keyof T & keyof AggregateReferals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferals[P]>
      : GetScalarType<T[P], AggregateReferals[P]>
  }




  export type ReferalsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: referalsWhereInput
    orderBy?: Enumerable<referalsOrderByWithAggregationInput>
    by: ReferalsScalarFieldEnum[]
    having?: referalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferalsCountAggregateInputType | true
    _avg?: ReferalsAvgAggregateInputType
    _sum?: ReferalsSumAggregateInputType
    _min?: ReferalsMinAggregateInputType
    _max?: ReferalsMaxAggregateInputType
  }


  export type ReferalsGroupByOutputType = {
    id: string
    code: string
    suscription: number
    status: string
    _count: ReferalsCountAggregateOutputType | null
    _avg: ReferalsAvgAggregateOutputType | null
    _sum: ReferalsSumAggregateOutputType | null
    _min: ReferalsMinAggregateOutputType | null
    _max: ReferalsMaxAggregateOutputType | null
  }

  type GetReferalsGroupByPayload<T extends ReferalsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReferalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferalsGroupByOutputType[P]>
            : GetScalarType<T[P], ReferalsGroupByOutputType[P]>
        }
      >
    >


  export type referalsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    suscription?: boolean
    status?: boolean
  }, ExtArgs["result"]["referals"]>

  export type referalsSelectScalar = {
    id?: boolean
    code?: boolean
    suscription?: boolean
    status?: boolean
  }


  type referalsGetPayload<S extends boolean | null | undefined | referalsArgs> = $Types.GetResult<referalsPayload, S>

  type referalsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<referalsFindManyArgs, 'select' | 'include'> & {
      select?: ReferalsCountAggregateInputType | true
    }

  export interface referalsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['referals'], meta: { name: 'referals' } }
    /**
     * Find zero or one Referals that matches the filter.
     * @param {referalsFindUniqueArgs} args - Arguments to find a Referals
     * @example
     * // Get one Referals
     * const referals = await prisma.referals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends referalsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, referalsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'referals'> extends True ? Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Referals that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {referalsFindUniqueOrThrowArgs} args - Arguments to find a Referals
     * @example
     * // Get one Referals
     * const referals = await prisma.referals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends referalsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, referalsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Referals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {referalsFindFirstArgs} args - Arguments to find a Referals
     * @example
     * // Get one Referals
     * const referals = await prisma.referals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends referalsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, referalsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'referals'> extends True ? Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Referals that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {referalsFindFirstOrThrowArgs} args - Arguments to find a Referals
     * @example
     * // Get one Referals
     * const referals = await prisma.referals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends referalsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, referalsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Referals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {referalsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referals
     * const referals = await prisma.referals.findMany()
     * 
     * // Get first 10 Referals
     * const referals = await prisma.referals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referalsWithIdOnly = await prisma.referals.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends referalsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, referalsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<referalsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Referals.
     * @param {referalsCreateArgs} args - Arguments to create a Referals.
     * @example
     * // Create one Referals
     * const Referals = await prisma.referals.create({
     *   data: {
     *     // ... data to create a Referals
     *   }
     * })
     * 
    **/
    create<T extends referalsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, referalsCreateArgs<ExtArgs>>
    ): Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Referals.
     *     @param {referalsCreateManyArgs} args - Arguments to create many Referals.
     *     @example
     *     // Create many Referals
     *     const referals = await prisma.referals.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends referalsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, referalsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Referals.
     * @param {referalsDeleteArgs} args - Arguments to delete one Referals.
     * @example
     * // Delete one Referals
     * const Referals = await prisma.referals.delete({
     *   where: {
     *     // ... filter to delete one Referals
     *   }
     * })
     * 
    **/
    delete<T extends referalsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, referalsDeleteArgs<ExtArgs>>
    ): Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Referals.
     * @param {referalsUpdateArgs} args - Arguments to update one Referals.
     * @example
     * // Update one Referals
     * const referals = await prisma.referals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends referalsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, referalsUpdateArgs<ExtArgs>>
    ): Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Referals.
     * @param {referalsDeleteManyArgs} args - Arguments to filter Referals to delete.
     * @example
     * // Delete a few Referals
     * const { count } = await prisma.referals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends referalsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, referalsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {referalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referals
     * const referals = await prisma.referals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends referalsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, referalsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Referals.
     * @param {referalsUpsertArgs} args - Arguments to update or create a Referals.
     * @example
     * // Update or create a Referals
     * const referals = await prisma.referals.upsert({
     *   create: {
     *     // ... data to create a Referals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referals we want to update
     *   }
     * })
    **/
    upsert<T extends referalsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, referalsUpsertArgs<ExtArgs>>
    ): Prisma__referalsClient<$Types.GetResult<referalsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Referals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {referalsCountArgs} args - Arguments to filter Referals to count.
     * @example
     * // Count the number of Referals
     * const count = await prisma.referals.count({
     *   where: {
     *     // ... the filter for the Referals we want to count
     *   }
     * })
    **/
    count<T extends referalsCountArgs>(
      args?: Subset<T, referalsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferalsAggregateArgs>(args: Subset<T, ReferalsAggregateArgs>): Prisma.PrismaPromise<GetReferalsAggregateType<T>>

    /**
     * Group by Referals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferalsGroupByArgs['orderBy'] }
        : { orderBy?: ReferalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for referals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__referalsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * referals base type for findUnique actions
   */
  export type referalsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * Filter, which referals to fetch.
     */
    where: referalsWhereUniqueInput
  }

  /**
   * referals findUnique
   */
  export interface referalsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends referalsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * referals findUniqueOrThrow
   */
  export type referalsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * Filter, which referals to fetch.
     */
    where: referalsWhereUniqueInput
  }


  /**
   * referals base type for findFirst actions
   */
  export type referalsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * Filter, which referals to fetch.
     */
    where?: referalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of referals to fetch.
     */
    orderBy?: Enumerable<referalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for referals.
     */
    cursor?: referalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` referals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` referals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of referals.
     */
    distinct?: Enumerable<ReferalsScalarFieldEnum>
  }

  /**
   * referals findFirst
   */
  export interface referalsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends referalsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * referals findFirstOrThrow
   */
  export type referalsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * Filter, which referals to fetch.
     */
    where?: referalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of referals to fetch.
     */
    orderBy?: Enumerable<referalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for referals.
     */
    cursor?: referalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` referals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` referals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of referals.
     */
    distinct?: Enumerable<ReferalsScalarFieldEnum>
  }


  /**
   * referals findMany
   */
  export type referalsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * Filter, which referals to fetch.
     */
    where?: referalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of referals to fetch.
     */
    orderBy?: Enumerable<referalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing referals.
     */
    cursor?: referalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` referals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` referals.
     */
    skip?: number
    distinct?: Enumerable<ReferalsScalarFieldEnum>
  }


  /**
   * referals create
   */
  export type referalsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * The data needed to create a referals.
     */
    data?: XOR<referalsCreateInput, referalsUncheckedCreateInput>
  }


  /**
   * referals createMany
   */
  export type referalsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many referals.
     */
    data: Enumerable<referalsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * referals update
   */
  export type referalsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * The data needed to update a referals.
     */
    data: XOR<referalsUpdateInput, referalsUncheckedUpdateInput>
    /**
     * Choose, which referals to update.
     */
    where: referalsWhereUniqueInput
  }


  /**
   * referals updateMany
   */
  export type referalsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update referals.
     */
    data: XOR<referalsUpdateManyMutationInput, referalsUncheckedUpdateManyInput>
    /**
     * Filter which referals to update
     */
    where?: referalsWhereInput
  }


  /**
   * referals upsert
   */
  export type referalsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * The filter to search for the referals to update in case it exists.
     */
    where: referalsWhereUniqueInput
    /**
     * In case the referals found by the `where` argument doesn't exist, create a new referals with this data.
     */
    create: XOR<referalsCreateInput, referalsUncheckedCreateInput>
    /**
     * In case the referals was found with the provided `where` argument, update it with this data.
     */
    update: XOR<referalsUpdateInput, referalsUncheckedUpdateInput>
  }


  /**
   * referals delete
   */
  export type referalsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
    /**
     * Filter which referals to delete.
     */
    where: referalsWhereUniqueInput
  }


  /**
   * referals deleteMany
   */
  export type referalsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which referals to delete
     */
    where?: referalsWhereInput
  }


  /**
   * referals without action
   */
  export type referalsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the referals
     */
    select?: referalsSelect<ExtArgs> | null
  }



  /**
   * Model pushNotifications
   */


  export type AggregatePushNotifications = {
    _count: PushNotificationsCountAggregateOutputType | null
    _min: PushNotificationsMinAggregateOutputType | null
    _max: PushNotificationsMaxAggregateOutputType | null
  }

  export type PushNotificationsMinAggregateOutputType = {
    id: string | null
    status: string | null
    title: string | null
    description: string | null
    link: string | null
  }

  export type PushNotificationsMaxAggregateOutputType = {
    id: string | null
    status: string | null
    title: string | null
    description: string | null
    link: string | null
  }

  export type PushNotificationsCountAggregateOutputType = {
    id: number
    status: number
    title: number
    description: number
    link: number
    _all: number
  }


  export type PushNotificationsMinAggregateInputType = {
    id?: true
    status?: true
    title?: true
    description?: true
    link?: true
  }

  export type PushNotificationsMaxAggregateInputType = {
    id?: true
    status?: true
    title?: true
    description?: true
    link?: true
  }

  export type PushNotificationsCountAggregateInputType = {
    id?: true
    status?: true
    title?: true
    description?: true
    link?: true
    _all?: true
  }

  export type PushNotificationsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which pushNotifications to aggregate.
     */
    where?: pushNotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pushNotifications to fetch.
     */
    orderBy?: Enumerable<pushNotificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pushNotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pushNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pushNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pushNotifications
    **/
    _count?: true | PushNotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PushNotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PushNotificationsMaxAggregateInputType
  }

  export type GetPushNotificationsAggregateType<T extends PushNotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregatePushNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePushNotifications[P]>
      : GetScalarType<T[P], AggregatePushNotifications[P]>
  }




  export type PushNotificationsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: pushNotificationsWhereInput
    orderBy?: Enumerable<pushNotificationsOrderByWithAggregationInput>
    by: PushNotificationsScalarFieldEnum[]
    having?: pushNotificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PushNotificationsCountAggregateInputType | true
    _min?: PushNotificationsMinAggregateInputType
    _max?: PushNotificationsMaxAggregateInputType
  }


  export type PushNotificationsGroupByOutputType = {
    id: string
    status: string
    title: string
    description: string
    link: string
    _count: PushNotificationsCountAggregateOutputType | null
    _min: PushNotificationsMinAggregateOutputType | null
    _max: PushNotificationsMaxAggregateOutputType | null
  }

  type GetPushNotificationsGroupByPayload<T extends PushNotificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PushNotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PushNotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PushNotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], PushNotificationsGroupByOutputType[P]>
        }
      >
    >


  export type pushNotificationsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    title?: boolean
    description?: boolean
    link?: boolean
  }, ExtArgs["result"]["pushNotifications"]>

  export type pushNotificationsSelectScalar = {
    id?: boolean
    status?: boolean
    title?: boolean
    description?: boolean
    link?: boolean
  }


  type pushNotificationsGetPayload<S extends boolean | null | undefined | pushNotificationsArgs> = $Types.GetResult<pushNotificationsPayload, S>

  type pushNotificationsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<pushNotificationsFindManyArgs, 'select' | 'include'> & {
      select?: PushNotificationsCountAggregateInputType | true
    }

  export interface pushNotificationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pushNotifications'], meta: { name: 'pushNotifications' } }
    /**
     * Find zero or one PushNotifications that matches the filter.
     * @param {pushNotificationsFindUniqueArgs} args - Arguments to find a PushNotifications
     * @example
     * // Get one PushNotifications
     * const pushNotifications = await prisma.pushNotifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pushNotificationsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pushNotificationsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pushNotifications'> extends True ? Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one PushNotifications that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {pushNotificationsFindUniqueOrThrowArgs} args - Arguments to find a PushNotifications
     * @example
     * // Get one PushNotifications
     * const pushNotifications = await prisma.pushNotifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends pushNotificationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pushNotificationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first PushNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pushNotificationsFindFirstArgs} args - Arguments to find a PushNotifications
     * @example
     * // Get one PushNotifications
     * const pushNotifications = await prisma.pushNotifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pushNotificationsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pushNotificationsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pushNotifications'> extends True ? Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first PushNotifications that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pushNotificationsFindFirstOrThrowArgs} args - Arguments to find a PushNotifications
     * @example
     * // Get one PushNotifications
     * const pushNotifications = await prisma.pushNotifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends pushNotificationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, pushNotificationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more PushNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pushNotificationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PushNotifications
     * const pushNotifications = await prisma.pushNotifications.findMany()
     * 
     * // Get first 10 PushNotifications
     * const pushNotifications = await prisma.pushNotifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pushNotificationsWithIdOnly = await prisma.pushNotifications.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends pushNotificationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pushNotificationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a PushNotifications.
     * @param {pushNotificationsCreateArgs} args - Arguments to create a PushNotifications.
     * @example
     * // Create one PushNotifications
     * const PushNotifications = await prisma.pushNotifications.create({
     *   data: {
     *     // ... data to create a PushNotifications
     *   }
     * })
     * 
    **/
    create<T extends pushNotificationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, pushNotificationsCreateArgs<ExtArgs>>
    ): Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many PushNotifications.
     *     @param {pushNotificationsCreateManyArgs} args - Arguments to create many PushNotifications.
     *     @example
     *     // Create many PushNotifications
     *     const pushNotifications = await prisma.pushNotifications.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends pushNotificationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pushNotificationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PushNotifications.
     * @param {pushNotificationsDeleteArgs} args - Arguments to delete one PushNotifications.
     * @example
     * // Delete one PushNotifications
     * const PushNotifications = await prisma.pushNotifications.delete({
     *   where: {
     *     // ... filter to delete one PushNotifications
     *   }
     * })
     * 
    **/
    delete<T extends pushNotificationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, pushNotificationsDeleteArgs<ExtArgs>>
    ): Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one PushNotifications.
     * @param {pushNotificationsUpdateArgs} args - Arguments to update one PushNotifications.
     * @example
     * // Update one PushNotifications
     * const pushNotifications = await prisma.pushNotifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pushNotificationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, pushNotificationsUpdateArgs<ExtArgs>>
    ): Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more PushNotifications.
     * @param {pushNotificationsDeleteManyArgs} args - Arguments to filter PushNotifications to delete.
     * @example
     * // Delete a few PushNotifications
     * const { count } = await prisma.pushNotifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pushNotificationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, pushNotificationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PushNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pushNotificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PushNotifications
     * const pushNotifications = await prisma.pushNotifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pushNotificationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, pushNotificationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PushNotifications.
     * @param {pushNotificationsUpsertArgs} args - Arguments to update or create a PushNotifications.
     * @example
     * // Update or create a PushNotifications
     * const pushNotifications = await prisma.pushNotifications.upsert({
     *   create: {
     *     // ... data to create a PushNotifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PushNotifications we want to update
     *   }
     * })
    **/
    upsert<T extends pushNotificationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, pushNotificationsUpsertArgs<ExtArgs>>
    ): Prisma__pushNotificationsClient<$Types.GetResult<pushNotificationsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of PushNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pushNotificationsCountArgs} args - Arguments to filter PushNotifications to count.
     * @example
     * // Count the number of PushNotifications
     * const count = await prisma.pushNotifications.count({
     *   where: {
     *     // ... the filter for the PushNotifications we want to count
     *   }
     * })
    **/
    count<T extends pushNotificationsCountArgs>(
      args?: Subset<T, pushNotificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PushNotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PushNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushNotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PushNotificationsAggregateArgs>(args: Subset<T, PushNotificationsAggregateArgs>): Prisma.PrismaPromise<GetPushNotificationsAggregateType<T>>

    /**
     * Group by PushNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PushNotificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PushNotificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PushNotificationsGroupByArgs['orderBy'] }
        : { orderBy?: PushNotificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PushNotificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPushNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for pushNotifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pushNotificationsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * pushNotifications base type for findUnique actions
   */
  export type pushNotificationsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * Filter, which pushNotifications to fetch.
     */
    where: pushNotificationsWhereUniqueInput
  }

  /**
   * pushNotifications findUnique
   */
  export interface pushNotificationsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends pushNotificationsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pushNotifications findUniqueOrThrow
   */
  export type pushNotificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * Filter, which pushNotifications to fetch.
     */
    where: pushNotificationsWhereUniqueInput
  }


  /**
   * pushNotifications base type for findFirst actions
   */
  export type pushNotificationsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * Filter, which pushNotifications to fetch.
     */
    where?: pushNotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pushNotifications to fetch.
     */
    orderBy?: Enumerable<pushNotificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pushNotifications.
     */
    cursor?: pushNotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pushNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pushNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pushNotifications.
     */
    distinct?: Enumerable<PushNotificationsScalarFieldEnum>
  }

  /**
   * pushNotifications findFirst
   */
  export interface pushNotificationsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends pushNotificationsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * pushNotifications findFirstOrThrow
   */
  export type pushNotificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * Filter, which pushNotifications to fetch.
     */
    where?: pushNotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pushNotifications to fetch.
     */
    orderBy?: Enumerable<pushNotificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pushNotifications.
     */
    cursor?: pushNotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pushNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pushNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pushNotifications.
     */
    distinct?: Enumerable<PushNotificationsScalarFieldEnum>
  }


  /**
   * pushNotifications findMany
   */
  export type pushNotificationsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * Filter, which pushNotifications to fetch.
     */
    where?: pushNotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pushNotifications to fetch.
     */
    orderBy?: Enumerable<pushNotificationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pushNotifications.
     */
    cursor?: pushNotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pushNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pushNotifications.
     */
    skip?: number
    distinct?: Enumerable<PushNotificationsScalarFieldEnum>
  }


  /**
   * pushNotifications create
   */
  export type pushNotificationsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * The data needed to create a pushNotifications.
     */
    data?: XOR<pushNotificationsCreateInput, pushNotificationsUncheckedCreateInput>
  }


  /**
   * pushNotifications createMany
   */
  export type pushNotificationsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pushNotifications.
     */
    data: Enumerable<pushNotificationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * pushNotifications update
   */
  export type pushNotificationsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * The data needed to update a pushNotifications.
     */
    data: XOR<pushNotificationsUpdateInput, pushNotificationsUncheckedUpdateInput>
    /**
     * Choose, which pushNotifications to update.
     */
    where: pushNotificationsWhereUniqueInput
  }


  /**
   * pushNotifications updateMany
   */
  export type pushNotificationsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pushNotifications.
     */
    data: XOR<pushNotificationsUpdateManyMutationInput, pushNotificationsUncheckedUpdateManyInput>
    /**
     * Filter which pushNotifications to update
     */
    where?: pushNotificationsWhereInput
  }


  /**
   * pushNotifications upsert
   */
  export type pushNotificationsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * The filter to search for the pushNotifications to update in case it exists.
     */
    where: pushNotificationsWhereUniqueInput
    /**
     * In case the pushNotifications found by the `where` argument doesn't exist, create a new pushNotifications with this data.
     */
    create: XOR<pushNotificationsCreateInput, pushNotificationsUncheckedCreateInput>
    /**
     * In case the pushNotifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pushNotificationsUpdateInput, pushNotificationsUncheckedUpdateInput>
  }


  /**
   * pushNotifications delete
   */
  export type pushNotificationsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
    /**
     * Filter which pushNotifications to delete.
     */
    where: pushNotificationsWhereUniqueInput
  }


  /**
   * pushNotifications deleteMany
   */
  export type pushNotificationsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which pushNotifications to delete
     */
    where?: pushNotificationsWhereInput
  }


  /**
   * pushNotifications without action
   */
  export type pushNotificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pushNotifications
     */
    select?: pushNotificationsSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fatherLastName: 'fatherLastName',
    motherLastName: 'motherLastName',
    email: 'email',
    gender: 'gender',
    phoneNumberCountry: 'phoneNumberCountry',
    phoneNumber: 'phoneNumber',
    curp: 'curp',
    maritalStatus: 'maritalStatus',
    birthDate: 'birthDate',
    birthDateV2: 'birthDateV2',
    city: 'city',
    photo_url: 'photo_url',
    registryType: 'registryType',
    referalCode: 'referalCode',
    useType: 'useType',
    created_time: 'created_time',
    isVerified: 'isVerified',
    created_timeV2: 'created_timeV2',
    last_edit_time: 'last_edit_time',
    last_edit_timeV2: 'last_edit_timeV2',
    acceptedTermsDate: 'acceptedTermsDate',
    lifeState: 'lifeState'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    contactId: 'contactId',
    title: 'title',
    description: 'description',
    urlMultimedia: 'urlMultimedia',
    multimediaType: 'multimediaType',
    multimediaMeta: 'multimediaMeta',
    thumbnailUrl: 'thumbnailUrl',
    lifeState: 'lifeState',
    status: 'status',
    isSend: 'isSend',
    mediaType: 'mediaType',
    createDate: 'createDate',
    createDateV2: 'createDateV2',
    editDate: 'editDate',
    editDateV2: 'editDateV2',
    programDate: 'programDate',
    programDateV2: 'programDateV2',
    urlNft: 'urlNft',
    isNfts: 'isNfts',
    idNft: 'idNft',
    statsId: 'statsId',
    folder: 'folder',
    chain: 'chain',
    estandar: 'estandar',
    whatsapp: 'whatsapp',
    email: 'email',
    maxhastriest: 'maxhastriest',
    maxconfirmtries: 'maxconfirmtries',
    uuid: 'uuid'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const MessageStatusScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    contactId: 'contactId',
    messageId: 'messageId',
    status: 'status',
    programDate: 'programDate',
    programDateV2: 'programDateV2',
    data: 'data',
    urlId: 'urlId',
    messageError: 'messageError'
  };

  export type MessageStatusScalarFieldEnum = (typeof MessageStatusScalarFieldEnum)[keyof typeof MessageStatusScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    fechaV2: 'fechaV2',
    proceso: 'proceso',
    comentario: 'comentario'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    photoUrl: 'photoUrl',
    name: 'name',
    fatherLastName: 'fatherLastName',
    motherLastName: 'motherLastName',
    relation: 'relation',
    email: 'email',
    typeContact: 'typeContact',
    phoneNumber: 'phoneNumber',
    phoneNumberCountry: 'phoneNumberCountry',
    birthDate: 'birthDate',
    birthDateV2: 'birthDateV2',
    notes: 'notes',
    trusted: 'trusted',
    hidden: 'hidden'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const WishesMessagesScalarFieldEnum: {
    id: 'id',
    authorAcc: 'authorAcc',
    createDate: 'createDate',
    status: 'status',
    url: 'url',
    identifier: 'identifier',
    encelopeId: 'encelopeId'
  };

  export type WishesMessagesScalarFieldEnum = (typeof WishesMessagesScalarFieldEnum)[keyof typeof WishesMessagesScalarFieldEnum]


  export const DeletionsScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId'
  };

  export type DeletionsScalarFieldEnum = (typeof DeletionsScalarFieldEnum)[keyof typeof DeletionsScalarFieldEnum]


  export const DoubleFactorScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    attemptDate: 'attemptDate',
    code: 'code',
    status: 'status'
  };

  export type DoubleFactorScalarFieldEnum = (typeof DoubleFactorScalarFieldEnum)[keyof typeof DoubleFactorScalarFieldEnum]


  export const SuscriptionsCatalogueScalarFieldEnum: {
    id: 'id',
    planName: 'planName',
    planprice: 'planprice',
    allowedNfts: 'allowedNfts',
    storage: 'storage',
    patrimonial: 'patrimonial',
    funeralWill: 'funeralWill',
    remains: 'remains',
    organs: 'organs',
    health: 'health',
    dependants: 'dependants',
    pets: 'pets',
    accounts: 'accounts',
    vault: 'vault',
    familyHub: 'familyHub',
    support: 'support',
    document: 'document',
    whoToInform: 'whoToInform',
    daysOfGrace: 'daysOfGrace',
    daysToExpire: 'daysToExpire',
    status: 'status'
  };

  export type SuscriptionsCatalogueScalarFieldEnum = (typeof SuscriptionsCatalogueScalarFieldEnum)[keyof typeof SuscriptionsCatalogueScalarFieldEnum]


  export const UsersSuscriptionsScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    suscriptionType: 'suscriptionType',
    suscriptionDate: 'suscriptionDate',
    paymentDate: 'paymentDate',
    expireDate: 'expireDate',
    currency: 'currency',
    status: 'status',
    paymentGateway: 'paymentGateway',
    paymentAmount: 'paymentAmount'
  };

  export type UsersSuscriptionsScalarFieldEnum = (typeof UsersSuscriptionsScalarFieldEnum)[keyof typeof UsersSuscriptionsScalarFieldEnum]


  export const AddOnsCatalogueScalarFieldEnum: {
    id: 'id',
    addOnName: 'addOnName',
    addOnprice: 'addOnprice',
    allowedNfts: 'allowedNfts',
    storage: 'storage',
    patrimonial: 'patrimonial',
    funeralWill: 'funeralWill',
    remains: 'remains',
    organs: 'organs',
    health: 'health',
    dependants: 'dependants',
    pets: 'pets',
    accounts: 'accounts',
    vault: 'vault',
    familyHub: 'familyHub',
    support: 'support',
    document: 'document',
    whoToInform: 'whoToInform',
    daysOfGrace: 'daysOfGrace',
    daysToExpire: 'daysToExpire',
    status: 'status'
  };

  export type AddOnsCatalogueScalarFieldEnum = (typeof AddOnsCatalogueScalarFieldEnum)[keyof typeof AddOnsCatalogueScalarFieldEnum]


  export const UsersAddOnsScalarFieldEnum: {
    id: 'id',
    authorId: 'authorId',
    addOnType: 'addOnType',
    addOnDate: 'addOnDate',
    paymentDate: 'paymentDate',
    expireDate: 'expireDate',
    currency: 'currency',
    status: 'status',
    paymentGateway: 'paymentGateway',
    paymentAmount: 'paymentAmount'
  };

  export type UsersAddOnsScalarFieldEnum = (typeof UsersAddOnsScalarFieldEnum)[keyof typeof UsersAddOnsScalarFieldEnum]


  export const ReferalsScalarFieldEnum: {
    id: 'id',
    code: 'code',
    suscription: 'suscription',
    status: 'status'
  };

  export type ReferalsScalarFieldEnum = (typeof ReferalsScalarFieldEnum)[keyof typeof ReferalsScalarFieldEnum]


  export const PushNotificationsScalarFieldEnum: {
    id: 'id',
    status: 'status',
    title: 'title',
    description: 'description',
    link: 'link'
  };

  export type PushNotificationsScalarFieldEnum = (typeof PushNotificationsScalarFieldEnum)[keyof typeof PushNotificationsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    fatherLastName?: StringFilter | string
    motherLastName?: StringFilter | string
    email?: StringFilter | string
    gender?: StringFilter | string
    phoneNumberCountry?: StringFilter | string
    phoneNumber?: StringFilter | string
    curp?: StringFilter | string
    maritalStatus?: StringFilter | string
    birthDate?: StringFilter | string
    birthDateV2?: DateTimeFilter | Date | string
    city?: StringFilter | string
    photo_url?: StringFilter | string
    registryType?: StringFilter | string
    referalCode?: IntFilter | number
    useType?: StringFilter | string
    created_time?: StringFilter | string
    isVerified?: BoolFilter | boolean
    created_timeV2?: DateTimeFilter | Date | string
    last_edit_time?: StringFilter | string
    last_edit_timeV2?: DateTimeFilter | Date | string
    acceptedTermsDate?: DateTimeFilter | Date | string
    lifeState?: BoolFilter | boolean
    Message?: MessageListRelationFilter
    Contact?: ContactListRelationFilter
    MessageStatus?: MessageStatusListRelationFilter
    usersSuscriptions?: UsersSuscriptionsListRelationFilter
    usersAddOns?: UsersAddOnsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phoneNumberCountry?: SortOrder
    phoneNumber?: SortOrder
    curp?: SortOrder
    maritalStatus?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    city?: SortOrder
    photo_url?: SortOrder
    registryType?: SortOrder
    referalCode?: SortOrder
    useType?: SortOrder
    created_time?: SortOrder
    isVerified?: SortOrder
    created_timeV2?: SortOrder
    last_edit_time?: SortOrder
    last_edit_timeV2?: SortOrder
    acceptedTermsDate?: SortOrder
    lifeState?: SortOrder
    Message?: MessageOrderByRelationAggregateInput
    Contact?: ContactOrderByRelationAggregateInput
    MessageStatus?: MessageStatusOrderByRelationAggregateInput
    usersSuscriptions?: usersSuscriptionsOrderByRelationAggregateInput
    usersAddOns?: usersAddOnsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phoneNumberCountry?: SortOrder
    phoneNumber?: SortOrder
    curp?: SortOrder
    maritalStatus?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    city?: SortOrder
    photo_url?: SortOrder
    registryType?: SortOrder
    referalCode?: SortOrder
    useType?: SortOrder
    created_time?: SortOrder
    isVerified?: SortOrder
    created_timeV2?: SortOrder
    last_edit_time?: SortOrder
    last_edit_timeV2?: SortOrder
    acceptedTermsDate?: SortOrder
    lifeState?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    fatherLastName?: StringWithAggregatesFilter | string
    motherLastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    gender?: StringWithAggregatesFilter | string
    phoneNumberCountry?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
    curp?: StringWithAggregatesFilter | string
    maritalStatus?: StringWithAggregatesFilter | string
    birthDate?: StringWithAggregatesFilter | string
    birthDateV2?: DateTimeWithAggregatesFilter | Date | string
    city?: StringWithAggregatesFilter | string
    photo_url?: StringWithAggregatesFilter | string
    registryType?: StringWithAggregatesFilter | string
    referalCode?: IntWithAggregatesFilter | number
    useType?: StringWithAggregatesFilter | string
    created_time?: StringWithAggregatesFilter | string
    isVerified?: BoolWithAggregatesFilter | boolean
    created_timeV2?: DateTimeWithAggregatesFilter | Date | string
    last_edit_time?: StringWithAggregatesFilter | string
    last_edit_timeV2?: DateTimeWithAggregatesFilter | Date | string
    acceptedTermsDate?: DateTimeWithAggregatesFilter | Date | string
    lifeState?: BoolWithAggregatesFilter | boolean
  }

  export type MessageWhereInput = {
    AND?: Enumerable<MessageWhereInput>
    OR?: Enumerable<MessageWhereInput>
    NOT?: Enumerable<MessageWhereInput>
    id?: IntFilter | number
    authorId?: IntFilter | number
    contactId?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    urlMultimedia?: StringFilter | string
    multimediaType?: StringFilter | string
    multimediaMeta?: StringFilter | string
    thumbnailUrl?: StringFilter | string
    lifeState?: StringFilter | string
    status?: StringFilter | string
    isSend?: BoolFilter | boolean
    mediaType?: BoolFilter | boolean
    createDate?: StringFilter | string
    createDateV2?: DateTimeFilter | Date | string
    editDate?: StringFilter | string
    editDateV2?: DateTimeFilter | Date | string
    programDate?: StringFilter | string
    programDateV2?: DateTimeFilter | Date | string
    urlNft?: StringFilter | string
    isNfts?: BoolFilter | boolean
    idNft?: StringFilter | string
    statsId?: StringFilter | string
    folder?: StringFilter | string
    chain?: StringFilter | string
    estandar?: StringFilter | string
    whatsapp?: BoolFilter | boolean
    email?: BoolFilter | boolean
    maxhastriest?: IntFilter | number
    maxconfirmtries?: IntFilter | number
    uuid?: StringFilter | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
    MessageStatus?: MessageStatusListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    urlMultimedia?: SortOrder
    multimediaType?: SortOrder
    multimediaMeta?: SortOrder
    thumbnailUrl?: SortOrder
    lifeState?: SortOrder
    status?: SortOrder
    isSend?: SortOrder
    mediaType?: SortOrder
    createDate?: SortOrder
    createDateV2?: SortOrder
    editDate?: SortOrder
    editDateV2?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    urlNft?: SortOrder
    isNfts?: SortOrder
    idNft?: SortOrder
    statsId?: SortOrder
    folder?: SortOrder
    chain?: SortOrder
    estandar?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    maxhastriest?: SortOrder
    maxconfirmtries?: SortOrder
    uuid?: SortOrder
    author?: UserOrderByWithRelationInput
    contact?: ContactOrderByWithRelationInput
    MessageStatus?: MessageStatusOrderByRelationAggregateInput
  }

  export type MessageWhereUniqueInput = {
    id?: number
  }

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    urlMultimedia?: SortOrder
    multimediaType?: SortOrder
    multimediaMeta?: SortOrder
    thumbnailUrl?: SortOrder
    lifeState?: SortOrder
    status?: SortOrder
    isSend?: SortOrder
    mediaType?: SortOrder
    createDate?: SortOrder
    createDateV2?: SortOrder
    editDate?: SortOrder
    editDateV2?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    urlNft?: SortOrder
    isNfts?: SortOrder
    idNft?: SortOrder
    statsId?: SortOrder
    folder?: SortOrder
    chain?: SortOrder
    estandar?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    maxhastriest?: SortOrder
    maxconfirmtries?: SortOrder
    uuid?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    authorId?: IntWithAggregatesFilter | number
    contactId?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    urlMultimedia?: StringWithAggregatesFilter | string
    multimediaType?: StringWithAggregatesFilter | string
    multimediaMeta?: StringWithAggregatesFilter | string
    thumbnailUrl?: StringWithAggregatesFilter | string
    lifeState?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    isSend?: BoolWithAggregatesFilter | boolean
    mediaType?: BoolWithAggregatesFilter | boolean
    createDate?: StringWithAggregatesFilter | string
    createDateV2?: DateTimeWithAggregatesFilter | Date | string
    editDate?: StringWithAggregatesFilter | string
    editDateV2?: DateTimeWithAggregatesFilter | Date | string
    programDate?: StringWithAggregatesFilter | string
    programDateV2?: DateTimeWithAggregatesFilter | Date | string
    urlNft?: StringWithAggregatesFilter | string
    isNfts?: BoolWithAggregatesFilter | boolean
    idNft?: StringWithAggregatesFilter | string
    statsId?: StringWithAggregatesFilter | string
    folder?: StringWithAggregatesFilter | string
    chain?: StringWithAggregatesFilter | string
    estandar?: StringWithAggregatesFilter | string
    whatsapp?: BoolWithAggregatesFilter | boolean
    email?: BoolWithAggregatesFilter | boolean
    maxhastriest?: IntWithAggregatesFilter | number
    maxconfirmtries?: IntWithAggregatesFilter | number
    uuid?: StringWithAggregatesFilter | string
  }

  export type MessageStatusWhereInput = {
    AND?: Enumerable<MessageStatusWhereInput>
    OR?: Enumerable<MessageStatusWhereInput>
    NOT?: Enumerable<MessageStatusWhereInput>
    id?: IntFilter | number
    authorId?: IntFilter | number
    contactId?: IntFilter | number
    messageId?: IntFilter | number
    status?: StringFilter | string
    programDate?: StringFilter | string
    programDateV2?: DateTimeFilter | Date | string
    data?: JsonFilter
    urlId?: IntFilter | number
    messageError?: StringFilter | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
    message?: XOR<MessageRelationFilter, MessageWhereInput>
  }

  export type MessageStatusOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    messageId?: SortOrder
    status?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    data?: SortOrder
    urlId?: SortOrder
    messageError?: SortOrder
    author?: UserOrderByWithRelationInput
    contact?: ContactOrderByWithRelationInput
    message?: MessageOrderByWithRelationInput
  }

  export type MessageStatusWhereUniqueInput = {
    id?: number
  }

  export type MessageStatusOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    messageId?: SortOrder
    status?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    data?: SortOrder
    urlId?: SortOrder
    messageError?: SortOrder
    _count?: MessageStatusCountOrderByAggregateInput
    _avg?: MessageStatusAvgOrderByAggregateInput
    _max?: MessageStatusMaxOrderByAggregateInput
    _min?: MessageStatusMinOrderByAggregateInput
    _sum?: MessageStatusSumOrderByAggregateInput
  }

  export type MessageStatusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageStatusScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageStatusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageStatusScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    authorId?: IntWithAggregatesFilter | number
    contactId?: IntWithAggregatesFilter | number
    messageId?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    programDate?: StringWithAggregatesFilter | string
    programDateV2?: DateTimeWithAggregatesFilter | Date | string
    data?: JsonWithAggregatesFilter
    urlId?: IntWithAggregatesFilter | number
    messageError?: StringWithAggregatesFilter | string
  }

  export type LogWhereInput = {
    AND?: Enumerable<LogWhereInput>
    OR?: Enumerable<LogWhereInput>
    NOT?: Enumerable<LogWhereInput>
    id?: IntFilter | number
    fecha?: StringFilter | string
    fechaV2?: DateTimeFilter | Date | string
    proceso?: StringFilter | string
    comentario?: StringFilter | string
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    fechaV2?: SortOrder
    proceso?: SortOrder
    comentario?: SortOrder
  }

  export type LogWhereUniqueInput = {
    id?: number
  }

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    fechaV2?: SortOrder
    proceso?: SortOrder
    comentario?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LogScalarWhereWithAggregatesInput>
    OR?: Enumerable<LogScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LogScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fecha?: StringWithAggregatesFilter | string
    fechaV2?: DateTimeWithAggregatesFilter | Date | string
    proceso?: StringWithAggregatesFilter | string
    comentario?: StringWithAggregatesFilter | string
  }

  export type ContactWhereInput = {
    AND?: Enumerable<ContactWhereInput>
    OR?: Enumerable<ContactWhereInput>
    NOT?: Enumerable<ContactWhereInput>
    id?: IntFilter | number
    authorId?: IntFilter | number
    photoUrl?: StringFilter | string
    name?: StringFilter | string
    fatherLastName?: StringFilter | string
    motherLastName?: StringFilter | string
    relation?: StringFilter | string
    email?: StringFilter | string
    typeContact?: StringFilter | string
    phoneNumber?: StringFilter | string
    phoneNumberCountry?: StringFilter | string
    birthDate?: StringFilter | string
    birthDateV2?: DateTimeFilter | Date | string
    notes?: StringFilter | string
    trusted?: BoolFilter | boolean
    hidden?: BoolFilter | boolean
    author?: XOR<UserRelationFilter, UserWhereInput>
    Message?: MessageListRelationFilter
    MessageStatus?: MessageStatusListRelationFilter
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    photoUrl?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    relation?: SortOrder
    email?: SortOrder
    typeContact?: SortOrder
    phoneNumber?: SortOrder
    phoneNumberCountry?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    notes?: SortOrder
    trusted?: SortOrder
    hidden?: SortOrder
    author?: UserOrderByWithRelationInput
    Message?: MessageOrderByRelationAggregateInput
    MessageStatus?: MessageStatusOrderByRelationAggregateInput
  }

  export type ContactWhereUniqueInput = {
    id?: number
  }

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    photoUrl?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    relation?: SortOrder
    email?: SortOrder
    typeContact?: SortOrder
    phoneNumber?: SortOrder
    phoneNumberCountry?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    notes?: SortOrder
    trusted?: SortOrder
    hidden?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _avg?: ContactAvgOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
    _sum?: ContactSumOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContactScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContactScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContactScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    authorId?: IntWithAggregatesFilter | number
    photoUrl?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    fatherLastName?: StringWithAggregatesFilter | string
    motherLastName?: StringWithAggregatesFilter | string
    relation?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    typeContact?: StringWithAggregatesFilter | string
    phoneNumber?: StringWithAggregatesFilter | string
    phoneNumberCountry?: StringWithAggregatesFilter | string
    birthDate?: StringWithAggregatesFilter | string
    birthDateV2?: DateTimeWithAggregatesFilter | Date | string
    notes?: StringWithAggregatesFilter | string
    trusted?: BoolWithAggregatesFilter | boolean
    hidden?: BoolWithAggregatesFilter | boolean
  }

  export type WishesMessagesWhereInput = {
    AND?: Enumerable<WishesMessagesWhereInput>
    OR?: Enumerable<WishesMessagesWhereInput>
    NOT?: Enumerable<WishesMessagesWhereInput>
    id?: IntFilter | number
    authorAcc?: StringFilter | string
    createDate?: DateTimeFilter | Date | string
    status?: StringFilter | string
    url?: StringFilter | string
    identifier?: StringFilter | string
    encelopeId?: StringFilter | string
  }

  export type WishesMessagesOrderByWithRelationInput = {
    id?: SortOrder
    authorAcc?: SortOrder
    createDate?: SortOrder
    status?: SortOrder
    url?: SortOrder
    identifier?: SortOrder
    encelopeId?: SortOrder
  }

  export type WishesMessagesWhereUniqueInput = {
    id?: number
  }

  export type WishesMessagesOrderByWithAggregationInput = {
    id?: SortOrder
    authorAcc?: SortOrder
    createDate?: SortOrder
    status?: SortOrder
    url?: SortOrder
    identifier?: SortOrder
    encelopeId?: SortOrder
    _count?: WishesMessagesCountOrderByAggregateInput
    _avg?: WishesMessagesAvgOrderByAggregateInput
    _max?: WishesMessagesMaxOrderByAggregateInput
    _min?: WishesMessagesMinOrderByAggregateInput
    _sum?: WishesMessagesSumOrderByAggregateInput
  }

  export type WishesMessagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WishesMessagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<WishesMessagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WishesMessagesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    authorAcc?: StringWithAggregatesFilter | string
    createDate?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    identifier?: StringWithAggregatesFilter | string
    encelopeId?: StringWithAggregatesFilter | string
  }

  export type DeletionsWhereInput = {
    AND?: Enumerable<DeletionsWhereInput>
    OR?: Enumerable<DeletionsWhereInput>
    NOT?: Enumerable<DeletionsWhereInput>
    id?: IntFilter | number
    authorId?: IntFilter | number
  }

  export type DeletionsOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type DeletionsWhereUniqueInput = {
    id?: number
  }

  export type DeletionsOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    _count?: DeletionsCountOrderByAggregateInput
    _avg?: DeletionsAvgOrderByAggregateInput
    _max?: DeletionsMaxOrderByAggregateInput
    _min?: DeletionsMinOrderByAggregateInput
    _sum?: DeletionsSumOrderByAggregateInput
  }

  export type DeletionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DeletionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<DeletionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DeletionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    authorId?: IntWithAggregatesFilter | number
  }

  export type doubleFactorWhereInput = {
    AND?: Enumerable<doubleFactorWhereInput>
    OR?: Enumerable<doubleFactorWhereInput>
    NOT?: Enumerable<doubleFactorWhereInput>
    id?: StringFilter | string
    authorId?: StringFilter | string
    attemptDate?: DateTimeFilter | Date | string
    code?: StringFilter | string
    status?: StringFilter | string
  }

  export type doubleFactorOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    attemptDate?: SortOrder
    code?: SortOrder
    status?: SortOrder
  }

  export type doubleFactorWhereUniqueInput = {
    id?: string
  }

  export type doubleFactorOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    attemptDate?: SortOrder
    code?: SortOrder
    status?: SortOrder
    _count?: doubleFactorCountOrderByAggregateInput
    _max?: doubleFactorMaxOrderByAggregateInput
    _min?: doubleFactorMinOrderByAggregateInput
  }

  export type doubleFactorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<doubleFactorScalarWhereWithAggregatesInput>
    OR?: Enumerable<doubleFactorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<doubleFactorScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    authorId?: StringWithAggregatesFilter | string
    attemptDate?: DateTimeWithAggregatesFilter | Date | string
    code?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
  }

  export type suscriptionsCatalogueWhereInput = {
    AND?: Enumerable<suscriptionsCatalogueWhereInput>
    OR?: Enumerable<suscriptionsCatalogueWhereInput>
    NOT?: Enumerable<suscriptionsCatalogueWhereInput>
    id?: IntFilter | number
    planName?: StringFilter | string
    planprice?: IntFilter | number
    allowedNfts?: IntFilter | number
    storage?: IntFilter | number
    patrimonial?: BoolFilter | boolean
    funeralWill?: BoolFilter | boolean
    remains?: BoolFilter | boolean
    organs?: BoolFilter | boolean
    health?: BoolFilter | boolean
    dependants?: BoolFilter | boolean
    pets?: BoolFilter | boolean
    accounts?: BoolFilter | boolean
    vault?: BoolFilter | boolean
    familyHub?: BoolFilter | boolean
    support?: BoolFilter | boolean
    document?: IntFilter | number
    whoToInform?: IntFilter | number
    daysOfGrace?: IntFilter | number
    daysToExpire?: IntFilter | number
    status?: StringFilter | string
    usersSuscriptions?: UsersSuscriptionsListRelationFilter
  }

  export type suscriptionsCatalogueOrderByWithRelationInput = {
    id?: SortOrder
    planName?: SortOrder
    planprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
    usersSuscriptions?: usersSuscriptionsOrderByRelationAggregateInput
  }

  export type suscriptionsCatalogueWhereUniqueInput = {
    id?: number
  }

  export type suscriptionsCatalogueOrderByWithAggregationInput = {
    id?: SortOrder
    planName?: SortOrder
    planprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
    _count?: suscriptionsCatalogueCountOrderByAggregateInput
    _avg?: suscriptionsCatalogueAvgOrderByAggregateInput
    _max?: suscriptionsCatalogueMaxOrderByAggregateInput
    _min?: suscriptionsCatalogueMinOrderByAggregateInput
    _sum?: suscriptionsCatalogueSumOrderByAggregateInput
  }

  export type suscriptionsCatalogueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<suscriptionsCatalogueScalarWhereWithAggregatesInput>
    OR?: Enumerable<suscriptionsCatalogueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<suscriptionsCatalogueScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    planName?: StringWithAggregatesFilter | string
    planprice?: IntWithAggregatesFilter | number
    allowedNfts?: IntWithAggregatesFilter | number
    storage?: IntWithAggregatesFilter | number
    patrimonial?: BoolWithAggregatesFilter | boolean
    funeralWill?: BoolWithAggregatesFilter | boolean
    remains?: BoolWithAggregatesFilter | boolean
    organs?: BoolWithAggregatesFilter | boolean
    health?: BoolWithAggregatesFilter | boolean
    dependants?: BoolWithAggregatesFilter | boolean
    pets?: BoolWithAggregatesFilter | boolean
    accounts?: BoolWithAggregatesFilter | boolean
    vault?: BoolWithAggregatesFilter | boolean
    familyHub?: BoolWithAggregatesFilter | boolean
    support?: BoolWithAggregatesFilter | boolean
    document?: IntWithAggregatesFilter | number
    whoToInform?: IntWithAggregatesFilter | number
    daysOfGrace?: IntWithAggregatesFilter | number
    daysToExpire?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
  }

  export type usersSuscriptionsWhereInput = {
    AND?: Enumerable<usersSuscriptionsWhereInput>
    OR?: Enumerable<usersSuscriptionsWhereInput>
    NOT?: Enumerable<usersSuscriptionsWhereInput>
    id?: StringFilter | string
    authorId?: IntFilter | number
    suscriptionType?: IntFilter | number
    suscriptionDate?: DateTimeFilter | Date | string
    paymentDate?: DateTimeFilter | Date | string
    expireDate?: DateTimeFilter | Date | string
    currency?: StringFilter | string
    status?: StringFilter | string
    paymentGateway?: StringFilter | string
    paymentAmount?: FloatFilter | number
    author?: XOR<UserRelationFilter, UserWhereInput>
    suscription?: XOR<SuscriptionsCatalogueRelationFilter, suscriptionsCatalogueWhereInput>
  }

  export type usersSuscriptionsOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    suscriptionType?: SortOrder
    suscriptionDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
    author?: UserOrderByWithRelationInput
    suscription?: suscriptionsCatalogueOrderByWithRelationInput
  }

  export type usersSuscriptionsWhereUniqueInput = {
    id?: string
  }

  export type usersSuscriptionsOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    suscriptionType?: SortOrder
    suscriptionDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
    _count?: usersSuscriptionsCountOrderByAggregateInput
    _avg?: usersSuscriptionsAvgOrderByAggregateInput
    _max?: usersSuscriptionsMaxOrderByAggregateInput
    _min?: usersSuscriptionsMinOrderByAggregateInput
    _sum?: usersSuscriptionsSumOrderByAggregateInput
  }

  export type usersSuscriptionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersSuscriptionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersSuscriptionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersSuscriptionsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    authorId?: IntWithAggregatesFilter | number
    suscriptionType?: IntWithAggregatesFilter | number
    suscriptionDate?: DateTimeWithAggregatesFilter | Date | string
    paymentDate?: DateTimeWithAggregatesFilter | Date | string
    expireDate?: DateTimeWithAggregatesFilter | Date | string
    currency?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    paymentGateway?: StringWithAggregatesFilter | string
    paymentAmount?: FloatWithAggregatesFilter | number
  }

  export type addOnsCatalogueWhereInput = {
    AND?: Enumerable<addOnsCatalogueWhereInput>
    OR?: Enumerable<addOnsCatalogueWhereInput>
    NOT?: Enumerable<addOnsCatalogueWhereInput>
    id?: IntFilter | number
    addOnName?: StringFilter | string
    addOnprice?: IntFilter | number
    allowedNfts?: IntFilter | number
    storage?: IntFilter | number
    patrimonial?: BoolFilter | boolean
    funeralWill?: BoolFilter | boolean
    remains?: BoolFilter | boolean
    organs?: BoolFilter | boolean
    health?: BoolFilter | boolean
    dependants?: BoolFilter | boolean
    pets?: BoolFilter | boolean
    accounts?: BoolFilter | boolean
    vault?: BoolFilter | boolean
    familyHub?: BoolFilter | boolean
    support?: BoolFilter | boolean
    document?: IntFilter | number
    whoToInform?: IntFilter | number
    daysOfGrace?: IntFilter | number
    daysToExpire?: IntFilter | number
    status?: StringFilter | string
    usersAddOns?: UsersAddOnsListRelationFilter
  }

  export type addOnsCatalogueOrderByWithRelationInput = {
    id?: SortOrder
    addOnName?: SortOrder
    addOnprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
    usersAddOns?: usersAddOnsOrderByRelationAggregateInput
  }

  export type addOnsCatalogueWhereUniqueInput = {
    id?: number
  }

  export type addOnsCatalogueOrderByWithAggregationInput = {
    id?: SortOrder
    addOnName?: SortOrder
    addOnprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
    _count?: addOnsCatalogueCountOrderByAggregateInput
    _avg?: addOnsCatalogueAvgOrderByAggregateInput
    _max?: addOnsCatalogueMaxOrderByAggregateInput
    _min?: addOnsCatalogueMinOrderByAggregateInput
    _sum?: addOnsCatalogueSumOrderByAggregateInput
  }

  export type addOnsCatalogueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<addOnsCatalogueScalarWhereWithAggregatesInput>
    OR?: Enumerable<addOnsCatalogueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<addOnsCatalogueScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    addOnName?: StringWithAggregatesFilter | string
    addOnprice?: IntWithAggregatesFilter | number
    allowedNfts?: IntWithAggregatesFilter | number
    storage?: IntWithAggregatesFilter | number
    patrimonial?: BoolWithAggregatesFilter | boolean
    funeralWill?: BoolWithAggregatesFilter | boolean
    remains?: BoolWithAggregatesFilter | boolean
    organs?: BoolWithAggregatesFilter | boolean
    health?: BoolWithAggregatesFilter | boolean
    dependants?: BoolWithAggregatesFilter | boolean
    pets?: BoolWithAggregatesFilter | boolean
    accounts?: BoolWithAggregatesFilter | boolean
    vault?: BoolWithAggregatesFilter | boolean
    familyHub?: BoolWithAggregatesFilter | boolean
    support?: BoolWithAggregatesFilter | boolean
    document?: IntWithAggregatesFilter | number
    whoToInform?: IntWithAggregatesFilter | number
    daysOfGrace?: IntWithAggregatesFilter | number
    daysToExpire?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
  }

  export type usersAddOnsWhereInput = {
    AND?: Enumerable<usersAddOnsWhereInput>
    OR?: Enumerable<usersAddOnsWhereInput>
    NOT?: Enumerable<usersAddOnsWhereInput>
    id?: StringFilter | string
    authorId?: IntFilter | number
    addOnType?: IntFilter | number
    addOnDate?: DateTimeFilter | Date | string
    paymentDate?: DateTimeFilter | Date | string
    expireDate?: DateTimeFilter | Date | string
    currency?: StringFilter | string
    status?: StringFilter | string
    paymentGateway?: StringFilter | string
    paymentAmount?: FloatFilter | number
    author?: XOR<UserRelationFilter, UserWhereInput>
    suscription?: XOR<AddOnsCatalogueRelationFilter, addOnsCatalogueWhereInput>
  }

  export type usersAddOnsOrderByWithRelationInput = {
    id?: SortOrder
    authorId?: SortOrder
    addOnType?: SortOrder
    addOnDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
    author?: UserOrderByWithRelationInput
    suscription?: addOnsCatalogueOrderByWithRelationInput
  }

  export type usersAddOnsWhereUniqueInput = {
    id?: string
  }

  export type usersAddOnsOrderByWithAggregationInput = {
    id?: SortOrder
    authorId?: SortOrder
    addOnType?: SortOrder
    addOnDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
    _count?: usersAddOnsCountOrderByAggregateInput
    _avg?: usersAddOnsAvgOrderByAggregateInput
    _max?: usersAddOnsMaxOrderByAggregateInput
    _min?: usersAddOnsMinOrderByAggregateInput
    _sum?: usersAddOnsSumOrderByAggregateInput
  }

  export type usersAddOnsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersAddOnsScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersAddOnsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersAddOnsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    authorId?: IntWithAggregatesFilter | number
    addOnType?: IntWithAggregatesFilter | number
    addOnDate?: DateTimeWithAggregatesFilter | Date | string
    paymentDate?: DateTimeWithAggregatesFilter | Date | string
    expireDate?: DateTimeWithAggregatesFilter | Date | string
    currency?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    paymentGateway?: StringWithAggregatesFilter | string
    paymentAmount?: FloatWithAggregatesFilter | number
  }

  export type referalsWhereInput = {
    AND?: Enumerable<referalsWhereInput>
    OR?: Enumerable<referalsWhereInput>
    NOT?: Enumerable<referalsWhereInput>
    id?: StringFilter | string
    code?: StringFilter | string
    suscription?: IntFilter | number
    status?: StringFilter | string
  }

  export type referalsOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    suscription?: SortOrder
    status?: SortOrder
  }

  export type referalsWhereUniqueInput = {
    id?: string
  }

  export type referalsOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    suscription?: SortOrder
    status?: SortOrder
    _count?: referalsCountOrderByAggregateInput
    _avg?: referalsAvgOrderByAggregateInput
    _max?: referalsMaxOrderByAggregateInput
    _min?: referalsMinOrderByAggregateInput
    _sum?: referalsSumOrderByAggregateInput
  }

  export type referalsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<referalsScalarWhereWithAggregatesInput>
    OR?: Enumerable<referalsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<referalsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    code?: StringWithAggregatesFilter | string
    suscription?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
  }

  export type pushNotificationsWhereInput = {
    AND?: Enumerable<pushNotificationsWhereInput>
    OR?: Enumerable<pushNotificationsWhereInput>
    NOT?: Enumerable<pushNotificationsWhereInput>
    id?: StringFilter | string
    status?: StringFilter | string
    title?: StringFilter | string
    description?: StringFilter | string
    link?: StringFilter | string
  }

  export type pushNotificationsOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    link?: SortOrder
  }

  export type pushNotificationsWhereUniqueInput = {
    id?: string
  }

  export type pushNotificationsOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    link?: SortOrder
    _count?: pushNotificationsCountOrderByAggregateInput
    _max?: pushNotificationsMaxOrderByAggregateInput
    _min?: pushNotificationsMinOrderByAggregateInput
  }

  export type pushNotificationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<pushNotificationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<pushNotificationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<pushNotificationsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    link?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageCreateNestedManyWithoutAuthorInput
    Contact?: ContactCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageUncheckedCreateNestedManyWithoutAuthorInput
    Contact?: ContactUncheckedCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsUncheckedCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUpdateManyWithoutAuthorNestedInput
    Contact?: ContactUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
    Contact?: ContactUncheckedUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUncheckedUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateInput = {
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
    author: UserCreateNestedOneWithoutMessageInput
    contact: ContactCreateNestedOneWithoutMessageInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    authorId: number
    contactId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMessageNestedInput
    contact?: ContactUpdateOneRequiredWithoutMessageNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: number
    authorId: number
    contactId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
  }

  export type MessageUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type MessageStatusCreateInput = {
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
    author: UserCreateNestedOneWithoutMessageStatusInput
    contact: ContactCreateNestedOneWithoutMessageStatusInput
    message: MessageCreateNestedOneWithoutMessageStatusInput
  }

  export type MessageStatusUncheckedCreateInput = {
    id?: number
    authorId: number
    contactId: number
    messageId: number
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
  }

  export type MessageStatusUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMessageStatusNestedInput
    contact?: ContactUpdateOneRequiredWithoutMessageStatusNestedInput
    message?: MessageUpdateOneRequiredWithoutMessageStatusNestedInput
  }

  export type MessageStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
  }

  export type MessageStatusCreateManyInput = {
    id?: number
    authorId: number
    contactId: number
    messageId: number
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
  }

  export type MessageStatusUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
  }

  export type MessageStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
  }

  export type LogCreateInput = {
    fecha: string
    fechaV2?: Date | string
    proceso: string
    comentario: string
  }

  export type LogUncheckedCreateInput = {
    id?: number
    fecha: string
    fechaV2?: Date | string
    proceso: string
    comentario: string
  }

  export type LogUpdateInput = {
    fecha?: StringFieldUpdateOperationsInput | string
    fechaV2?: DateTimeFieldUpdateOperationsInput | Date | string
    proceso?: StringFieldUpdateOperationsInput | string
    comentario?: StringFieldUpdateOperationsInput | string
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: StringFieldUpdateOperationsInput | string
    fechaV2?: DateTimeFieldUpdateOperationsInput | Date | string
    proceso?: StringFieldUpdateOperationsInput | string
    comentario?: StringFieldUpdateOperationsInput | string
  }

  export type LogCreateManyInput = {
    id?: number
    fecha: string
    fechaV2?: Date | string
    proceso: string
    comentario: string
  }

  export type LogUpdateManyMutationInput = {
    fecha?: StringFieldUpdateOperationsInput | string
    fechaV2?: DateTimeFieldUpdateOperationsInput | Date | string
    proceso?: StringFieldUpdateOperationsInput | string
    comentario?: StringFieldUpdateOperationsInput | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: StringFieldUpdateOperationsInput | string
    fechaV2?: DateTimeFieldUpdateOperationsInput | Date | string
    proceso?: StringFieldUpdateOperationsInput | string
    comentario?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
    author: UserCreateNestedOneWithoutContactInput
    Message?: MessageCreateNestedManyWithoutContactInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateInput = {
    id?: number
    authorId: number
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
    Message?: MessageUncheckedCreateNestedManyWithoutContactInput
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactUpdateInput = {
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutContactNestedInput
    Message?: MessageUpdateManyWithoutContactNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUncheckedUpdateManyWithoutContactNestedInput
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactCreateManyInput = {
    id?: number
    authorId: number
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
  }

  export type ContactUpdateManyMutationInput = {
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WishesMessagesCreateInput = {
    authorAcc: string
    createDate?: Date | string
    status: string
    url: string
    identifier?: string
    encelopeId?: string
  }

  export type WishesMessagesUncheckedCreateInput = {
    id?: number
    authorAcc: string
    createDate?: Date | string
    status: string
    url: string
    identifier?: string
    encelopeId?: string
  }

  export type WishesMessagesUpdateInput = {
    authorAcc?: StringFieldUpdateOperationsInput | string
    createDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    encelopeId?: StringFieldUpdateOperationsInput | string
  }

  export type WishesMessagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorAcc?: StringFieldUpdateOperationsInput | string
    createDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    encelopeId?: StringFieldUpdateOperationsInput | string
  }

  export type WishesMessagesCreateManyInput = {
    id?: number
    authorAcc: string
    createDate?: Date | string
    status: string
    url: string
    identifier?: string
    encelopeId?: string
  }

  export type WishesMessagesUpdateManyMutationInput = {
    authorAcc?: StringFieldUpdateOperationsInput | string
    createDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    encelopeId?: StringFieldUpdateOperationsInput | string
  }

  export type WishesMessagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorAcc?: StringFieldUpdateOperationsInput | string
    createDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    encelopeId?: StringFieldUpdateOperationsInput | string
  }

  export type DeletionsCreateInput = {
    authorId: number
  }

  export type DeletionsUncheckedCreateInput = {
    id?: number
    authorId: number
  }

  export type DeletionsUpdateInput = {
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type DeletionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type DeletionsCreateManyInput = {
    id?: number
    authorId: number
  }

  export type DeletionsUpdateManyMutationInput = {
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type DeletionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type doubleFactorCreateInput = {
    id?: string
    authorId: string
    attemptDate?: Date | string
    code: string
    status: string
  }

  export type doubleFactorUncheckedCreateInput = {
    id?: string
    authorId: string
    attemptDate?: Date | string
    code: string
    status: string
  }

  export type doubleFactorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    attemptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type doubleFactorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    attemptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type doubleFactorCreateManyInput = {
    id?: string
    authorId: string
    attemptDate?: Date | string
    code: string
    status: string
  }

  export type doubleFactorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    attemptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type doubleFactorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    attemptDate?: DateTimeFieldUpdateOperationsInput | Date | string
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type suscriptionsCatalogueCreateInput = {
    id: number
    planName: string
    planprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
    usersSuscriptions?: usersSuscriptionsCreateNestedManyWithoutSuscriptionInput
  }

  export type suscriptionsCatalogueUncheckedCreateInput = {
    id: number
    planName: string
    planprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
    usersSuscriptions?: usersSuscriptionsUncheckedCreateNestedManyWithoutSuscriptionInput
  }

  export type suscriptionsCatalogueUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    usersSuscriptions?: usersSuscriptionsUpdateManyWithoutSuscriptionNestedInput
  }

  export type suscriptionsCatalogueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    usersSuscriptions?: usersSuscriptionsUncheckedUpdateManyWithoutSuscriptionNestedInput
  }

  export type suscriptionsCatalogueCreateManyInput = {
    id: number
    planName: string
    planprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
  }

  export type suscriptionsCatalogueUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type suscriptionsCatalogueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type usersSuscriptionsCreateInput = {
    id?: string
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
    author: UserCreateNestedOneWithoutUsersSuscriptionsInput
    suscription: suscriptionsCatalogueCreateNestedOneWithoutUsersSuscriptionsInput
  }

  export type usersSuscriptionsUncheckedCreateInput = {
    id?: string
    authorId: number
    suscriptionType: number
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersSuscriptionsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutUsersSuscriptionsNestedInput
    suscription?: suscriptionsCatalogueUpdateOneRequiredWithoutUsersSuscriptionsNestedInput
  }

  export type usersSuscriptionsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    suscriptionType?: IntFieldUpdateOperationsInput | number
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type usersSuscriptionsCreateManyInput = {
    id?: string
    authorId: number
    suscriptionType: number
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersSuscriptionsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type usersSuscriptionsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    suscriptionType?: IntFieldUpdateOperationsInput | number
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type addOnsCatalogueCreateInput = {
    id: number
    addOnName: string
    addOnprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
    usersAddOns?: usersAddOnsCreateNestedManyWithoutSuscriptionInput
  }

  export type addOnsCatalogueUncheckedCreateInput = {
    id: number
    addOnName: string
    addOnprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
    usersAddOns?: usersAddOnsUncheckedCreateNestedManyWithoutSuscriptionInput
  }

  export type addOnsCatalogueUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    addOnName?: StringFieldUpdateOperationsInput | string
    addOnprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    usersAddOns?: usersAddOnsUpdateManyWithoutSuscriptionNestedInput
  }

  export type addOnsCatalogueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    addOnName?: StringFieldUpdateOperationsInput | string
    addOnprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    usersAddOns?: usersAddOnsUncheckedUpdateManyWithoutSuscriptionNestedInput
  }

  export type addOnsCatalogueCreateManyInput = {
    id: number
    addOnName: string
    addOnprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
  }

  export type addOnsCatalogueUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    addOnName?: StringFieldUpdateOperationsInput | string
    addOnprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type addOnsCatalogueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    addOnName?: StringFieldUpdateOperationsInput | string
    addOnprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type usersAddOnsCreateInput = {
    id?: string
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
    author: UserCreateNestedOneWithoutUsersAddOnsInput
    suscription: addOnsCatalogueCreateNestedOneWithoutUsersAddOnsInput
  }

  export type usersAddOnsUncheckedCreateInput = {
    id?: string
    authorId: number
    addOnType: number
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersAddOnsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutUsersAddOnsNestedInput
    suscription?: addOnsCatalogueUpdateOneRequiredWithoutUsersAddOnsNestedInput
  }

  export type usersAddOnsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    addOnType?: IntFieldUpdateOperationsInput | number
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type usersAddOnsCreateManyInput = {
    id?: string
    authorId: number
    addOnType: number
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersAddOnsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type usersAddOnsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    addOnType?: IntFieldUpdateOperationsInput | number
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type referalsCreateInput = {
    id?: string
    code?: string
    suscription?: number
    status?: string
  }

  export type referalsUncheckedCreateInput = {
    id?: string
    code?: string
    suscription?: number
    status?: string
  }

  export type referalsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    suscription?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type referalsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    suscription?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type referalsCreateManyInput = {
    id?: string
    code?: string
    suscription?: number
    status?: string
  }

  export type referalsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    suscription?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type referalsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    suscription?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type pushNotificationsCreateInput = {
    id?: string
    status?: string
    title?: string
    description?: string
    link?: string
  }

  export type pushNotificationsUncheckedCreateInput = {
    id?: string
    status?: string
    title?: string
    description?: string
    link?: string
  }

  export type pushNotificationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type pushNotificationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type pushNotificationsCreateManyInput = {
    id?: string
    status?: string
    title?: string
    description?: string
    link?: string
  }

  export type pushNotificationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type pushNotificationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type MessageStatusListRelationFilter = {
    every?: MessageStatusWhereInput
    some?: MessageStatusWhereInput
    none?: MessageStatusWhereInput
  }

  export type UsersSuscriptionsListRelationFilter = {
    every?: usersSuscriptionsWhereInput
    some?: usersSuscriptionsWhereInput
    none?: usersSuscriptionsWhereInput
  }

  export type UsersAddOnsListRelationFilter = {
    every?: usersAddOnsWhereInput
    some?: usersAddOnsWhereInput
    none?: usersAddOnsWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersSuscriptionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersAddOnsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phoneNumberCountry?: SortOrder
    phoneNumber?: SortOrder
    curp?: SortOrder
    maritalStatus?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    city?: SortOrder
    photo_url?: SortOrder
    registryType?: SortOrder
    referalCode?: SortOrder
    useType?: SortOrder
    created_time?: SortOrder
    isVerified?: SortOrder
    created_timeV2?: SortOrder
    last_edit_time?: SortOrder
    last_edit_timeV2?: SortOrder
    acceptedTermsDate?: SortOrder
    lifeState?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    referalCode?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phoneNumberCountry?: SortOrder
    phoneNumber?: SortOrder
    curp?: SortOrder
    maritalStatus?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    city?: SortOrder
    photo_url?: SortOrder
    registryType?: SortOrder
    referalCode?: SortOrder
    useType?: SortOrder
    created_time?: SortOrder
    isVerified?: SortOrder
    created_timeV2?: SortOrder
    last_edit_time?: SortOrder
    last_edit_timeV2?: SortOrder
    acceptedTermsDate?: SortOrder
    lifeState?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    phoneNumberCountry?: SortOrder
    phoneNumber?: SortOrder
    curp?: SortOrder
    maritalStatus?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    city?: SortOrder
    photo_url?: SortOrder
    registryType?: SortOrder
    referalCode?: SortOrder
    useType?: SortOrder
    created_time?: SortOrder
    isVerified?: SortOrder
    created_timeV2?: SortOrder
    last_edit_time?: SortOrder
    last_edit_timeV2?: SortOrder
    acceptedTermsDate?: SortOrder
    lifeState?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    referalCode?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ContactRelationFilter = {
    is?: ContactWhereInput | null
    isNot?: ContactWhereInput | null
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    urlMultimedia?: SortOrder
    multimediaType?: SortOrder
    multimediaMeta?: SortOrder
    thumbnailUrl?: SortOrder
    lifeState?: SortOrder
    status?: SortOrder
    isSend?: SortOrder
    mediaType?: SortOrder
    createDate?: SortOrder
    createDateV2?: SortOrder
    editDate?: SortOrder
    editDateV2?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    urlNft?: SortOrder
    isNfts?: SortOrder
    idNft?: SortOrder
    statsId?: SortOrder
    folder?: SortOrder
    chain?: SortOrder
    estandar?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    maxhastriest?: SortOrder
    maxconfirmtries?: SortOrder
    uuid?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    maxhastriest?: SortOrder
    maxconfirmtries?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    urlMultimedia?: SortOrder
    multimediaType?: SortOrder
    multimediaMeta?: SortOrder
    thumbnailUrl?: SortOrder
    lifeState?: SortOrder
    status?: SortOrder
    isSend?: SortOrder
    mediaType?: SortOrder
    createDate?: SortOrder
    createDateV2?: SortOrder
    editDate?: SortOrder
    editDateV2?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    urlNft?: SortOrder
    isNfts?: SortOrder
    idNft?: SortOrder
    statsId?: SortOrder
    folder?: SortOrder
    chain?: SortOrder
    estandar?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    maxhastriest?: SortOrder
    maxconfirmtries?: SortOrder
    uuid?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    urlMultimedia?: SortOrder
    multimediaType?: SortOrder
    multimediaMeta?: SortOrder
    thumbnailUrl?: SortOrder
    lifeState?: SortOrder
    status?: SortOrder
    isSend?: SortOrder
    mediaType?: SortOrder
    createDate?: SortOrder
    createDateV2?: SortOrder
    editDate?: SortOrder
    editDateV2?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    urlNft?: SortOrder
    isNfts?: SortOrder
    idNft?: SortOrder
    statsId?: SortOrder
    folder?: SortOrder
    chain?: SortOrder
    estandar?: SortOrder
    whatsapp?: SortOrder
    email?: SortOrder
    maxhastriest?: SortOrder
    maxconfirmtries?: SortOrder
    uuid?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    maxhastriest?: SortOrder
    maxconfirmtries?: SortOrder
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type MessageRelationFilter = {
    is?: MessageWhereInput | null
    isNot?: MessageWhereInput | null
  }

  export type MessageStatusCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    messageId?: SortOrder
    status?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    data?: SortOrder
    urlId?: SortOrder
    messageError?: SortOrder
  }

  export type MessageStatusAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    messageId?: SortOrder
    urlId?: SortOrder
  }

  export type MessageStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    messageId?: SortOrder
    status?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    urlId?: SortOrder
    messageError?: SortOrder
  }

  export type MessageStatusMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    messageId?: SortOrder
    status?: SortOrder
    programDate?: SortOrder
    programDateV2?: SortOrder
    urlId?: SortOrder
    messageError?: SortOrder
  }

  export type MessageStatusSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    contactId?: SortOrder
    messageId?: SortOrder
    urlId?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    fechaV2?: SortOrder
    proceso?: SortOrder
    comentario?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    fechaV2?: SortOrder
    proceso?: SortOrder
    comentario?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    fechaV2?: SortOrder
    proceso?: SortOrder
    comentario?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    photoUrl?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    relation?: SortOrder
    email?: SortOrder
    typeContact?: SortOrder
    phoneNumber?: SortOrder
    phoneNumberCountry?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    notes?: SortOrder
    trusted?: SortOrder
    hidden?: SortOrder
  }

  export type ContactAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    photoUrl?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    relation?: SortOrder
    email?: SortOrder
    typeContact?: SortOrder
    phoneNumber?: SortOrder
    phoneNumberCountry?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    notes?: SortOrder
    trusted?: SortOrder
    hidden?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    photoUrl?: SortOrder
    name?: SortOrder
    fatherLastName?: SortOrder
    motherLastName?: SortOrder
    relation?: SortOrder
    email?: SortOrder
    typeContact?: SortOrder
    phoneNumber?: SortOrder
    phoneNumberCountry?: SortOrder
    birthDate?: SortOrder
    birthDateV2?: SortOrder
    notes?: SortOrder
    trusted?: SortOrder
    hidden?: SortOrder
  }

  export type ContactSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type WishesMessagesCountOrderByAggregateInput = {
    id?: SortOrder
    authorAcc?: SortOrder
    createDate?: SortOrder
    status?: SortOrder
    url?: SortOrder
    identifier?: SortOrder
    encelopeId?: SortOrder
  }

  export type WishesMessagesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WishesMessagesMaxOrderByAggregateInput = {
    id?: SortOrder
    authorAcc?: SortOrder
    createDate?: SortOrder
    status?: SortOrder
    url?: SortOrder
    identifier?: SortOrder
    encelopeId?: SortOrder
  }

  export type WishesMessagesMinOrderByAggregateInput = {
    id?: SortOrder
    authorAcc?: SortOrder
    createDate?: SortOrder
    status?: SortOrder
    url?: SortOrder
    identifier?: SortOrder
    encelopeId?: SortOrder
  }

  export type WishesMessagesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DeletionsCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type DeletionsAvgOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type DeletionsMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type DeletionsMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type DeletionsSumOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
  }

  export type doubleFactorCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    attemptDate?: SortOrder
    code?: SortOrder
    status?: SortOrder
  }

  export type doubleFactorMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    attemptDate?: SortOrder
    code?: SortOrder
    status?: SortOrder
  }

  export type doubleFactorMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    attemptDate?: SortOrder
    code?: SortOrder
    status?: SortOrder
  }

  export type suscriptionsCatalogueCountOrderByAggregateInput = {
    id?: SortOrder
    planName?: SortOrder
    planprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
  }

  export type suscriptionsCatalogueAvgOrderByAggregateInput = {
    id?: SortOrder
    planprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
  }

  export type suscriptionsCatalogueMaxOrderByAggregateInput = {
    id?: SortOrder
    planName?: SortOrder
    planprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
  }

  export type suscriptionsCatalogueMinOrderByAggregateInput = {
    id?: SortOrder
    planName?: SortOrder
    planprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
  }

  export type suscriptionsCatalogueSumOrderByAggregateInput = {
    id?: SortOrder
    planprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type SuscriptionsCatalogueRelationFilter = {
    is?: suscriptionsCatalogueWhereInput | null
    isNot?: suscriptionsCatalogueWhereInput | null
  }

  export type usersSuscriptionsCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    suscriptionType?: SortOrder
    suscriptionDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
  }

  export type usersSuscriptionsAvgOrderByAggregateInput = {
    authorId?: SortOrder
    suscriptionType?: SortOrder
    paymentAmount?: SortOrder
  }

  export type usersSuscriptionsMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    suscriptionType?: SortOrder
    suscriptionDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
  }

  export type usersSuscriptionsMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    suscriptionType?: SortOrder
    suscriptionDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
  }

  export type usersSuscriptionsSumOrderByAggregateInput = {
    authorId?: SortOrder
    suscriptionType?: SortOrder
    paymentAmount?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type addOnsCatalogueCountOrderByAggregateInput = {
    id?: SortOrder
    addOnName?: SortOrder
    addOnprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
  }

  export type addOnsCatalogueAvgOrderByAggregateInput = {
    id?: SortOrder
    addOnprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
  }

  export type addOnsCatalogueMaxOrderByAggregateInput = {
    id?: SortOrder
    addOnName?: SortOrder
    addOnprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
  }

  export type addOnsCatalogueMinOrderByAggregateInput = {
    id?: SortOrder
    addOnName?: SortOrder
    addOnprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    patrimonial?: SortOrder
    funeralWill?: SortOrder
    remains?: SortOrder
    organs?: SortOrder
    health?: SortOrder
    dependants?: SortOrder
    pets?: SortOrder
    accounts?: SortOrder
    vault?: SortOrder
    familyHub?: SortOrder
    support?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
    status?: SortOrder
  }

  export type addOnsCatalogueSumOrderByAggregateInput = {
    id?: SortOrder
    addOnprice?: SortOrder
    allowedNfts?: SortOrder
    storage?: SortOrder
    document?: SortOrder
    whoToInform?: SortOrder
    daysOfGrace?: SortOrder
    daysToExpire?: SortOrder
  }

  export type AddOnsCatalogueRelationFilter = {
    is?: addOnsCatalogueWhereInput | null
    isNot?: addOnsCatalogueWhereInput | null
  }

  export type usersAddOnsCountOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    addOnType?: SortOrder
    addOnDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
  }

  export type usersAddOnsAvgOrderByAggregateInput = {
    authorId?: SortOrder
    addOnType?: SortOrder
    paymentAmount?: SortOrder
  }

  export type usersAddOnsMaxOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    addOnType?: SortOrder
    addOnDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
  }

  export type usersAddOnsMinOrderByAggregateInput = {
    id?: SortOrder
    authorId?: SortOrder
    addOnType?: SortOrder
    addOnDate?: SortOrder
    paymentDate?: SortOrder
    expireDate?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentGateway?: SortOrder
    paymentAmount?: SortOrder
  }

  export type usersAddOnsSumOrderByAggregateInput = {
    authorId?: SortOrder
    addOnType?: SortOrder
    paymentAmount?: SortOrder
  }

  export type referalsCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    suscription?: SortOrder
    status?: SortOrder
  }

  export type referalsAvgOrderByAggregateInput = {
    suscription?: SortOrder
  }

  export type referalsMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    suscription?: SortOrder
    status?: SortOrder
  }

  export type referalsMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    suscription?: SortOrder
    status?: SortOrder
  }

  export type referalsSumOrderByAggregateInput = {
    suscription?: SortOrder
  }

  export type pushNotificationsCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    link?: SortOrder
  }

  export type pushNotificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    link?: SortOrder
  }

  export type pushNotificationsMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    link?: SortOrder
  }

  export type MessageCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<MessageCreateWithoutAuthorInput>, Enumerable<MessageUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutAuthorInput>
    createMany?: MessageCreateManyAuthorInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type ContactCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ContactCreateWithoutAuthorInput>, Enumerable<ContactUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutAuthorInput>
    createMany?: ContactCreateManyAuthorInputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
  }

  export type MessageStatusCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutAuthorInput>, Enumerable<MessageStatusUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutAuthorInput>
    createMany?: MessageStatusCreateManyAuthorInputEnvelope
    connect?: Enumerable<MessageStatusWhereUniqueInput>
  }

  export type usersSuscriptionsCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<usersSuscriptionsCreateWithoutAuthorInput>, Enumerable<usersSuscriptionsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<usersSuscriptionsCreateOrConnectWithoutAuthorInput>
    createMany?: usersSuscriptionsCreateManyAuthorInputEnvelope
    connect?: Enumerable<usersSuscriptionsWhereUniqueInput>
  }

  export type usersAddOnsCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<usersAddOnsCreateWithoutAuthorInput>, Enumerable<usersAddOnsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<usersAddOnsCreateOrConnectWithoutAuthorInput>
    createMany?: usersAddOnsCreateManyAuthorInputEnvelope
    connect?: Enumerable<usersAddOnsWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<MessageCreateWithoutAuthorInput>, Enumerable<MessageUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutAuthorInput>
    createMany?: MessageCreateManyAuthorInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type ContactUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ContactCreateWithoutAuthorInput>, Enumerable<ContactUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutAuthorInput>
    createMany?: ContactCreateManyAuthorInputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
  }

  export type MessageStatusUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutAuthorInput>, Enumerable<MessageStatusUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutAuthorInput>
    createMany?: MessageStatusCreateManyAuthorInputEnvelope
    connect?: Enumerable<MessageStatusWhereUniqueInput>
  }

  export type usersSuscriptionsUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<usersSuscriptionsCreateWithoutAuthorInput>, Enumerable<usersSuscriptionsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<usersSuscriptionsCreateOrConnectWithoutAuthorInput>
    createMany?: usersSuscriptionsCreateManyAuthorInputEnvelope
    connect?: Enumerable<usersSuscriptionsWhereUniqueInput>
  }

  export type usersAddOnsUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<usersAddOnsCreateWithoutAuthorInput>, Enumerable<usersAddOnsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<usersAddOnsCreateOrConnectWithoutAuthorInput>
    createMany?: usersAddOnsCreateManyAuthorInputEnvelope
    connect?: Enumerable<usersAddOnsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type MessageUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutAuthorInput>, Enumerable<MessageUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: MessageCreateManyAuthorInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type ContactUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<ContactCreateWithoutAuthorInput>, Enumerable<ContactUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ContactCreateManyAuthorInputEnvelope
    set?: Enumerable<ContactWhereUniqueInput>
    disconnect?: Enumerable<ContactWhereUniqueInput>
    delete?: Enumerable<ContactWhereUniqueInput>
    connect?: Enumerable<ContactWhereUniqueInput>
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ContactScalarWhereInput>
  }

  export type MessageStatusUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutAuthorInput>, Enumerable<MessageStatusUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<MessageStatusUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: MessageStatusCreateManyAuthorInputEnvelope
    set?: Enumerable<MessageStatusWhereUniqueInput>
    disconnect?: Enumerable<MessageStatusWhereUniqueInput>
    delete?: Enumerable<MessageStatusWhereUniqueInput>
    connect?: Enumerable<MessageStatusWhereUniqueInput>
    update?: Enumerable<MessageStatusUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<MessageStatusUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<MessageStatusScalarWhereInput>
  }

  export type usersSuscriptionsUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<usersSuscriptionsCreateWithoutAuthorInput>, Enumerable<usersSuscriptionsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<usersSuscriptionsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<usersSuscriptionsUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: usersSuscriptionsCreateManyAuthorInputEnvelope
    set?: Enumerable<usersSuscriptionsWhereUniqueInput>
    disconnect?: Enumerable<usersSuscriptionsWhereUniqueInput>
    delete?: Enumerable<usersSuscriptionsWhereUniqueInput>
    connect?: Enumerable<usersSuscriptionsWhereUniqueInput>
    update?: Enumerable<usersSuscriptionsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<usersSuscriptionsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<usersSuscriptionsScalarWhereInput>
  }

  export type usersAddOnsUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<usersAddOnsCreateWithoutAuthorInput>, Enumerable<usersAddOnsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<usersAddOnsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<usersAddOnsUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: usersAddOnsCreateManyAuthorInputEnvelope
    set?: Enumerable<usersAddOnsWhereUniqueInput>
    disconnect?: Enumerable<usersAddOnsWhereUniqueInput>
    delete?: Enumerable<usersAddOnsWhereUniqueInput>
    connect?: Enumerable<usersAddOnsWhereUniqueInput>
    update?: Enumerable<usersAddOnsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<usersAddOnsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<usersAddOnsScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutAuthorInput>, Enumerable<MessageUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: MessageCreateManyAuthorInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type ContactUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<ContactCreateWithoutAuthorInput>, Enumerable<ContactUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ContactCreateManyAuthorInputEnvelope
    set?: Enumerable<ContactWhereUniqueInput>
    disconnect?: Enumerable<ContactWhereUniqueInput>
    delete?: Enumerable<ContactWhereUniqueInput>
    connect?: Enumerable<ContactWhereUniqueInput>
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ContactScalarWhereInput>
  }

  export type MessageStatusUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutAuthorInput>, Enumerable<MessageStatusUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<MessageStatusUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: MessageStatusCreateManyAuthorInputEnvelope
    set?: Enumerable<MessageStatusWhereUniqueInput>
    disconnect?: Enumerable<MessageStatusWhereUniqueInput>
    delete?: Enumerable<MessageStatusWhereUniqueInput>
    connect?: Enumerable<MessageStatusWhereUniqueInput>
    update?: Enumerable<MessageStatusUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<MessageStatusUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<MessageStatusScalarWhereInput>
  }

  export type usersSuscriptionsUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<usersSuscriptionsCreateWithoutAuthorInput>, Enumerable<usersSuscriptionsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<usersSuscriptionsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<usersSuscriptionsUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: usersSuscriptionsCreateManyAuthorInputEnvelope
    set?: Enumerable<usersSuscriptionsWhereUniqueInput>
    disconnect?: Enumerable<usersSuscriptionsWhereUniqueInput>
    delete?: Enumerable<usersSuscriptionsWhereUniqueInput>
    connect?: Enumerable<usersSuscriptionsWhereUniqueInput>
    update?: Enumerable<usersSuscriptionsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<usersSuscriptionsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<usersSuscriptionsScalarWhereInput>
  }

  export type usersAddOnsUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<usersAddOnsCreateWithoutAuthorInput>, Enumerable<usersAddOnsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<usersAddOnsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<usersAddOnsUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: usersAddOnsCreateManyAuthorInputEnvelope
    set?: Enumerable<usersAddOnsWhereUniqueInput>
    disconnect?: Enumerable<usersAddOnsWhereUniqueInput>
    delete?: Enumerable<usersAddOnsWhereUniqueInput>
    connect?: Enumerable<usersAddOnsWhereUniqueInput>
    update?: Enumerable<usersAddOnsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<usersAddOnsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<usersAddOnsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutMessageInput = {
    create?: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageInput
    connect?: UserWhereUniqueInput
  }

  export type ContactCreateNestedOneWithoutMessageInput = {
    create?: XOR<ContactCreateWithoutMessageInput, ContactUncheckedCreateWithoutMessageInput>
    connectOrCreate?: ContactCreateOrConnectWithoutMessageInput
    connect?: ContactWhereUniqueInput
  }

  export type MessageStatusCreateNestedManyWithoutMessageInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutMessageInput>, Enumerable<MessageStatusUncheckedCreateWithoutMessageInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutMessageInput>
    createMany?: MessageStatusCreateManyMessageInputEnvelope
    connect?: Enumerable<MessageStatusWhereUniqueInput>
  }

  export type MessageStatusUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutMessageInput>, Enumerable<MessageStatusUncheckedCreateWithoutMessageInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutMessageInput>
    createMany?: MessageStatusCreateManyMessageInputEnvelope
    connect?: Enumerable<MessageStatusWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutMessageNestedInput = {
    create?: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageInput
    upsert?: UserUpsertWithoutMessageInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMessageInput, UserUncheckedUpdateWithoutMessageInput>
  }

  export type ContactUpdateOneRequiredWithoutMessageNestedInput = {
    create?: XOR<ContactCreateWithoutMessageInput, ContactUncheckedCreateWithoutMessageInput>
    connectOrCreate?: ContactCreateOrConnectWithoutMessageInput
    upsert?: ContactUpsertWithoutMessageInput
    connect?: ContactWhereUniqueInput
    update?: XOR<ContactUpdateWithoutMessageInput, ContactUncheckedUpdateWithoutMessageInput>
  }

  export type MessageStatusUpdateManyWithoutMessageNestedInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutMessageInput>, Enumerable<MessageStatusUncheckedCreateWithoutMessageInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutMessageInput>
    upsert?: Enumerable<MessageStatusUpsertWithWhereUniqueWithoutMessageInput>
    createMany?: MessageStatusCreateManyMessageInputEnvelope
    set?: Enumerable<MessageStatusWhereUniqueInput>
    disconnect?: Enumerable<MessageStatusWhereUniqueInput>
    delete?: Enumerable<MessageStatusWhereUniqueInput>
    connect?: Enumerable<MessageStatusWhereUniqueInput>
    update?: Enumerable<MessageStatusUpdateWithWhereUniqueWithoutMessageInput>
    updateMany?: Enumerable<MessageStatusUpdateManyWithWhereWithoutMessageInput>
    deleteMany?: Enumerable<MessageStatusScalarWhereInput>
  }

  export type MessageStatusUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutMessageInput>, Enumerable<MessageStatusUncheckedCreateWithoutMessageInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutMessageInput>
    upsert?: Enumerable<MessageStatusUpsertWithWhereUniqueWithoutMessageInput>
    createMany?: MessageStatusCreateManyMessageInputEnvelope
    set?: Enumerable<MessageStatusWhereUniqueInput>
    disconnect?: Enumerable<MessageStatusWhereUniqueInput>
    delete?: Enumerable<MessageStatusWhereUniqueInput>
    connect?: Enumerable<MessageStatusWhereUniqueInput>
    update?: Enumerable<MessageStatusUpdateWithWhereUniqueWithoutMessageInput>
    updateMany?: Enumerable<MessageStatusUpdateManyWithWhereWithoutMessageInput>
    deleteMany?: Enumerable<MessageStatusScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutMessageStatusInput = {
    create?: XOR<UserCreateWithoutMessageStatusInput, UserUncheckedCreateWithoutMessageStatusInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageStatusInput
    connect?: UserWhereUniqueInput
  }

  export type ContactCreateNestedOneWithoutMessageStatusInput = {
    create?: XOR<ContactCreateWithoutMessageStatusInput, ContactUncheckedCreateWithoutMessageStatusInput>
    connectOrCreate?: ContactCreateOrConnectWithoutMessageStatusInput
    connect?: ContactWhereUniqueInput
  }

  export type MessageCreateNestedOneWithoutMessageStatusInput = {
    create?: XOR<MessageCreateWithoutMessageStatusInput, MessageUncheckedCreateWithoutMessageStatusInput>
    connectOrCreate?: MessageCreateOrConnectWithoutMessageStatusInput
    connect?: MessageWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessageStatusNestedInput = {
    create?: XOR<UserCreateWithoutMessageStatusInput, UserUncheckedCreateWithoutMessageStatusInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageStatusInput
    upsert?: UserUpsertWithoutMessageStatusInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMessageStatusInput, UserUncheckedUpdateWithoutMessageStatusInput>
  }

  export type ContactUpdateOneRequiredWithoutMessageStatusNestedInput = {
    create?: XOR<ContactCreateWithoutMessageStatusInput, ContactUncheckedCreateWithoutMessageStatusInput>
    connectOrCreate?: ContactCreateOrConnectWithoutMessageStatusInput
    upsert?: ContactUpsertWithoutMessageStatusInput
    connect?: ContactWhereUniqueInput
    update?: XOR<ContactUpdateWithoutMessageStatusInput, ContactUncheckedUpdateWithoutMessageStatusInput>
  }

  export type MessageUpdateOneRequiredWithoutMessageStatusNestedInput = {
    create?: XOR<MessageCreateWithoutMessageStatusInput, MessageUncheckedCreateWithoutMessageStatusInput>
    connectOrCreate?: MessageCreateOrConnectWithoutMessageStatusInput
    upsert?: MessageUpsertWithoutMessageStatusInput
    connect?: MessageWhereUniqueInput
    update?: XOR<MessageUpdateWithoutMessageStatusInput, MessageUncheckedUpdateWithoutMessageStatusInput>
  }

  export type UserCreateNestedOneWithoutContactInput = {
    create?: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactInput
    connect?: UserWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutContactInput = {
    create?: XOR<Enumerable<MessageCreateWithoutContactInput>, Enumerable<MessageUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutContactInput>
    createMany?: MessageCreateManyContactInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type MessageStatusCreateNestedManyWithoutContactInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutContactInput>, Enumerable<MessageStatusUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutContactInput>
    createMany?: MessageStatusCreateManyContactInputEnvelope
    connect?: Enumerable<MessageStatusWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutContactInput = {
    create?: XOR<Enumerable<MessageCreateWithoutContactInput>, Enumerable<MessageUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutContactInput>
    createMany?: MessageCreateManyContactInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type MessageStatusUncheckedCreateNestedManyWithoutContactInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutContactInput>, Enumerable<MessageStatusUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutContactInput>
    createMany?: MessageStatusCreateManyContactInputEnvelope
    connect?: Enumerable<MessageStatusWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutContactNestedInput = {
    create?: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactInput
    upsert?: UserUpsertWithoutContactInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutContactInput, UserUncheckedUpdateWithoutContactInput>
  }

  export type MessageUpdateManyWithoutContactNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutContactInput>, Enumerable<MessageUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutContactInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutContactInput>
    createMany?: MessageCreateManyContactInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutContactInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutContactInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type MessageStatusUpdateManyWithoutContactNestedInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutContactInput>, Enumerable<MessageStatusUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutContactInput>
    upsert?: Enumerable<MessageStatusUpsertWithWhereUniqueWithoutContactInput>
    createMany?: MessageStatusCreateManyContactInputEnvelope
    set?: Enumerable<MessageStatusWhereUniqueInput>
    disconnect?: Enumerable<MessageStatusWhereUniqueInput>
    delete?: Enumerable<MessageStatusWhereUniqueInput>
    connect?: Enumerable<MessageStatusWhereUniqueInput>
    update?: Enumerable<MessageStatusUpdateWithWhereUniqueWithoutContactInput>
    updateMany?: Enumerable<MessageStatusUpdateManyWithWhereWithoutContactInput>
    deleteMany?: Enumerable<MessageStatusScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutContactNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutContactInput>, Enumerable<MessageUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutContactInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutContactInput>
    createMany?: MessageCreateManyContactInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutContactInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutContactInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type MessageStatusUncheckedUpdateManyWithoutContactNestedInput = {
    create?: XOR<Enumerable<MessageStatusCreateWithoutContactInput>, Enumerable<MessageStatusUncheckedCreateWithoutContactInput>>
    connectOrCreate?: Enumerable<MessageStatusCreateOrConnectWithoutContactInput>
    upsert?: Enumerable<MessageStatusUpsertWithWhereUniqueWithoutContactInput>
    createMany?: MessageStatusCreateManyContactInputEnvelope
    set?: Enumerable<MessageStatusWhereUniqueInput>
    disconnect?: Enumerable<MessageStatusWhereUniqueInput>
    delete?: Enumerable<MessageStatusWhereUniqueInput>
    connect?: Enumerable<MessageStatusWhereUniqueInput>
    update?: Enumerable<MessageStatusUpdateWithWhereUniqueWithoutContactInput>
    updateMany?: Enumerable<MessageStatusUpdateManyWithWhereWithoutContactInput>
    deleteMany?: Enumerable<MessageStatusScalarWhereInput>
  }

  export type usersSuscriptionsCreateNestedManyWithoutSuscriptionInput = {
    create?: XOR<Enumerable<usersSuscriptionsCreateWithoutSuscriptionInput>, Enumerable<usersSuscriptionsUncheckedCreateWithoutSuscriptionInput>>
    connectOrCreate?: Enumerable<usersSuscriptionsCreateOrConnectWithoutSuscriptionInput>
    createMany?: usersSuscriptionsCreateManySuscriptionInputEnvelope
    connect?: Enumerable<usersSuscriptionsWhereUniqueInput>
  }

  export type usersSuscriptionsUncheckedCreateNestedManyWithoutSuscriptionInput = {
    create?: XOR<Enumerable<usersSuscriptionsCreateWithoutSuscriptionInput>, Enumerable<usersSuscriptionsUncheckedCreateWithoutSuscriptionInput>>
    connectOrCreate?: Enumerable<usersSuscriptionsCreateOrConnectWithoutSuscriptionInput>
    createMany?: usersSuscriptionsCreateManySuscriptionInputEnvelope
    connect?: Enumerable<usersSuscriptionsWhereUniqueInput>
  }

  export type usersSuscriptionsUpdateManyWithoutSuscriptionNestedInput = {
    create?: XOR<Enumerable<usersSuscriptionsCreateWithoutSuscriptionInput>, Enumerable<usersSuscriptionsUncheckedCreateWithoutSuscriptionInput>>
    connectOrCreate?: Enumerable<usersSuscriptionsCreateOrConnectWithoutSuscriptionInput>
    upsert?: Enumerable<usersSuscriptionsUpsertWithWhereUniqueWithoutSuscriptionInput>
    createMany?: usersSuscriptionsCreateManySuscriptionInputEnvelope
    set?: Enumerable<usersSuscriptionsWhereUniqueInput>
    disconnect?: Enumerable<usersSuscriptionsWhereUniqueInput>
    delete?: Enumerable<usersSuscriptionsWhereUniqueInput>
    connect?: Enumerable<usersSuscriptionsWhereUniqueInput>
    update?: Enumerable<usersSuscriptionsUpdateWithWhereUniqueWithoutSuscriptionInput>
    updateMany?: Enumerable<usersSuscriptionsUpdateManyWithWhereWithoutSuscriptionInput>
    deleteMany?: Enumerable<usersSuscriptionsScalarWhereInput>
  }

  export type usersSuscriptionsUncheckedUpdateManyWithoutSuscriptionNestedInput = {
    create?: XOR<Enumerable<usersSuscriptionsCreateWithoutSuscriptionInput>, Enumerable<usersSuscriptionsUncheckedCreateWithoutSuscriptionInput>>
    connectOrCreate?: Enumerable<usersSuscriptionsCreateOrConnectWithoutSuscriptionInput>
    upsert?: Enumerable<usersSuscriptionsUpsertWithWhereUniqueWithoutSuscriptionInput>
    createMany?: usersSuscriptionsCreateManySuscriptionInputEnvelope
    set?: Enumerable<usersSuscriptionsWhereUniqueInput>
    disconnect?: Enumerable<usersSuscriptionsWhereUniqueInput>
    delete?: Enumerable<usersSuscriptionsWhereUniqueInput>
    connect?: Enumerable<usersSuscriptionsWhereUniqueInput>
    update?: Enumerable<usersSuscriptionsUpdateWithWhereUniqueWithoutSuscriptionInput>
    updateMany?: Enumerable<usersSuscriptionsUpdateManyWithWhereWithoutSuscriptionInput>
    deleteMany?: Enumerable<usersSuscriptionsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUsersSuscriptionsInput = {
    create?: XOR<UserCreateWithoutUsersSuscriptionsInput, UserUncheckedCreateWithoutUsersSuscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsersSuscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type suscriptionsCatalogueCreateNestedOneWithoutUsersSuscriptionsInput = {
    create?: XOR<suscriptionsCatalogueCreateWithoutUsersSuscriptionsInput, suscriptionsCatalogueUncheckedCreateWithoutUsersSuscriptionsInput>
    connectOrCreate?: suscriptionsCatalogueCreateOrConnectWithoutUsersSuscriptionsInput
    connect?: suscriptionsCatalogueWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutUsersSuscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutUsersSuscriptionsInput, UserUncheckedCreateWithoutUsersSuscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsersSuscriptionsInput
    upsert?: UserUpsertWithoutUsersSuscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUsersSuscriptionsInput, UserUncheckedUpdateWithoutUsersSuscriptionsInput>
  }

  export type suscriptionsCatalogueUpdateOneRequiredWithoutUsersSuscriptionsNestedInput = {
    create?: XOR<suscriptionsCatalogueCreateWithoutUsersSuscriptionsInput, suscriptionsCatalogueUncheckedCreateWithoutUsersSuscriptionsInput>
    connectOrCreate?: suscriptionsCatalogueCreateOrConnectWithoutUsersSuscriptionsInput
    upsert?: suscriptionsCatalogueUpsertWithoutUsersSuscriptionsInput
    connect?: suscriptionsCatalogueWhereUniqueInput
    update?: XOR<suscriptionsCatalogueUpdateWithoutUsersSuscriptionsInput, suscriptionsCatalogueUncheckedUpdateWithoutUsersSuscriptionsInput>
  }

  export type usersAddOnsCreateNestedManyWithoutSuscriptionInput = {
    create?: XOR<Enumerable<usersAddOnsCreateWithoutSuscriptionInput>, Enumerable<usersAddOnsUncheckedCreateWithoutSuscriptionInput>>
    connectOrCreate?: Enumerable<usersAddOnsCreateOrConnectWithoutSuscriptionInput>
    createMany?: usersAddOnsCreateManySuscriptionInputEnvelope
    connect?: Enumerable<usersAddOnsWhereUniqueInput>
  }

  export type usersAddOnsUncheckedCreateNestedManyWithoutSuscriptionInput = {
    create?: XOR<Enumerable<usersAddOnsCreateWithoutSuscriptionInput>, Enumerable<usersAddOnsUncheckedCreateWithoutSuscriptionInput>>
    connectOrCreate?: Enumerable<usersAddOnsCreateOrConnectWithoutSuscriptionInput>
    createMany?: usersAddOnsCreateManySuscriptionInputEnvelope
    connect?: Enumerable<usersAddOnsWhereUniqueInput>
  }

  export type usersAddOnsUpdateManyWithoutSuscriptionNestedInput = {
    create?: XOR<Enumerable<usersAddOnsCreateWithoutSuscriptionInput>, Enumerable<usersAddOnsUncheckedCreateWithoutSuscriptionInput>>
    connectOrCreate?: Enumerable<usersAddOnsCreateOrConnectWithoutSuscriptionInput>
    upsert?: Enumerable<usersAddOnsUpsertWithWhereUniqueWithoutSuscriptionInput>
    createMany?: usersAddOnsCreateManySuscriptionInputEnvelope
    set?: Enumerable<usersAddOnsWhereUniqueInput>
    disconnect?: Enumerable<usersAddOnsWhereUniqueInput>
    delete?: Enumerable<usersAddOnsWhereUniqueInput>
    connect?: Enumerable<usersAddOnsWhereUniqueInput>
    update?: Enumerable<usersAddOnsUpdateWithWhereUniqueWithoutSuscriptionInput>
    updateMany?: Enumerable<usersAddOnsUpdateManyWithWhereWithoutSuscriptionInput>
    deleteMany?: Enumerable<usersAddOnsScalarWhereInput>
  }

  export type usersAddOnsUncheckedUpdateManyWithoutSuscriptionNestedInput = {
    create?: XOR<Enumerable<usersAddOnsCreateWithoutSuscriptionInput>, Enumerable<usersAddOnsUncheckedCreateWithoutSuscriptionInput>>
    connectOrCreate?: Enumerable<usersAddOnsCreateOrConnectWithoutSuscriptionInput>
    upsert?: Enumerable<usersAddOnsUpsertWithWhereUniqueWithoutSuscriptionInput>
    createMany?: usersAddOnsCreateManySuscriptionInputEnvelope
    set?: Enumerable<usersAddOnsWhereUniqueInput>
    disconnect?: Enumerable<usersAddOnsWhereUniqueInput>
    delete?: Enumerable<usersAddOnsWhereUniqueInput>
    connect?: Enumerable<usersAddOnsWhereUniqueInput>
    update?: Enumerable<usersAddOnsUpdateWithWhereUniqueWithoutSuscriptionInput>
    updateMany?: Enumerable<usersAddOnsUpdateManyWithWhereWithoutSuscriptionInput>
    deleteMany?: Enumerable<usersAddOnsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUsersAddOnsInput = {
    create?: XOR<UserCreateWithoutUsersAddOnsInput, UserUncheckedCreateWithoutUsersAddOnsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsersAddOnsInput
    connect?: UserWhereUniqueInput
  }

  export type addOnsCatalogueCreateNestedOneWithoutUsersAddOnsInput = {
    create?: XOR<addOnsCatalogueCreateWithoutUsersAddOnsInput, addOnsCatalogueUncheckedCreateWithoutUsersAddOnsInput>
    connectOrCreate?: addOnsCatalogueCreateOrConnectWithoutUsersAddOnsInput
    connect?: addOnsCatalogueWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUsersAddOnsNestedInput = {
    create?: XOR<UserCreateWithoutUsersAddOnsInput, UserUncheckedCreateWithoutUsersAddOnsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsersAddOnsInput
    upsert?: UserUpsertWithoutUsersAddOnsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUsersAddOnsInput, UserUncheckedUpdateWithoutUsersAddOnsInput>
  }

  export type addOnsCatalogueUpdateOneRequiredWithoutUsersAddOnsNestedInput = {
    create?: XOR<addOnsCatalogueCreateWithoutUsersAddOnsInput, addOnsCatalogueUncheckedCreateWithoutUsersAddOnsInput>
    connectOrCreate?: addOnsCatalogueCreateOrConnectWithoutUsersAddOnsInput
    upsert?: addOnsCatalogueUpsertWithoutUsersAddOnsInput
    connect?: addOnsCatalogueWhereUniqueInput
    update?: XOR<addOnsCatalogueUpdateWithoutUsersAddOnsInput, addOnsCatalogueUncheckedUpdateWithoutUsersAddOnsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type MessageCreateWithoutAuthorInput = {
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
    contact: ContactCreateNestedOneWithoutMessageInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutAuthorInput = {
    id?: number
    contactId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput>
  }

  export type MessageCreateManyAuthorInputEnvelope = {
    data: Enumerable<MessageCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutAuthorInput = {
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
    Message?: MessageCreateNestedManyWithoutContactInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutAuthorInput = {
    id?: number
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
    Message?: MessageUncheckedCreateNestedManyWithoutContactInput
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutAuthorInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutAuthorInput, ContactUncheckedCreateWithoutAuthorInput>
  }

  export type ContactCreateManyAuthorInputEnvelope = {
    data: Enumerable<ContactCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type MessageStatusCreateWithoutAuthorInput = {
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
    contact: ContactCreateNestedOneWithoutMessageStatusInput
    message: MessageCreateNestedOneWithoutMessageStatusInput
  }

  export type MessageStatusUncheckedCreateWithoutAuthorInput = {
    id?: number
    contactId: number
    messageId: number
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
  }

  export type MessageStatusCreateOrConnectWithoutAuthorInput = {
    where: MessageStatusWhereUniqueInput
    create: XOR<MessageStatusCreateWithoutAuthorInput, MessageStatusUncheckedCreateWithoutAuthorInput>
  }

  export type MessageStatusCreateManyAuthorInputEnvelope = {
    data: Enumerable<MessageStatusCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type usersSuscriptionsCreateWithoutAuthorInput = {
    id?: string
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
    suscription: suscriptionsCatalogueCreateNestedOneWithoutUsersSuscriptionsInput
  }

  export type usersSuscriptionsUncheckedCreateWithoutAuthorInput = {
    id?: string
    suscriptionType: number
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersSuscriptionsCreateOrConnectWithoutAuthorInput = {
    where: usersSuscriptionsWhereUniqueInput
    create: XOR<usersSuscriptionsCreateWithoutAuthorInput, usersSuscriptionsUncheckedCreateWithoutAuthorInput>
  }

  export type usersSuscriptionsCreateManyAuthorInputEnvelope = {
    data: Enumerable<usersSuscriptionsCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type usersAddOnsCreateWithoutAuthorInput = {
    id?: string
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
    suscription: addOnsCatalogueCreateNestedOneWithoutUsersAddOnsInput
  }

  export type usersAddOnsUncheckedCreateWithoutAuthorInput = {
    id?: string
    addOnType: number
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersAddOnsCreateOrConnectWithoutAuthorInput = {
    where: usersAddOnsWhereUniqueInput
    create: XOR<usersAddOnsCreateWithoutAuthorInput, usersAddOnsUncheckedCreateWithoutAuthorInput>
  }

  export type usersAddOnsCreateManyAuthorInputEnvelope = {
    data: Enumerable<usersAddOnsCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutAuthorInput, MessageUncheckedUpdateWithoutAuthorInput>
    create: XOR<MessageCreateWithoutAuthorInput, MessageUncheckedCreateWithoutAuthorInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutAuthorInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutAuthorInput, MessageUncheckedUpdateWithoutAuthorInput>
  }

  export type MessageUpdateManyWithWhereWithoutAuthorInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageScalarWhereInput = {
    AND?: Enumerable<MessageScalarWhereInput>
    OR?: Enumerable<MessageScalarWhereInput>
    NOT?: Enumerable<MessageScalarWhereInput>
    id?: IntFilter | number
    authorId?: IntFilter | number
    contactId?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    urlMultimedia?: StringFilter | string
    multimediaType?: StringFilter | string
    multimediaMeta?: StringFilter | string
    thumbnailUrl?: StringFilter | string
    lifeState?: StringFilter | string
    status?: StringFilter | string
    isSend?: BoolFilter | boolean
    mediaType?: BoolFilter | boolean
    createDate?: StringFilter | string
    createDateV2?: DateTimeFilter | Date | string
    editDate?: StringFilter | string
    editDateV2?: DateTimeFilter | Date | string
    programDate?: StringFilter | string
    programDateV2?: DateTimeFilter | Date | string
    urlNft?: StringFilter | string
    isNfts?: BoolFilter | boolean
    idNft?: StringFilter | string
    statsId?: StringFilter | string
    folder?: StringFilter | string
    chain?: StringFilter | string
    estandar?: StringFilter | string
    whatsapp?: BoolFilter | boolean
    email?: BoolFilter | boolean
    maxhastriest?: IntFilter | number
    maxconfirmtries?: IntFilter | number
    uuid?: StringFilter | string
  }

  export type ContactUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutAuthorInput, ContactUncheckedUpdateWithoutAuthorInput>
    create: XOR<ContactCreateWithoutAuthorInput, ContactUncheckedCreateWithoutAuthorInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutAuthorInput, ContactUncheckedUpdateWithoutAuthorInput>
  }

  export type ContactUpdateManyWithWhereWithoutAuthorInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutContactInput>
  }

  export type ContactScalarWhereInput = {
    AND?: Enumerable<ContactScalarWhereInput>
    OR?: Enumerable<ContactScalarWhereInput>
    NOT?: Enumerable<ContactScalarWhereInput>
    id?: IntFilter | number
    authorId?: IntFilter | number
    photoUrl?: StringFilter | string
    name?: StringFilter | string
    fatherLastName?: StringFilter | string
    motherLastName?: StringFilter | string
    relation?: StringFilter | string
    email?: StringFilter | string
    typeContact?: StringFilter | string
    phoneNumber?: StringFilter | string
    phoneNumberCountry?: StringFilter | string
    birthDate?: StringFilter | string
    birthDateV2?: DateTimeFilter | Date | string
    notes?: StringFilter | string
    trusted?: BoolFilter | boolean
    hidden?: BoolFilter | boolean
  }

  export type MessageStatusUpsertWithWhereUniqueWithoutAuthorInput = {
    where: MessageStatusWhereUniqueInput
    update: XOR<MessageStatusUpdateWithoutAuthorInput, MessageStatusUncheckedUpdateWithoutAuthorInput>
    create: XOR<MessageStatusCreateWithoutAuthorInput, MessageStatusUncheckedCreateWithoutAuthorInput>
  }

  export type MessageStatusUpdateWithWhereUniqueWithoutAuthorInput = {
    where: MessageStatusWhereUniqueInput
    data: XOR<MessageStatusUpdateWithoutAuthorInput, MessageStatusUncheckedUpdateWithoutAuthorInput>
  }

  export type MessageStatusUpdateManyWithWhereWithoutAuthorInput = {
    where: MessageStatusScalarWhereInput
    data: XOR<MessageStatusUpdateManyMutationInput, MessageStatusUncheckedUpdateManyWithoutMessageStatusInput>
  }

  export type MessageStatusScalarWhereInput = {
    AND?: Enumerable<MessageStatusScalarWhereInput>
    OR?: Enumerable<MessageStatusScalarWhereInput>
    NOT?: Enumerable<MessageStatusScalarWhereInput>
    id?: IntFilter | number
    authorId?: IntFilter | number
    contactId?: IntFilter | number
    messageId?: IntFilter | number
    status?: StringFilter | string
    programDate?: StringFilter | string
    programDateV2?: DateTimeFilter | Date | string
    data?: JsonFilter
    urlId?: IntFilter | number
    messageError?: StringFilter | string
  }

  export type usersSuscriptionsUpsertWithWhereUniqueWithoutAuthorInput = {
    where: usersSuscriptionsWhereUniqueInput
    update: XOR<usersSuscriptionsUpdateWithoutAuthorInput, usersSuscriptionsUncheckedUpdateWithoutAuthorInput>
    create: XOR<usersSuscriptionsCreateWithoutAuthorInput, usersSuscriptionsUncheckedCreateWithoutAuthorInput>
  }

  export type usersSuscriptionsUpdateWithWhereUniqueWithoutAuthorInput = {
    where: usersSuscriptionsWhereUniqueInput
    data: XOR<usersSuscriptionsUpdateWithoutAuthorInput, usersSuscriptionsUncheckedUpdateWithoutAuthorInput>
  }

  export type usersSuscriptionsUpdateManyWithWhereWithoutAuthorInput = {
    where: usersSuscriptionsScalarWhereInput
    data: XOR<usersSuscriptionsUpdateManyMutationInput, usersSuscriptionsUncheckedUpdateManyWithoutUsersSuscriptionsInput>
  }

  export type usersSuscriptionsScalarWhereInput = {
    AND?: Enumerable<usersSuscriptionsScalarWhereInput>
    OR?: Enumerable<usersSuscriptionsScalarWhereInput>
    NOT?: Enumerable<usersSuscriptionsScalarWhereInput>
    id?: StringFilter | string
    authorId?: IntFilter | number
    suscriptionType?: IntFilter | number
    suscriptionDate?: DateTimeFilter | Date | string
    paymentDate?: DateTimeFilter | Date | string
    expireDate?: DateTimeFilter | Date | string
    currency?: StringFilter | string
    status?: StringFilter | string
    paymentGateway?: StringFilter | string
    paymentAmount?: FloatFilter | number
  }

  export type usersAddOnsUpsertWithWhereUniqueWithoutAuthorInput = {
    where: usersAddOnsWhereUniqueInput
    update: XOR<usersAddOnsUpdateWithoutAuthorInput, usersAddOnsUncheckedUpdateWithoutAuthorInput>
    create: XOR<usersAddOnsCreateWithoutAuthorInput, usersAddOnsUncheckedCreateWithoutAuthorInput>
  }

  export type usersAddOnsUpdateWithWhereUniqueWithoutAuthorInput = {
    where: usersAddOnsWhereUniqueInput
    data: XOR<usersAddOnsUpdateWithoutAuthorInput, usersAddOnsUncheckedUpdateWithoutAuthorInput>
  }

  export type usersAddOnsUpdateManyWithWhereWithoutAuthorInput = {
    where: usersAddOnsScalarWhereInput
    data: XOR<usersAddOnsUpdateManyMutationInput, usersAddOnsUncheckedUpdateManyWithoutUsersAddOnsInput>
  }

  export type usersAddOnsScalarWhereInput = {
    AND?: Enumerable<usersAddOnsScalarWhereInput>
    OR?: Enumerable<usersAddOnsScalarWhereInput>
    NOT?: Enumerable<usersAddOnsScalarWhereInput>
    id?: StringFilter | string
    authorId?: IntFilter | number
    addOnType?: IntFilter | number
    addOnDate?: DateTimeFilter | Date | string
    paymentDate?: DateTimeFilter | Date | string
    expireDate?: DateTimeFilter | Date | string
    currency?: StringFilter | string
    status?: StringFilter | string
    paymentGateway?: StringFilter | string
    paymentAmount?: FloatFilter | number
  }

  export type UserCreateWithoutMessageInput = {
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Contact?: ContactCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutMessageInput = {
    id?: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Contact?: ContactUncheckedCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsUncheckedCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutMessageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
  }

  export type ContactCreateWithoutMessageInput = {
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
    author: UserCreateNestedOneWithoutContactInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutMessageInput = {
    id?: number
    authorId: number
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutMessageInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutMessageInput, ContactUncheckedCreateWithoutMessageInput>
  }

  export type MessageStatusCreateWithoutMessageInput = {
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
    author: UserCreateNestedOneWithoutMessageStatusInput
    contact: ContactCreateNestedOneWithoutMessageStatusInput
  }

  export type MessageStatusUncheckedCreateWithoutMessageInput = {
    id?: number
    authorId: number
    contactId: number
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
  }

  export type MessageStatusCreateOrConnectWithoutMessageInput = {
    where: MessageStatusWhereUniqueInput
    create: XOR<MessageStatusCreateWithoutMessageInput, MessageStatusUncheckedCreateWithoutMessageInput>
  }

  export type MessageStatusCreateManyMessageInputEnvelope = {
    data: Enumerable<MessageStatusCreateManyMessageInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMessageInput = {
    update: XOR<UserUpdateWithoutMessageInput, UserUncheckedUpdateWithoutMessageInput>
    create: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
  }

  export type UserUpdateWithoutMessageInput = {
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Contact?: ContactUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Contact?: ContactUncheckedUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUncheckedUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type ContactUpsertWithoutMessageInput = {
    update: XOR<ContactUpdateWithoutMessageInput, ContactUncheckedUpdateWithoutMessageInput>
    create: XOR<ContactCreateWithoutMessageInput, ContactUncheckedCreateWithoutMessageInput>
  }

  export type ContactUpdateWithoutMessageInput = {
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutContactNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutContactNestedInput
  }

  export type MessageStatusUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageStatusWhereUniqueInput
    update: XOR<MessageStatusUpdateWithoutMessageInput, MessageStatusUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageStatusCreateWithoutMessageInput, MessageStatusUncheckedCreateWithoutMessageInput>
  }

  export type MessageStatusUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageStatusWhereUniqueInput
    data: XOR<MessageStatusUpdateWithoutMessageInput, MessageStatusUncheckedUpdateWithoutMessageInput>
  }

  export type MessageStatusUpdateManyWithWhereWithoutMessageInput = {
    where: MessageStatusScalarWhereInput
    data: XOR<MessageStatusUpdateManyMutationInput, MessageStatusUncheckedUpdateManyWithoutMessageStatusInput>
  }

  export type UserCreateWithoutMessageStatusInput = {
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageCreateNestedManyWithoutAuthorInput
    Contact?: ContactCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutMessageStatusInput = {
    id?: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageUncheckedCreateNestedManyWithoutAuthorInput
    Contact?: ContactUncheckedCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsUncheckedCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutMessageStatusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessageStatusInput, UserUncheckedCreateWithoutMessageStatusInput>
  }

  export type ContactCreateWithoutMessageStatusInput = {
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
    author: UserCreateNestedOneWithoutContactInput
    Message?: MessageCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutMessageStatusInput = {
    id?: number
    authorId: number
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
    Message?: MessageUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutMessageStatusInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutMessageStatusInput, ContactUncheckedCreateWithoutMessageStatusInput>
  }

  export type MessageCreateWithoutMessageStatusInput = {
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
    author: UserCreateNestedOneWithoutMessageInput
    contact: ContactCreateNestedOneWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutMessageStatusInput = {
    id?: number
    authorId: number
    contactId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
  }

  export type MessageCreateOrConnectWithoutMessageStatusInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutMessageStatusInput, MessageUncheckedCreateWithoutMessageStatusInput>
  }

  export type UserUpsertWithoutMessageStatusInput = {
    update: XOR<UserUpdateWithoutMessageStatusInput, UserUncheckedUpdateWithoutMessageStatusInput>
    create: XOR<UserCreateWithoutMessageStatusInput, UserUncheckedCreateWithoutMessageStatusInput>
  }

  export type UserUpdateWithoutMessageStatusInput = {
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUpdateManyWithoutAuthorNestedInput
    Contact?: ContactUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutMessageStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
    Contact?: ContactUncheckedUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUncheckedUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type ContactUpsertWithoutMessageStatusInput = {
    update: XOR<ContactUpdateWithoutMessageStatusInput, ContactUncheckedUpdateWithoutMessageStatusInput>
    create: XOR<ContactCreateWithoutMessageStatusInput, ContactUncheckedCreateWithoutMessageStatusInput>
  }

  export type ContactUpdateWithoutMessageStatusInput = {
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutContactNestedInput
    Message?: MessageUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutMessageStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUncheckedUpdateManyWithoutContactNestedInput
  }

  export type MessageUpsertWithoutMessageStatusInput = {
    update: XOR<MessageUpdateWithoutMessageStatusInput, MessageUncheckedUpdateWithoutMessageStatusInput>
    create: XOR<MessageCreateWithoutMessageStatusInput, MessageUncheckedCreateWithoutMessageStatusInput>
  }

  export type MessageUpdateWithoutMessageStatusInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMessageNestedInput
    contact?: ContactUpdateOneRequiredWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutMessageStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutContactInput = {
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutContactInput = {
    id?: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageUncheckedCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsUncheckedCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutContactInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
  }

  export type MessageCreateWithoutContactInput = {
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
    author: UserCreateNestedOneWithoutMessageInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutContactInput = {
    id?: number
    authorId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutContactInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutContactInput, MessageUncheckedCreateWithoutContactInput>
  }

  export type MessageCreateManyContactInputEnvelope = {
    data: Enumerable<MessageCreateManyContactInput>
    skipDuplicates?: boolean
  }

  export type MessageStatusCreateWithoutContactInput = {
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
    author: UserCreateNestedOneWithoutMessageStatusInput
    message: MessageCreateNestedOneWithoutMessageStatusInput
  }

  export type MessageStatusUncheckedCreateWithoutContactInput = {
    id?: number
    authorId: number
    messageId: number
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
  }

  export type MessageStatusCreateOrConnectWithoutContactInput = {
    where: MessageStatusWhereUniqueInput
    create: XOR<MessageStatusCreateWithoutContactInput, MessageStatusUncheckedCreateWithoutContactInput>
  }

  export type MessageStatusCreateManyContactInputEnvelope = {
    data: Enumerable<MessageStatusCreateManyContactInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutContactInput = {
    update: XOR<UserUpdateWithoutContactInput, UserUncheckedUpdateWithoutContactInput>
    create: XOR<UserCreateWithoutContactInput, UserUncheckedCreateWithoutContactInput>
  }

  export type UserUpdateWithoutContactInput = {
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUncheckedUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutContactInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutContactInput, MessageUncheckedUpdateWithoutContactInput>
    create: XOR<MessageCreateWithoutContactInput, MessageUncheckedCreateWithoutContactInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutContactInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutContactInput, MessageUncheckedUpdateWithoutContactInput>
  }

  export type MessageUpdateManyWithWhereWithoutContactInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageStatusUpsertWithWhereUniqueWithoutContactInput = {
    where: MessageStatusWhereUniqueInput
    update: XOR<MessageStatusUpdateWithoutContactInput, MessageStatusUncheckedUpdateWithoutContactInput>
    create: XOR<MessageStatusCreateWithoutContactInput, MessageStatusUncheckedCreateWithoutContactInput>
  }

  export type MessageStatusUpdateWithWhereUniqueWithoutContactInput = {
    where: MessageStatusWhereUniqueInput
    data: XOR<MessageStatusUpdateWithoutContactInput, MessageStatusUncheckedUpdateWithoutContactInput>
  }

  export type MessageStatusUpdateManyWithWhereWithoutContactInput = {
    where: MessageStatusScalarWhereInput
    data: XOR<MessageStatusUpdateManyMutationInput, MessageStatusUncheckedUpdateManyWithoutMessageStatusInput>
  }

  export type usersSuscriptionsCreateWithoutSuscriptionInput = {
    id?: string
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
    author: UserCreateNestedOneWithoutUsersSuscriptionsInput
  }

  export type usersSuscriptionsUncheckedCreateWithoutSuscriptionInput = {
    id?: string
    authorId: number
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersSuscriptionsCreateOrConnectWithoutSuscriptionInput = {
    where: usersSuscriptionsWhereUniqueInput
    create: XOR<usersSuscriptionsCreateWithoutSuscriptionInput, usersSuscriptionsUncheckedCreateWithoutSuscriptionInput>
  }

  export type usersSuscriptionsCreateManySuscriptionInputEnvelope = {
    data: Enumerable<usersSuscriptionsCreateManySuscriptionInput>
    skipDuplicates?: boolean
  }

  export type usersSuscriptionsUpsertWithWhereUniqueWithoutSuscriptionInput = {
    where: usersSuscriptionsWhereUniqueInput
    update: XOR<usersSuscriptionsUpdateWithoutSuscriptionInput, usersSuscriptionsUncheckedUpdateWithoutSuscriptionInput>
    create: XOR<usersSuscriptionsCreateWithoutSuscriptionInput, usersSuscriptionsUncheckedCreateWithoutSuscriptionInput>
  }

  export type usersSuscriptionsUpdateWithWhereUniqueWithoutSuscriptionInput = {
    where: usersSuscriptionsWhereUniqueInput
    data: XOR<usersSuscriptionsUpdateWithoutSuscriptionInput, usersSuscriptionsUncheckedUpdateWithoutSuscriptionInput>
  }

  export type usersSuscriptionsUpdateManyWithWhereWithoutSuscriptionInput = {
    where: usersSuscriptionsScalarWhereInput
    data: XOR<usersSuscriptionsUpdateManyMutationInput, usersSuscriptionsUncheckedUpdateManyWithoutUsersSuscriptionsInput>
  }

  export type UserCreateWithoutUsersSuscriptionsInput = {
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageCreateNestedManyWithoutAuthorInput
    Contact?: ContactCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutUsersSuscriptionsInput = {
    id?: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageUncheckedCreateNestedManyWithoutAuthorInput
    Contact?: ContactUncheckedCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutAuthorInput
    usersAddOns?: usersAddOnsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutUsersSuscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUsersSuscriptionsInput, UserUncheckedCreateWithoutUsersSuscriptionsInput>
  }

  export type suscriptionsCatalogueCreateWithoutUsersSuscriptionsInput = {
    id: number
    planName: string
    planprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
  }

  export type suscriptionsCatalogueUncheckedCreateWithoutUsersSuscriptionsInput = {
    id: number
    planName: string
    planprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
  }

  export type suscriptionsCatalogueCreateOrConnectWithoutUsersSuscriptionsInput = {
    where: suscriptionsCatalogueWhereUniqueInput
    create: XOR<suscriptionsCatalogueCreateWithoutUsersSuscriptionsInput, suscriptionsCatalogueUncheckedCreateWithoutUsersSuscriptionsInput>
  }

  export type UserUpsertWithoutUsersSuscriptionsInput = {
    update: XOR<UserUpdateWithoutUsersSuscriptionsInput, UserUncheckedUpdateWithoutUsersSuscriptionsInput>
    create: XOR<UserCreateWithoutUsersSuscriptionsInput, UserUncheckedCreateWithoutUsersSuscriptionsInput>
  }

  export type UserUpdateWithoutUsersSuscriptionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUpdateManyWithoutAuthorNestedInput
    Contact?: ContactUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutUsersSuscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
    Contact?: ContactUncheckedUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutAuthorNestedInput
    usersAddOns?: usersAddOnsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type suscriptionsCatalogueUpsertWithoutUsersSuscriptionsInput = {
    update: XOR<suscriptionsCatalogueUpdateWithoutUsersSuscriptionsInput, suscriptionsCatalogueUncheckedUpdateWithoutUsersSuscriptionsInput>
    create: XOR<suscriptionsCatalogueCreateWithoutUsersSuscriptionsInput, suscriptionsCatalogueUncheckedCreateWithoutUsersSuscriptionsInput>
  }

  export type suscriptionsCatalogueUpdateWithoutUsersSuscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type suscriptionsCatalogueUncheckedUpdateWithoutUsersSuscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    planName?: StringFieldUpdateOperationsInput | string
    planprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type usersAddOnsCreateWithoutSuscriptionInput = {
    id?: string
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
    author: UserCreateNestedOneWithoutUsersAddOnsInput
  }

  export type usersAddOnsUncheckedCreateWithoutSuscriptionInput = {
    id?: string
    authorId: number
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersAddOnsCreateOrConnectWithoutSuscriptionInput = {
    where: usersAddOnsWhereUniqueInput
    create: XOR<usersAddOnsCreateWithoutSuscriptionInput, usersAddOnsUncheckedCreateWithoutSuscriptionInput>
  }

  export type usersAddOnsCreateManySuscriptionInputEnvelope = {
    data: Enumerable<usersAddOnsCreateManySuscriptionInput>
    skipDuplicates?: boolean
  }

  export type usersAddOnsUpsertWithWhereUniqueWithoutSuscriptionInput = {
    where: usersAddOnsWhereUniqueInput
    update: XOR<usersAddOnsUpdateWithoutSuscriptionInput, usersAddOnsUncheckedUpdateWithoutSuscriptionInput>
    create: XOR<usersAddOnsCreateWithoutSuscriptionInput, usersAddOnsUncheckedCreateWithoutSuscriptionInput>
  }

  export type usersAddOnsUpdateWithWhereUniqueWithoutSuscriptionInput = {
    where: usersAddOnsWhereUniqueInput
    data: XOR<usersAddOnsUpdateWithoutSuscriptionInput, usersAddOnsUncheckedUpdateWithoutSuscriptionInput>
  }

  export type usersAddOnsUpdateManyWithWhereWithoutSuscriptionInput = {
    where: usersAddOnsScalarWhereInput
    data: XOR<usersAddOnsUpdateManyMutationInput, usersAddOnsUncheckedUpdateManyWithoutUsersAddOnsInput>
  }

  export type UserCreateWithoutUsersAddOnsInput = {
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageCreateNestedManyWithoutAuthorInput
    Contact?: ContactCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutUsersAddOnsInput = {
    id?: number
    name: string
    fatherLastName: string
    motherLastName: string
    email: string
    gender: string
    phoneNumberCountry: string
    phoneNumber: string
    curp: string
    maritalStatus: string
    birthDate: string
    birthDateV2?: Date | string
    city: string
    photo_url: string
    registryType: string
    referalCode: number
    useType: string
    created_time: string
    isVerified?: boolean
    created_timeV2?: Date | string
    last_edit_time: string
    last_edit_timeV2?: Date | string
    acceptedTermsDate?: Date | string
    lifeState: boolean
    Message?: MessageUncheckedCreateNestedManyWithoutAuthorInput
    Contact?: ContactUncheckedCreateNestedManyWithoutAuthorInput
    MessageStatus?: MessageStatusUncheckedCreateNestedManyWithoutAuthorInput
    usersSuscriptions?: usersSuscriptionsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutUsersAddOnsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUsersAddOnsInput, UserUncheckedCreateWithoutUsersAddOnsInput>
  }

  export type addOnsCatalogueCreateWithoutUsersAddOnsInput = {
    id: number
    addOnName: string
    addOnprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
  }

  export type addOnsCatalogueUncheckedCreateWithoutUsersAddOnsInput = {
    id: number
    addOnName: string
    addOnprice: number
    allowedNfts: number
    storage: number
    patrimonial: boolean
    funeralWill: boolean
    remains: boolean
    organs: boolean
    health: boolean
    dependants: boolean
    pets: boolean
    accounts: boolean
    vault: boolean
    familyHub: boolean
    support: boolean
    document?: number
    whoToInform?: number
    daysOfGrace?: number
    daysToExpire?: number
    status?: string
  }

  export type addOnsCatalogueCreateOrConnectWithoutUsersAddOnsInput = {
    where: addOnsCatalogueWhereUniqueInput
    create: XOR<addOnsCatalogueCreateWithoutUsersAddOnsInput, addOnsCatalogueUncheckedCreateWithoutUsersAddOnsInput>
  }

  export type UserUpsertWithoutUsersAddOnsInput = {
    update: XOR<UserUpdateWithoutUsersAddOnsInput, UserUncheckedUpdateWithoutUsersAddOnsInput>
    create: XOR<UserCreateWithoutUsersAddOnsInput, UserUncheckedCreateWithoutUsersAddOnsInput>
  }

  export type UserUpdateWithoutUsersAddOnsInput = {
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUpdateManyWithoutAuthorNestedInput
    Contact?: ContactUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutUsersAddOnsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    curp?: StringFieldUpdateOperationsInput | string
    maritalStatus?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: StringFieldUpdateOperationsInput | string
    photo_url?: StringFieldUpdateOperationsInput | string
    registryType?: StringFieldUpdateOperationsInput | string
    referalCode?: IntFieldUpdateOperationsInput | number
    useType?: StringFieldUpdateOperationsInput | string
    created_time?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    created_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    last_edit_time?: StringFieldUpdateOperationsInput | string
    last_edit_timeV2?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedTermsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    lifeState?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUncheckedUpdateManyWithoutAuthorNestedInput
    Contact?: ContactUncheckedUpdateManyWithoutAuthorNestedInput
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutAuthorNestedInput
    usersSuscriptions?: usersSuscriptionsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type addOnsCatalogueUpsertWithoutUsersAddOnsInput = {
    update: XOR<addOnsCatalogueUpdateWithoutUsersAddOnsInput, addOnsCatalogueUncheckedUpdateWithoutUsersAddOnsInput>
    create: XOR<addOnsCatalogueCreateWithoutUsersAddOnsInput, addOnsCatalogueUncheckedCreateWithoutUsersAddOnsInput>
  }

  export type addOnsCatalogueUpdateWithoutUsersAddOnsInput = {
    id?: IntFieldUpdateOperationsInput | number
    addOnName?: StringFieldUpdateOperationsInput | string
    addOnprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type addOnsCatalogueUncheckedUpdateWithoutUsersAddOnsInput = {
    id?: IntFieldUpdateOperationsInput | number
    addOnName?: StringFieldUpdateOperationsInput | string
    addOnprice?: IntFieldUpdateOperationsInput | number
    allowedNfts?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    patrimonial?: BoolFieldUpdateOperationsInput | boolean
    funeralWill?: BoolFieldUpdateOperationsInput | boolean
    remains?: BoolFieldUpdateOperationsInput | boolean
    organs?: BoolFieldUpdateOperationsInput | boolean
    health?: BoolFieldUpdateOperationsInput | boolean
    dependants?: BoolFieldUpdateOperationsInput | boolean
    pets?: BoolFieldUpdateOperationsInput | boolean
    accounts?: BoolFieldUpdateOperationsInput | boolean
    vault?: BoolFieldUpdateOperationsInput | boolean
    familyHub?: BoolFieldUpdateOperationsInput | boolean
    support?: BoolFieldUpdateOperationsInput | boolean
    document?: IntFieldUpdateOperationsInput | number
    whoToInform?: IntFieldUpdateOperationsInput | number
    daysOfGrace?: IntFieldUpdateOperationsInput | number
    daysToExpire?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyAuthorInput = {
    id?: number
    contactId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
  }

  export type ContactCreateManyAuthorInput = {
    id?: number
    photoUrl: string
    name: string
    fatherLastName: string
    motherLastName: string
    relation: string
    email: string
    typeContact: string
    phoneNumber: string
    phoneNumberCountry: string
    birthDate: string
    birthDateV2?: Date | string
    notes: string
    trusted?: boolean
    hidden?: boolean
  }

  export type MessageStatusCreateManyAuthorInput = {
    id?: number
    contactId: number
    messageId: number
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
  }

  export type usersSuscriptionsCreateManyAuthorInput = {
    id?: string
    suscriptionType: number
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersAddOnsCreateManyAuthorInput = {
    id?: string
    addOnType: number
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type MessageUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    contact?: ContactUpdateOneRequiredWithoutMessageNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUpdateWithoutAuthorInput = {
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUpdateManyWithoutContactNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
    Message?: MessageUncheckedUpdateManyWithoutContactNestedInput
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateManyWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    photoUrl?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    fatherLastName?: StringFieldUpdateOperationsInput | string
    motherLastName?: StringFieldUpdateOperationsInput | string
    relation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    typeContact?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneNumberCountry?: StringFieldUpdateOperationsInput | string
    birthDate?: StringFieldUpdateOperationsInput | string
    birthDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    trusted?: BoolFieldUpdateOperationsInput | boolean
    hidden?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageStatusUpdateWithoutAuthorInput = {
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
    contact?: ContactUpdateOneRequiredWithoutMessageStatusNestedInput
    message?: MessageUpdateOneRequiredWithoutMessageStatusNestedInput
  }

  export type MessageStatusUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
  }

  export type MessageStatusUncheckedUpdateManyWithoutMessageStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
  }

  export type usersSuscriptionsUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    suscription?: suscriptionsCatalogueUpdateOneRequiredWithoutUsersSuscriptionsNestedInput
  }

  export type usersSuscriptionsUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    suscriptionType?: IntFieldUpdateOperationsInput | number
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type usersSuscriptionsUncheckedUpdateManyWithoutUsersSuscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    suscriptionType?: IntFieldUpdateOperationsInput | number
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type usersAddOnsUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    suscription?: addOnsCatalogueUpdateOneRequiredWithoutUsersAddOnsNestedInput
  }

  export type usersAddOnsUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    addOnType?: IntFieldUpdateOperationsInput | number
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type usersAddOnsUncheckedUpdateManyWithoutUsersAddOnsInput = {
    id?: StringFieldUpdateOperationsInput | string
    addOnType?: IntFieldUpdateOperationsInput | number
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type MessageStatusCreateManyMessageInput = {
    id?: number
    authorId: number
    contactId: number
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
  }

  export type MessageStatusUpdateWithoutMessageInput = {
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMessageStatusNestedInput
    contact?: ContactUpdateOneRequiredWithoutMessageStatusNestedInput
  }

  export type MessageStatusUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    contactId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
  }

  export type MessageCreateManyContactInput = {
    id?: number
    authorId: number
    title: string
    description: string
    urlMultimedia: string
    multimediaType: string
    multimediaMeta: string
    thumbnailUrl: string
    lifeState: string
    status: string
    isSend: boolean
    mediaType: boolean
    createDate: string
    createDateV2?: Date | string
    editDate: string
    editDateV2?: Date | string
    programDate: string
    programDateV2?: Date | string
    urlNft?: string
    isNfts: boolean
    idNft: string
    statsId: string
    folder?: string
    chain?: string
    estandar?: string
    whatsapp?: boolean
    email?: boolean
    maxhastriest?: number
    maxconfirmtries?: number
    uuid?: string
  }

  export type MessageStatusCreateManyContactInput = {
    id?: number
    authorId: number
    messageId: number
    status: string
    programDate: string
    programDateV2?: Date | string
    data: JsonNullValueInput | InputJsonValue
    urlId: number
    messageError?: string
  }

  export type MessageUpdateWithoutContactInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMessageNestedInput
    MessageStatus?: MessageStatusUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    urlMultimedia?: StringFieldUpdateOperationsInput | string
    multimediaType?: StringFieldUpdateOperationsInput | string
    multimediaMeta?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: StringFieldUpdateOperationsInput | string
    lifeState?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    isSend?: BoolFieldUpdateOperationsInput | boolean
    mediaType?: BoolFieldUpdateOperationsInput | boolean
    createDate?: StringFieldUpdateOperationsInput | string
    createDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    editDate?: StringFieldUpdateOperationsInput | string
    editDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    urlNft?: StringFieldUpdateOperationsInput | string
    isNfts?: BoolFieldUpdateOperationsInput | boolean
    idNft?: StringFieldUpdateOperationsInput | string
    statsId?: StringFieldUpdateOperationsInput | string
    folder?: StringFieldUpdateOperationsInput | string
    chain?: StringFieldUpdateOperationsInput | string
    estandar?: StringFieldUpdateOperationsInput | string
    whatsapp?: BoolFieldUpdateOperationsInput | boolean
    email?: BoolFieldUpdateOperationsInput | boolean
    maxhastriest?: IntFieldUpdateOperationsInput | number
    maxconfirmtries?: IntFieldUpdateOperationsInput | number
    uuid?: StringFieldUpdateOperationsInput | string
    MessageStatus?: MessageStatusUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageStatusUpdateWithoutContactInput = {
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutMessageStatusNestedInput
    message?: MessageUpdateOneRequiredWithoutMessageStatusNestedInput
  }

  export type MessageStatusUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    messageId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    programDate?: StringFieldUpdateOperationsInput | string
    programDateV2?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: JsonNullValueInput | InputJsonValue
    urlId?: IntFieldUpdateOperationsInput | number
    messageError?: StringFieldUpdateOperationsInput | string
  }

  export type usersSuscriptionsCreateManySuscriptionInput = {
    id?: string
    authorId: number
    suscriptionDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersSuscriptionsUpdateWithoutSuscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutUsersSuscriptionsNestedInput
  }

  export type usersSuscriptionsUncheckedUpdateWithoutSuscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    suscriptionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type usersAddOnsCreateManySuscriptionInput = {
    id?: string
    authorId: number
    addOnDate?: Date | string
    paymentDate?: Date | string
    expireDate?: Date | string
    currency?: string
    status?: string
    paymentGateway: string
    paymentAmount: number
  }

  export type usersAddOnsUpdateWithoutSuscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    author?: UserUpdateOneRequiredWithoutUsersAddOnsNestedInput
  }

  export type usersAddOnsUncheckedUpdateWithoutSuscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    addOnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentGateway?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}